<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on gam0022.net</title>
    <link>https://gam0022.net/post/index.xml</link>
    <description>Recent content in Post-rsses on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2021 gam0022</copyright>
    <lastBuildDate>Wed, 31 May 2023 06:49:24 +0900</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SESSIONS 2023のGLSL Graphics Compoで準優勝しました（グラフィックス解説）</title>
      <link>https://gam0022.net/blog/2023/05/31/sessions2023-glsl-compo/</link>
      <pubDate>Wed, 31 May 2023 06:49:24 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2023/05/31/sessions2023-glsl-compo/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;2023年4月28日～30日にツインメッセ静岡で開催された&lt;a href=&#34;https://sessions.frontl1ne.net/&#34;&gt;SESSIONS in C4 LAN 2023 SPRING&lt;/a&gt;に参加し、GLSL Graphics Compo部門で2位をいただきました！&lt;/p&gt;

&lt;p&gt;作品のタイトルは『Transcendental Cube』で、シンプルな立方体が複雑なジオメトリーに変形していく非現実的な様子を、写実的で迫力ある映像で表現することをコンセプトにしました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/194E3UWj870&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;GLSL Graphics Compoのレギュレーションとして音楽は含められませんが、イベント後の動画用に&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;さんに素晴らしい音楽を制作していただきました。この場を借りて、心から感謝の意を表します！&lt;/p&gt;

&lt;p&gt;以下は『Transcendental Cube』の各種リンクです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/194E3UWj870&#34;&gt;📺 YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/dldGzj&#34;&gt;👁️ Shadertoy&lt;/a&gt; ※高負荷のためRTX3080以上のGPU推奨&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/gam0022/status/1653096277184503808&#34;&gt;🐦 Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=94339&#34;&gt;📦 Pouet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;5月25日に&lt;a href=&#34;https://teamlab.connpass.com/event/282028/&#34;&gt;SESSIONS 2023 AFTER PARTY＠teamLab Office&lt;/a&gt;が開催され、そこで本作品の技術的な解説を行いました。&lt;/p&gt;

&lt;p&gt;その発表資料はこちらです。&lt;/p&gt;

&lt;div class=&#34;google-slide-wrap&#34;&gt;
&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vRElQgUpyWO1kAOOvmckhu2PAfVZHoRrIU7S59o8MrSMSQpz4LLBUuK1_X20tGZ8S8eSK9-dSkIyYo3/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;1440&#34; height=&#34;839&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;この記事では、スライドの画像を使用しながら、作品の解説をします。&lt;/p&gt;

&lt;h1 id=&#34;glsl-graphics-compoとは&#34;&gt;GLSL Graphics Compoとは？&lt;/h1&gt;

&lt;p&gt;デモシーンの文化に馴染みのない方に向けて、簡単にGLSL Graphics Compoの概要やレギュレーションについて説明します。&lt;/p&gt;

&lt;p&gt;GLSL Graphics Compoは&lt;a href=&#34;https://twigl.app/&#34;&gt;twigl&lt;/a&gt;上でリアルタイムで動作するGLSLのシェーダーによるグラフィックスを競うコンポです。
コンポはコンペティションの意味で、参加者投票によって順位が決まります。&lt;/p&gt;

&lt;h2 id=&#34;glslシェーダーで映像を作り出す魔法&#34;&gt;GLSLシェーダーで映像を作り出す魔法&lt;/h2&gt;

&lt;p&gt;GLSLシェーダーを使用して、プログラミングのソースコードだけで映像を作り出すことができるのですが、一般的には想像しづらいかもしれません。&lt;/p&gt;

&lt;p&gt;具体的なイメージを掴むために、以下の図をご覧ください。GLSLのコードをコメントや改行、空白文字を取り除いて処理の内容で色分けしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/slide-glsl-code.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/slide-glsl-code.png&#34; alt=&#34;コメントと空白を削除したGLSLのコード全体&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この9270文字のGLSLシェーダーに、映像のすべてが実装されています。&lt;/p&gt;

&lt;p&gt;実は、このシェーダーにはシーンのモデリング、ライティング、カメラワーク、演出のシーケンスがすべて含まれているのです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3Dモデルやテクスチャなどの外部アセットは一切使用していません。すべての3Dデータやテクスチャは、GLSLのコードからプロシージャルに生成されています。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;もちろん、変数名や関数名を1文字に短縮したり、デバッグ用のコードを削除することで文字数をさらに削減することも可能です。しかし、今回は文字数削減よりも可読性を重視してコーディングしました。&lt;/p&gt;

&lt;h2 id=&#34;webgl2-0が利用可能に&#34;&gt;WebGL2.0が利用可能に&lt;/h2&gt;

&lt;p&gt;SESSIONS 2023では、twiglの&lt;code&gt;classic (300 es)&lt;/code&gt;モードが許可されたので、WebGL2.0の機能も利用できるようになりました！&lt;/p&gt;

&lt;p&gt;TokyoDemoFest2021ではGLSL Snadboxがレギュレーションとなっており、WebGL1.0の機能しか使えないという制約があったのですが、今回から配列やビット演算などが利用できるようになりました。&lt;/p&gt;

&lt;p&gt;twiglはWeb上でGLSLのフラグメントシェーダーを編集・実行できるWebGLで実装されたサービスです。&lt;/p&gt;

&lt;p&gt;類似サービスにはGLSL SnadboxやShadertoyなどがありますが、
twiglは &lt;a href=&#34;https://twitter.com/search?q=%23%E3%81%A4%E3%81%B6%E3%82%84%E3%81%8DGLSL&amp;amp;src=hashtag_click&#34;&gt;#つぶやきGLSL&lt;/a&gt; と呼ばれる1ツイートに収まる文字数でGLSLのシェーダー作品を作る文化に特化しています。&lt;/p&gt;

&lt;p&gt;ちなみに今回のGLSL Graphics Compoには文字数の制約はありませんでした。
そのためか上映時間が3分あるような超大作の作品も複数ありました。
文字数に制約はありませんが、複雑すぎるGLSLのコードはコンパイルに時間がかかりすぎてChromeがクラッシュするので、GLSLのコンパイル時間が実質的なコードサイズの制限になります。&lt;/p&gt;

&lt;h2 id=&#34;ローカル上の開発環境の構築&#34;&gt;ローカル上の開発環境の構築&lt;/h2&gt;

&lt;p&gt;node.jsを使用した自作のWebGLフレームワーク（&lt;a href=&#34;https://github.com/gam0022/chromatiq/tree/sessions2023&#34;&gt;chromatiq&lt;/a&gt;）を活用して、ローカル上の開発環境を構築しました。
このフレームワークを使うと、VS Codeでシェーダーを編集し、Chromeでホットリロードが可能です。&lt;/p&gt;

&lt;p&gt;直接twiglやShadertoy上で編集することも可能ですが、ローカル環境を構築するメリットは複数あります。たとえば、コードの自動整形、バージョン管理、時間のシークバーなどが実現できます。&lt;/p&gt;

&lt;p&gt;また、twiglへのポーティングの作業は、以前の記事で紹介したテンプレートを利用しました。
chromatiq用のシェーダーのuniform名はShadertoy互換があるため、&lt;code&gt;Shadertoy → twigl (classic 300es)&lt;/code&gt;のテンプレートが利用可能です。
ポーティングの手順は非常に簡単で、テンプレートのGLSLのコードを先頭にコピー＆ペーストするだけで移植作業が完了します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2019/03/04/porting-from-shadertoy-to-glslsandbox/&#34;&gt;先頭にコピペするだけ！Shadertoy → GLSL Sandbox / NEORT の移植用ヘッダーコードの紹介 | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mad-tracingによるライティング&#34;&gt;Mad Tracingによるライティング&lt;/h1&gt;

&lt;p&gt;ライティングでは次の2つをゴールとしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global Illumination&lt;/li&gt;
&lt;li&gt;Bloom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/lighting-features.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/lighting-features.png&#34; alt=&#34;ライティングの特徴（Global IlluminationとBloomの両立）&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般的に、Bloomはマルチパスのポストエフェクトとして実装する必要がありますが、
GLSL Graphics Compoのレギュレーションでは1Passでの実装が必要です。
そこで、1PassでGIとBloomの両方を実現するためにMad Tracingという手法を利用しました。&lt;/p&gt;

&lt;p&gt;Mad Tracingは&lt;a href=&#34;https://twitter.com/Virgill74&#34;&gt;Virgill&lt;/a&gt;さんが開発した手法で、&lt;a href=&#34;https://www.youtube.com/watch?v=5lR76o9lWB0&#34;&gt;End of time&lt;/a&gt;という2018年に発表された4K Introのデモではじめて利用されました。&lt;/p&gt;

&lt;p&gt;Mad Tracingをざっくり説明すると、Path Tracingの亜種のような手法です。
通常のPath Tracingでは、Bloom効果を実現することはできませんが、Mad TracingではBloom効果も含めて計算することが可能です。&lt;/p&gt;

&lt;h2 id=&#34;path-tracing&#34;&gt;Path Tracing&lt;/h2&gt;

&lt;p&gt;Path TracingはGlobal Illuminationを実現可能でフォトリアルなグラフィックスが得意な手法です。&lt;/p&gt;

&lt;p&gt;下記の図のようにBRDFに応じて確率的に反射方向をサンプリングしてレイを大量に飛ばすことで、光源からの影響を計算します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/pathtracing-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/pathtracing-1.png&#34; alt=&#34;パストレーシング①&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記はGlossyなマテリアルの球体のレンダリング結果と、そのマテリアルのBRDFの反射方向の分布を示した図です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/pathtracing-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/pathtracing-2.png&#34; alt=&#34;パストレーシング②&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Glossyなマテリアルでは、球体の周囲の映り込みがブラー（ぼかし）されていることが分かります。このブラーは、レイを複数方向にサンプリングし、その結果を平均することで実現されています。&lt;/p&gt;

&lt;p&gt;難しいことは分からなくても、レイを複数方向に飛ばすことで、ブラー（ぼかし）されるイメージだけ理解できれば問題ありません。&lt;/p&gt;

&lt;h2 id=&#34;レイマーチングとmad-tracing&#34;&gt;レイマーチングとMad Tracing&lt;/h2&gt;

&lt;p&gt;Mad TracingではPath Tracingと同じように表面のroughnessに応じてセカンダリレイを飛ばしてGIを計算します。&lt;/p&gt;

&lt;p&gt;通常のパストレーシングでは物体の表面にヒットしてからセカンダリレイを複数回飛ばすと思いますが、
Mad Tracingではレイマーチングのステップ中にセカンダリレイを近傍のオブジェクトのroughnessに応じて飛ばします。&lt;/p&gt;

&lt;p&gt;ここでレイマーチングとMad Tracingのレイの進む様子を示した図を紹介します。&lt;/p&gt;

&lt;h3 id=&#34;レイマーチングのループの様子&#34;&gt;レイマーチングのループの様子&lt;/h3&gt;

&lt;p&gt;次の図はレイマーチングのループの様子です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/raymarching.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/raymarching.png&#34; alt=&#34;レイマーチングのループの様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;レイがRayOriginからスタートして、このようにステップごとにRayDirection方向に進んでいきます。
レイマーチングを勉強したことがある人ならおそらく見覚えのある図です。&lt;/p&gt;

&lt;h3 id=&#34;mad-tracingのループの様子&#34;&gt;Mad Tracingのループの様子&lt;/h3&gt;

&lt;p&gt;そして次の図はMad Tracingのループの様子です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing.png&#34; alt=&#34;Mad Tracingのループの様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mad Tracingは、レイマーチングのループ中に周囲の空間をサンプリングします。
レイの先端を &lt;code&gt;ro2（ray origin 2）&lt;/code&gt; として、そこからセカンダリーのレイを発射します。この操作をレイマーチングの各ステップで行います。&lt;/p&gt;

&lt;p&gt;こうしてレイの周囲の空間からの光源の影響も蓄積することで、Bloomの効果を1Passで実現できます。&lt;/p&gt;

&lt;p&gt;これによってボリューム感やBloom感のあるライティングを実現できます。その代償として、少々負荷が高い印象です。&lt;/p&gt;

&lt;h2 id=&#34;mad-tracingのコード解説&#34;&gt;Mad Tracingのコード解説&lt;/h2&gt;

&lt;p&gt;実際のGLSLのコードを踏まえてMad Tracingのコード解説します。&lt;/p&gt;

&lt;h3 id=&#34;map関数を2回参照&#34;&gt;map関数を2回参照&lt;/h3&gt;

&lt;p&gt;単なるレイマーチングにも見えますが、よく見るとmap関数を2回呼び出していることが分かります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code1.png&#34; alt=&#34;map関数を2回参照&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2つ目のサンプリングであるm2の行は、周囲の空間のサンプリングです。&lt;/p&gt;

&lt;h3 id=&#34;if分岐なしでbloom用-gi用のサンプリングを処理&#34;&gt;if分岐なしでBloom用／GI用のサンプリングを処理&lt;/h3&gt;

&lt;p&gt;map関数の返り値はvec4になっており、xにdistance（レイから物体表面への最短距離）が格納されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code2.png&#34; alt=&#34;if分岐なしにBloom用のサンプリングとGI用のサンプリングを両立&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通常のレイマーチングでは&lt;code&gt;distance &amp;lt; eps&lt;/code&gt;になったらレイとオブジェクトが衝突したとみなしてループを抜けますが、Mad Tracingでは衝突後もループを継続します。&lt;/p&gt;

&lt;p&gt;衝突後にはro2（セカンダリレイの原点）は衝突した点に固定化されるため、Bloom用のサンプリングからPath Tracingのサンプリングにif分岐なしに自動的に切り替わります。&lt;/p&gt;

&lt;p&gt;このようにしてif分岐なしにBloom用のサンプリングとGI用のサンプリングを両立しているのです。&lt;/p&gt;

&lt;h3 id=&#34;ボリュームレンダリング&#34;&gt;ボリュームレンダリング&lt;/h3&gt;

&lt;p&gt;レイマーチングのステップに0.25や0.15の係数を乗算しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code3.png&#34; alt=&#34;ボリュームレンダリング&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これはステップの間隔を小さくしてボリュームレンダリングを行うためです。
ステップの間隔が大きすぎるとBloomのアーティファクトが発生しやすくなります。
逆にステップの間隔が小さすぎると負荷が高くなるので、品質と負荷のトレードオフを考慮して係数を決定しました。&lt;/p&gt;

&lt;h3 id=&#34;アーティファクト防止&#34;&gt;アーティファクト防止&lt;/h3&gt;

&lt;p&gt;レイのスタート位置に乱数でオフセットを加えることで、ボリュームレンダリングのアーティファクトを防止しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code4.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code4.png&#34; alt=&#34;アーティファクト防止&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;オリジナルのMad Tracingにはない処理ですが、効果が大きかったので追加しました。&lt;/p&gt;

&lt;h3 id=&#34;コンパイル時間短縮&#34;&gt;コンパイル時間短縮&lt;/h3&gt;

&lt;p&gt;この処理はGLSLのコンパイル時間短縮が目的です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code5.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/madtracing-code5.png&#34; alt=&#34;コンパイル時間短縮&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;forループがunroll（展開）されるとコンパイル時間が伸びるので、絶対に実行されないifによって強制的にダイナミックループにしてunrollを防ぎます。&lt;/p&gt;

&lt;p&gt;HLSLでは&lt;code&gt;[unroll]&lt;/code&gt;や&lt;code&gt;[loop]&lt;/code&gt;を明示的に指定が可能ですが、GLSLではこのようなハックが必要となります。&lt;/p&gt;

&lt;h1 id=&#34;ifsによるモデリング&#34;&gt;IFSによるモデリング&lt;/h1&gt;

&lt;p&gt;モデリングに関しては、シンプルなCubeをIFS（Iterated Function System）を使用して複雑にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs.png&#34; alt=&#34;IFSによるモデリング&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上の図は、CubeとそれにIFSを適用した結果を示しています。この結果を得るために使用したGLSLのコードは以下の通りです。&lt;/p&gt;

&lt;p&gt;IFSの理解を深めるためにはコードを確認するのが近道だと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-code.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-code.png&#34; alt=&#34;IFSによるモデリングのGLSLのコード&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このコードでは、forループの中でいくつかの空間操作（折りたたみ、平行移動、回転）を行い、その後通常通りにCubeの距離関数を計算しています。&lt;/p&gt;

&lt;p&gt;IFSについては、&lt;a href=&#34;https://twitter.com/gaziya5&#34;&gt;@gaziya5&lt;/a&gt;さんの&lt;a href=&#34;https://neort.io/product/bvcrf5s3p9f7gigeevf0&#34;&gt;SDF for raymarching (距離関数のスキル)&lt;/a&gt;の記事がとても参考になります。&lt;/p&gt;

&lt;h2 id=&#34;unityを利用したパラメーター調整&#34;&gt;Unityを利用したパラメーター調整&lt;/h2&gt;

&lt;p&gt;IFSの実装自体は比較的簡単で、forループの中で適切な空間操作を行うだけです。&lt;/p&gt;

&lt;p&gt;一方、IFSのパラメーターの調整は非常に難しいです。今回紹介したIFSのパラメーターは6次元（平行移動3次元 + 回転3次元）です。
6次元の広大なパラメーター空間から、美しい絵を描くための適切なパラメーターを見つける必要があります。
この作業はまさに砂漠からオアシスを見つけるようなものであり、試行錯誤が必要です。&lt;/p&gt;

&lt;p&gt;また、通常は6次元よりもさらに次元数が増えていくことが一般的です。&lt;/p&gt;

&lt;p&gt;今回はUnityでパラメーター調整してからGLSLに移植する形でモデリングを行いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-unity.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-unity.png&#34; alt=&#34;Unityでパラメーター調整&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unityで調整しているのは以下のような理由からです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インスペクターで値の操作がしやすい&lt;/li&gt;
&lt;li&gt;Undo/Redoができる&lt;/li&gt;
&lt;li&gt;カメラの操作がしやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;モデリングの試行錯誤&#34;&gt;モデリングの試行錯誤&lt;/h2&gt;

&lt;p&gt;制作初期（4月15日）の段階では、複雑なジオメトリーでしたが、最終的にはシンプルに落ち着きました。&lt;/p&gt;

&lt;p&gt;この変更の理由は、Mad Tracingによって得られるライティング情報量の存在です。ジオメトリーの情報量を抑えることで、ライティングもモデリングの情報量がバランスの取れた結果を得ることができると考えました。&lt;/p&gt;

&lt;p&gt;また、モデリングが複雑になると見た目がごちゃごちゃしてしまい、キビキビと変形させたときのかっこよさも損なわれると感じました。&lt;/p&gt;

&lt;p&gt;さらに、ライティングとモデリングの情報量が最大限になると、GPU負荷や動画のビットレートなどにも負荷がかかることが予想されました。そのため、最終的な判断として情報量を適切に制御することとしました。&lt;/p&gt;

&lt;p&gt;これによって、よりバランスの取れた作品を実現することができました。&lt;/p&gt;

&lt;h3 id=&#34;プロトタイプ-unity&#34;&gt;プロトタイプ（Unity）&lt;/h3&gt;

&lt;p&gt;UnityでIFSのパラメーターを試行錯誤している段階では、このようにかなり情報量の多い複雑なジオメトリーでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-1.png&#34; alt=&#34;プロトタイプ（Unity）1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-2.png&#34; alt=&#34;プロトタイプ（Unity）2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-3.png&#34; alt=&#34;プロトタイプ（Unity）3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-4.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-unity-4.png&#34; alt=&#34;プロトタイプ（Unity）4&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;プロトタイプ-glsl&#34;&gt;プロトタイプ（GLSL）&lt;/h3&gt;

&lt;p&gt;最終的にボツになりましたが、このようなモデリングの試作もしていました。ネタ供養です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-1.png&#34; alt=&#34;プロトタイプ（Unity）1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-2.png&#34; alt=&#34;プロトタイプ（Unity）2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-3.png&#34; alt=&#34;プロトタイプ（Unity）3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-4.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/modeling-ifs-prototype-shadertoy-4.png&#34; alt=&#34;プロトタイプ（Unity）4&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ifsのバリエーション&#34;&gt;IFSのバリエーション&lt;/h3&gt;

&lt;p&gt;中盤の複雑なIFSのシーンもパラメーター調整のみで実現しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/chromatiq5096.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/chromatiq5096.png&#34; alt=&#34;IFSのバリエーション&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;壁面の演出&#34;&gt;壁面の演出&lt;/h1&gt;

&lt;p&gt;部屋のジオメトリーは非常にシンプルで、装飾のない完全な直方体です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/wall.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/wall.png&#34; alt=&#34;壁面の演出&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このシンプルなデザインは、Mad Tracingによる反射の効果を最大限に活かすために採用しました。&lt;/p&gt;

&lt;p&gt;床や壁のシンプルなジオメトリーにより、反射の美しさを引き立たせることができます。周囲の光やオブジェクトが壁面に反射されることで、部屋全体に深みと立体感が生まれます。
さらに、壁面には複数のEmissive（発光）のパターンを取り入れました。壁面の発光パターンにより、部屋の情報量を増やすことができます。
壁面からの発光パターンは、光のダイナミクスや環境の雰囲気を演出する一方、シンプルなジオメトリーとの対比も生み出します。&lt;/p&gt;

&lt;p&gt;結果として、シンプルな部屋のジオメトリーと複雑な壁面のEmissiveのパターンとMad Tracingによる反射の効果が組み合わさり、情報量のバランスがとれた空間を実現できたと思います。&lt;/p&gt;

&lt;h2 id=&#34;ノイズの壁面パターン&#34;&gt;ノイズの壁面パターン&lt;/h2&gt;

&lt;p&gt;序盤の壁面のパターンは、David Hoskinsさんによる有名なHash without Sineによる疑似乱数です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/wall-noise.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/wall-noise.png&#34; alt=&#34;ノイズの壁面パターン&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mad Tracingのアーティファクト防止に利用したhash（擬似的なランダム値を返す関数）関数を再利用しました。&lt;/p&gt;

&lt;p&gt;uv座標に対してfloorを適用してからhashを呼び出すことで、解像度を下げることができます。この結果、QRコードのような雰囲気にできました。&lt;/p&gt;

&lt;h2 id=&#34;警告の壁面パターン&#34;&gt;警告の壁面パターン&lt;/h2&gt;

&lt;p&gt;中盤の警告の壁面パターンでは、六角形のタイルの中心にランダムなマークを描画しました。&lt;/p&gt;

&lt;p&gt;マークには大きく2種類あります。1つ目はSESSIONSのロゴにも使用されている斜めのストライプのパターンであり、もう1つは2DのIFSによって生成されるパターンです。&lt;/p&gt;

&lt;p&gt;2DのIFSパターンは、以下のようなコードで生成されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/wall-warning.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2023-05-29-sessions2023-glsl-compo/wall-warning.png&#34; alt=&#34;警告の壁面パターン&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IFSは3DのCubeのモデリングでも使用していましたが、もちろん2Dでも利用できます。&lt;/p&gt;

&lt;p&gt;IFSの処理は、Cubeの場合とほぼ同じです。折りたたみ、平行移動、回転などの操作を行います。&lt;/p&gt;

&lt;p&gt;異なる点は、3DではXYZの各軸に対して3回の回転を行っていたのに対し、2Dでは1回の回転で済むことです。&lt;/p&gt;

&lt;p&gt;IFSのパラメーターは事前に調整され、8つのバリエーションを配列に定義しました。六角形のグリッドごとに乱数を生成し、ランダムにパターンを選択するように設定しました。これにより、パターンのバリエーションが豊かになります。&lt;/p&gt;

&lt;h3 id=&#34;neort-上でのリアル空間展示&#34;&gt;NEORT++上でのリアル空間展示&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://neort.io/challenge/ch4hvjsn70rhlpf0n460&#34;&gt;#CURATION_FREE_2&lt;/a&gt;はSESSIONS直後に開催され、タイミングが良かったので参加しました。&lt;/p&gt;

&lt;p&gt;警告のパターンを取り出してNEORTに移植し、NEORT++の展示室に展示させていただきました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;デジタルアートの新しい体験について考える東京馬喰町のアートギャラリーNEORT++にて5/6, 7に開催される展示”CURATION FREE #2”の作品を募集します。&lt;/p&gt;

&lt;p&gt;本展は、昨年末に行われたキュレーションを介さない展示&amp;rdquo;CURATION FREE&amp;rdquo;の第二弾です。&lt;/p&gt;

&lt;p&gt;期間中、NEORTに投稿された作品が東京馬喰町にあるNEORT++の空間に展示されていきます。&lt;/p&gt;

&lt;p&gt;どんな展示になるか予想ができませんが、表現の多様性を尊重した新しい試みになることを期待します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Real &amp;quot;Transcendental Cube&amp;quot;&lt;br&gt;&lt;br&gt;&amp;quot;Transcendental Cube&amp;quot; の壁面の演出の一部をNEORTに移植して &lt;a href=&#34;https://twitter.com/hashtag/CURATION_FREE_2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CURATION_FREE_2&lt;/a&gt; のday1に展示しました。&lt;br&gt;&lt;br&gt;（同じような動画を連投して申し訳ないですが、前の動画の画質が微妙だったので…）&lt;a href=&#34;https://twitter.com/hashtag/CURATION_FREE_2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CURATION_FREE_2&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt; &lt;a href=&#34;https://t.co/Un1t8rBc2m&#34;&gt;pic.twitter.com/Un1t8rBc2m&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1654880194287763456?ref_src=twsrc%5Etfw&#34;&gt;May 6, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;NEORT++の展示室もシンプルな直方体でしたので、作品中のような見え方になるのではないかと期待していました。しかし、実際はそんなことはありませんでした。&lt;/p&gt;

&lt;p&gt;パソコンのディスプレイ上で見たときと、現実世界にプロジェクションされたときの差異が大きく、予想していたような映像体験は残念ながら実現しませんでした。&lt;/p&gt;

&lt;p&gt;しかし、多くの作品を鑑賞する中で、さまざまな新たな発見がありました。展示された作品が実際にどのような風に見えるのか、そのパターンや効果を少しずつ理解することができました。この経験は非常に有意義なものでした。&lt;/p&gt;

&lt;p&gt;NEORT++の展示室の環境では思ったような結果にはならなかったのですが、それでもたくさんの作品に触れ、新たな視点やアイデアを得ることができました。今回の経験を活かして今後の自身の制作にも繋げていきたいです。&lt;/p&gt;

&lt;h1 id=&#34;インスピレーションを得た作品の紹介&#34;&gt;インスピレーションを得た作品の紹介&lt;/h1&gt;

&lt;p&gt;『Transcendental Cube』は複数の作品からインスピレーションを得ながら、それらを自分の中で組み合わせることで独自のコンセプトを形成しました。以下では、そのインスピレーションを受けた作品を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;life-by-setchi&#34;&gt;Life by setchi&lt;/h2&gt;

&lt;p&gt;この作品は、TokyoDemoFest 2018のGLSL Graphics Compoで2位に輝いた作品です。&lt;/p&gt;

&lt;p&gt;シンプルなジオメトリーが複雑に変形するコンセプトはここから触発されました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/R4tNEFVz5K8&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;delight-by-mercury&#34;&gt;delight by mercury&lt;/h2&gt;

&lt;p&gt;この作品は、Under Construction 2015のCombined Intro Compoで優勝した作品です。&lt;/p&gt;

&lt;p&gt;美しいグローバルイルミネーション、音楽と映像の見事な同期、そして鮮やかな展開が特徴です。部屋をシンプルにすることで反射を際立たせるアイデアも、この作品からの影響を受けました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/UnjIMd3kVf4&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;delayed-by-kaneta&#34;&gt;Delayed by kaneta&lt;/h2&gt;

&lt;p&gt;この作品は、&lt;a href=&#34;https://www.shader1weekcompo.org/&#34;&gt;Shader1weekCompo&lt;/a&gt;の第1回（&lt;a href=&#34;https://neort.io/tag/br0kuak3p9f194rkh8tg&#34;&gt;#S1C001&lt;/a&gt;）で発表されました。&lt;/p&gt;

&lt;p&gt;壁面の発光パターンが床に反射する様子が非常にクールだったので、作品の演出に取り入れました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/Noe4SsARPVo&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&#34;グラフィックス解説のまとめ&#34;&gt;グラフィックス解説のまとめ&lt;/h1&gt;

&lt;p&gt;本記事では『Transcendental Cube』について、そのグラフィックスについて解説しました。&lt;/p&gt;

&lt;p&gt;この記事が読者の皆さんの制作に少しでもお役に立てれば幸いです。&lt;/p&gt;

&lt;h1 id=&#34;sessionsの振り返り&#34;&gt;SESSIONSの振り返り&lt;/h1&gt;

&lt;p&gt;作品のグラフィックス解説からはテーマが外れてしまいますが、最後にSESSIONSの振り返りを記しておきます。&lt;/p&gt;

&lt;h2 id=&#34;オフラインパーティーの魅力&#34;&gt;オフラインパーティーの魅力&lt;/h2&gt;

&lt;p&gt;TokyoDemoFest2018年以来の約5年ぶりのオフライン開催のデモパーティーということで、大勢でデモを鑑賞したり、交流したりと、懐かしくも楽しい時間を過ごせました。&lt;/p&gt;

&lt;p&gt;オンラインのデモパーティーも素晴らしいものですが、会場の雰囲気や臨場感を直接感じられる点で、やはりオフラインイベントには特別な魅力があると感じています。&lt;/p&gt;

&lt;p&gt;実際に参加者と話をしたり、作品についての感想やアイデアを交換したりすることで、新たな視点やインスピレーションを得ることができました。&lt;/p&gt;

&lt;h2 id=&#34;sessionsについて&#34;&gt;SESSIONSについて&lt;/h2&gt;

&lt;p&gt;SESSIONSは2023年から新たにスタートしたデモパーティーです。&lt;/p&gt;

&lt;p&gt;実は、厳密にはデモパーティーではなく、デモパーティのようなイベントだそうです。&lt;/p&gt;

&lt;p&gt;純粋なデモパーティーであるTokyoDemoFestとは異なり、デモシーンの枠に囚われず、さまざまなカテゴリーのクリエイティブ作品を募集する「パーティ＆コンペティションイベント」として位置づけられています。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;qme&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt; &lt;a href=&#34;https://t.co/aSwiTfSjYH&#34;&gt;pic.twitter.com/aSwiTfSjYH&lt;/a&gt;&lt;/p&gt;&amp;mdash; 蘇摩清良 (@soma_arc) &lt;a href=&#34;https://twitter.com/soma_arc/status/1661693568975794178?ref_src=twsrc%5Etfw&#34;&gt;May 25, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;当日の雰囲気は、アフタームービーからよく伝わってきます。&lt;/p&gt;

&lt;p&gt;実際に今回のSESSIONSでも、デモシーンに詳しくない参加者も楽しんで参加している姿を目にすることができました。&lt;/p&gt;

&lt;p&gt;学生や新社会人の方の参加も多く見られ、これからのSESSIONSの展開が楽しみです！&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/Xyf5op4-hSs&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;c4-lanレポート&#34;&gt;C4 LANレポート&lt;/h2&gt;

&lt;p&gt;SESSIONS 2023はC4 LAN（LANパーティー）の会場内で開催されました。C4 LAN全体の雰囲気を掴む参考情報として、レポートを紹介します。
SESSIONSについても言及されているので、補完情報になると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.mynavi.jp/article/20230505-2672489/&#34;&gt;ゲームイベントとしての認知拡大を目指し、変化を迎えた「C4 LAN 2023 SPRING」レポート | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.famitsu.com/news/202305/12302398.html&#34;&gt;【C4 LAN】大量のゲーマーがゲーム機持参で勝手に遊ぶだけ。まあまあどうかしてるのに心地いい。ぬるま湯みたいな闇鍋イベントの生存戦略 | ゲーム・エンタメ最新情報のファミ通.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ハイレベルだったglsl-graphics-compo&#34;&gt;ハイレベルだったGLSL Graphics Compo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://files.scene.org/view/parties/2023/sessions23/results.txt&#34;&gt;Result&lt;/a&gt;の通り、GLSL Graphics Compoの応募はなんと15作品もありました。&lt;/p&gt;

&lt;p&gt;作品の数が多いだけでなく、今年は全体的にレベルが高く、近年のGLSL Graphics Compoのレベルのインフレは狂ってるなと思いました（もちろん良い意味で）。&lt;/p&gt;

&lt;p&gt;さらに複数のシーンから構成され、上映時間も2〜3分ほどの展開があり、まるでPCデモに匹敵するクオリティの作品も複数ありました。&lt;/p&gt;

&lt;p&gt;ぜひアーカイブをご覧ください！&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/F-CbQTcHNrc&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;参加者レポート&#34;&gt;参加者レポート&lt;/h2&gt;

&lt;p&gt;SESSIONS 2023の参加者のレポートや作品の解説などをまとめました。発見次第、随時追加します。&lt;/p&gt;

&lt;h2 id=&#34;combined-pc-demo-compo優勝作品の解説&#34;&gt;Combined PC Demo Compo優勝作品の解説&lt;/h2&gt;

&lt;p&gt;ukonpowerさんによるWebGLを使用した64K IntroがCombined PC Demo Compoで優勝しました。
このスライドではその制作過程や舞台裏について詳しく解説されています。
とくにBlenderを使ったワークフローの紹介や音楽制作の秘話など、非常に興味深い内容でした。ぜひチェックしてみてください！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&amp;quot;ﾃﾞｺﾝﾌﾟﾃｨができるまで&amp;quot;です&lt;a href=&#34;https://t.co/buX0qJg07V&#34;&gt;https://t.co/buX0qJg07V&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt; &lt;a href=&#34;https://t.co/l8IhsO2wUQ&#34;&gt;pic.twitter.com/l8IhsO2wUQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; ukonpower (@ore_ukonpower) &lt;a href=&#34;https://twitter.com/ore_ukonpower/status/1661713471862636545?ref_src=twsrc%5Etfw&#34;&gt;May 25, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;glsl-graphics-compo優勝作品の解説&#34;&gt;GLSL Graphics Compo優勝作品の解説&lt;/h2&gt;

&lt;p&gt;RenardさんによるGLSL Graphics Compoの優勝作品の解説です。
ApproximateLightという独自の手法を用いたグローバルイルミネーションの計算や、本記事でも解説したMad Tracingの高速化についても紹介されています。
詳細な解説がされており、読み応えがあります。ぜひチェックしてみてください！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt;&lt;br&gt;&lt;br&gt;こちらの作品の解説記事を書きました！&lt;a href=&#34;https://t.co/da1inuwbPc&#34;&gt;https://t.co/da1inuwbPc&lt;/a&gt; &lt;a href=&#34;https://t.co/6ijOcdD2Jp&#34;&gt;https://t.co/6ijOcdD2Jp&lt;/a&gt; &lt;a href=&#34;https://t.co/uN1COyotzY&#34;&gt;pic.twitter.com/uN1COyotzY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Renard (@Renardealer) &lt;a href=&#34;https://twitter.com/Renardealer/status/1658116543073452034?ref_src=twsrc%5Etfw&#34;&gt;May 15, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;combined-pc-demo-compo-glsl-graphics-compo&#34;&gt;Combined PC Demo Compo / GLSL Graphics Compo&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;先日の発表資料です。&lt;br&gt;フラクタルとテセレーション&lt;br&gt; | SESSIONS 2023 After Party&lt;a href=&#34;https://t.co/OpRabk2VKa&#34;&gt;https://t.co/OpRabk2VKa&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt;&lt;/p&gt;&amp;mdash; 蘇摩清良 (@soma_arc) &lt;a href=&#34;https://twitter.com/soma_arc/status/1662817935994540032?ref_src=twsrc%5Etfw&#34;&gt;May 28, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の発表資料（投稿デモの説明）です&lt;br&gt;&lt;br&gt;楽しかった！&lt;a href=&#34;https://t.co/uXKgnPhqza&#34;&gt;https://t.co/uXKgnPhqza&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt;&lt;/p&gt;&amp;mdash; ukeyshima (@ukeyshima) &lt;a href=&#34;https://twitter.com/ukeyshima/status/1661764148802502661?ref_src=twsrc%5Etfw&#34;&gt;May 25, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;初めてPC Demoを作った話｜Saina &lt;a href=&#34;https://twitter.com/SainaKey?ref_src=twsrc%5Etfw&#34;&gt;@SainaKey&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/note?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#note&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/madewithunity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#madewithunity&lt;/a&gt;&lt;a href=&#34;https://t.co/x5zzLC5VB2&#34;&gt;https://t.co/x5zzLC5VB2&lt;/a&gt;&lt;/p&gt;&amp;mdash; Saina(さいな) (@SainaKey) &lt;a href=&#34;https://twitter.com/SainaKey/status/1652702468474798081?ref_src=twsrc%5Etfw&#34;&gt;April 30, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;SESSIONSに提出したDemoの音楽を解剖します｜蒼空 / sola &lt;a href=&#34;https://twitter.com/sola_117?ref_src=twsrc%5Etfw&#34;&gt;@sola_117&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/note?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#note&lt;/a&gt; &lt;a href=&#34;https://t.co/XplbBpEnOr&#34;&gt;https://t.co/XplbBpEnOr&lt;/a&gt;&lt;/p&gt;&amp;mdash; 蒼空 / sola (@sola_117) &lt;a href=&#34;https://twitter.com/sola_117/status/1653244428134547457?ref_src=twsrc%5Etfw&#34;&gt;May 2, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;すごい大雑把になりますが、SESSIONS の GLSL Compoで提出した作品についての制作経緯について記事にしました。&lt;a href=&#34;https://t.co/EZHDY1ahJ0&#34;&gt;https://t.co/EZHDY1ahJ0&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/glsl?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#glsl&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt;&lt;/p&gt;&amp;mdash; 独楽回しeddy (@EKey2210) &lt;a href=&#34;https://twitter.com/EKey2210/status/1652660167635501058?ref_src=twsrc%5Etfw&#34;&gt;April 30, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;【補足】&lt;br&gt;・コードには日本語のコメントを書いてあります&lt;br&gt;・ちゃんと壁を通り抜けられないようになっています！&lt;br&gt;・マップはランダムに生成していて、どこまでも続いています！（※浮動小数の精度の許す限り） &lt;a href=&#34;https://t.co/ugBcMKUbQL&#34;&gt;pic.twitter.com/ugBcMKUbQL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kamoshika (@kamoshika_vrc) &lt;a href=&#34;https://twitter.com/kamoshika_vrc/status/1652700446614781952?ref_src=twsrc%5Etfw&#34;&gt;April 30, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/SESSIONS_Party?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SESSIONS_Party&lt;/a&gt; &lt;br&gt;SESSIONSのGLSL compに海賊放送をモチーフにした作品を提出させて頂きました&lt;a href=&#34;https://t.co/DZx5NNzNAJ&#34;&gt;https://t.co/DZx5NNzNAJ&lt;/a&gt; &lt;a href=&#34;https://t.co/HrncS23PrC&#34;&gt;pic.twitter.com/HrncS23PrC&lt;/a&gt;&lt;/p&gt;&amp;mdash; KiNaNkomoti (@Kinakomoti2357) &lt;a href=&#34;https://twitter.com/Kinakomoti2357/status/1652677355901706240?ref_src=twsrc%5Etfw&#34;&gt;April 30, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just released S͎E͎A͎W͎A͎L͎L͎ &lt;a href=&#34;https://twitter.com/SESSIONS_Party?ref_src=twsrc%5Etfw&#34;&gt;@SESSIONS_Party&lt;/a&gt;, a quick &lt;a href=&#34;https://twitter.com/hashtag/BladeRunner2049?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#BladeRunner2049&lt;/a&gt; inspired shader doodle I did a while back. Check out the final version on &lt;a href=&#34;https://twitter.com/Shadertoy?ref_src=twsrc%5Etfw&#34;&gt;@Shadertoy&lt;/a&gt; ✨: &lt;a href=&#34;https://t.co/ypBZWvp6oD&#34;&gt;https://t.co/ypBZWvp6oD&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/demoscene?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#demoscene&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/brutalism?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#brutalism&lt;/a&gt; &lt;a href=&#34;https://t.co/WczF1MLuDm&#34;&gt;pic.twitter.com/WczF1MLuDm&lt;/a&gt;&lt;/p&gt;&amp;mdash; LJ (@LJ_1102) &lt;a href=&#34;https://twitter.com/LJ_1102/status/1653088310988881923?ref_src=twsrc%5Etfw&#34;&gt;May 1, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FP試験のオススメ勉強法</title>
      <link>https://gam0022.net/blog/2023/01/15/fp-study/</link>
      <pubDate>Sun, 15 Jan 2023 14:40:44 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2023/01/15/fp-study/</guid>
      <description>&lt;p&gt;来週1/22はFP試験だそうですね！試験を受ける方はがんばってください！&lt;/p&gt;

&lt;p&gt;去年の1月試験でFP3級、5月試験でFP2級をそれぞれ一発で合格したので、勉強方法と心構えをメモしておこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;FP2級&amp;lt;&amp;lt;完全合格&amp;gt;&amp;gt;&lt;br&gt;&lt;br&gt;多少は税金や金融に詳しくなりました。 &lt;a href=&#34;https://t.co/dYiCkMKbCx&#34;&gt;pic.twitter.com/dYiCkMKbCx&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1541958117470023681?ref_src=twsrc%5Etfw&#34;&gt;June 29, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;fpを取得した理由&#34;&gt;FPを取得した理由&lt;/h1&gt;

&lt;p&gt;友達に誘われて一緒に受けたというのが一番の理由だったのですが、マネーリテラシーを向上させることができたので受けて良かったと改めて思いました。&lt;/p&gt;

&lt;p&gt;FP試験は6分野から出題され、かなり試験範囲が広いです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ライフプランニングと資金計画&lt;/li&gt;
&lt;li&gt;リスク管理&lt;/li&gt;
&lt;li&gt;金融資産運用&lt;/li&gt;
&lt;li&gt;タックスプランニング&lt;/li&gt;
&lt;li&gt;不動産&lt;/li&gt;
&lt;li&gt;相続・事業承継&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は会社員のプログラマーとして働いていて、とくに税金関係の知識がまったくありませんでした。&lt;/p&gt;

&lt;p&gt;会社員をしていると税金の納税は会社が代わりにやってくれるので、税金の計算方法について以前の私はあまりにも無頓着でした。&lt;/p&gt;

&lt;p&gt;源泉徴収や控除というものを知らず、源泉徴収票の見方も分かりませんでした。&lt;/p&gt;

&lt;p&gt;また、不動産の知識も日常生活において視野を広げ、世界を見る解像度を上げることに役立ったように思います。&lt;/p&gt;

&lt;p&gt;たとえば、近所で家を建て替えた時に道路の幅が広がっていたのを見て、これは&lt;a href=&#34;https://suumo.jp/article/oyakudachi/oyaku/chumon/c_knowhow/set_back/&#34;&gt;セットバック&lt;/a&gt;だったんだと気がついたり、
建物の上の方が斜めなっているのは建築基準法第56条の&lt;a href=&#34;https://ameblo.jp/zen-com/entry-12401014004.html&#34;&gt;道路斜線制限&lt;/a&gt;によるものだったんだなぁと思いながら散歩できるようになりました。&lt;/p&gt;

&lt;p&gt;不動産の相続税の評価は路線価で計算されるので、相続税対策でタワーマンションを購入する人もいるのかなど納得しました（※相続税制度改正で是正されるそうですが）。&lt;/p&gt;

&lt;p&gt;FP試験を勉強していると、タワーマンションの例のように不動産と相続など、別分野の知識が相互にリンクして繋がることも多く、個人的には楽しく勉強がしやすいと思いました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;効率的な勉強方法&#34;&gt;効率的な勉強方法&lt;/h1&gt;

&lt;p&gt;勉強時間の限られた社会人に向けて個人的に効率の良かったFP試験の勉強方法を紹介します。&lt;/p&gt;

&lt;p&gt;勉強方法やFP2級も3級もあまり変わりませんでした。FP2級は3級より知識が深掘りされますが、出題範囲は基本的に一緒です。&lt;/p&gt;

&lt;h2 id=&#34;過去問が最重要&#34;&gt;過去問が最重要&lt;/h2&gt;

&lt;p&gt;まずは過去問を解いてどのあたりが出題されるのか把握するのが良いと思います。とくにFP試験がはじめてなら過去問は重要だと思います。&lt;/p&gt;

&lt;p&gt;たくさんの参考書が出版されていますが、FP試験は出題範囲がとても広く、最初から最後まで全部理解して覚えようとすると時間がかかります。
FP試験で出題される内容には傾向があるので、頻出の問題だけ押さえれば十分に合格可能です。
参考書を隅から隅まで網羅して覚えようとするのはタイムパフォーマンスが悪いです。&lt;/p&gt;

&lt;p&gt;※網羅的に勉強する方法を否定する意図はありませんが、あくまで勉強時間が限られている場合は時間効率を意識することも大切だと思います。&lt;/p&gt;

&lt;p&gt;FP試験の過去問と回答は公式ページにも掲載されています。ありがたいですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jafp.or.jp/exam/mohan/&#34;&gt;試験問題・模範解答 | 日本FP協会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらにオススメは過去問道場というサイトです。Webブラウザ上で過去問に挑戦できるサイトで、素晴らしいことに解説付きです。有料レベルのサイトだと思うのですが、なんと無料で利用できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fp3-siken.com/kakomon.php&#34;&gt;FP3級 過去問道場🥋 (学科)【完全解説付】｜FP3級ドットコム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fp2-siken.com/kakomon.php&#34;&gt;FP2級 過去問道場🥋 (学科)【完全解説付】｜FP2級ドットコム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FP3級は問題数が少ないのでゆっくり解いても時間が余ると思うのですが、FP2級は問題数が多いので時間配分にも注意する必要があります。&lt;/p&gt;

&lt;p&gt;FP2級では時間配分まで意識しながら過去問を解いていきましょう。&lt;/p&gt;

&lt;p&gt;基本的に過去問道場を利用して解くのが良いと思いますが、FP2級なら過去問を紙に印刷して本番と同じ制限時間で解く練習を最低1回はしておくのがオススメです。
家にプリンターがなくてもコンビニにネットプリントで印刷できます。&lt;/p&gt;

&lt;p&gt;注意点として古すぎる過去問は避けるべきです。FP試験の内容は法改正に応じて変更されるので、直近1,2年の過去問に絞った方が無難だと思いました。&lt;/p&gt;

&lt;h2 id=&#34;youtubeを利用した学習法&#34;&gt;YouTubeを利用した学習法&lt;/h2&gt;

&lt;p&gt;FP試験ではどうしても細かい数値などを暗記しないと解けない問題が多く出題されます。&lt;/p&gt;

&lt;p&gt;私はおーちゃんさんのYouTubeを移動中などに聞いて暗記問題を記憶しました。とくに「耳で覚える耳ラジオ」シリーズは語呂合わせで効率的に暗記ができるのでオススメです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aCrjd-qEzLE&amp;amp;list=PL3ZRB2iLEZ18Ixufc6NCCWYluepCXb29o&#34;&gt;FP2級3級 ライフプランと資金計画編「耳で覚える耳ラジオ」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/aCrjd-qEzLE&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;参考書&#34;&gt;参考書&lt;/h2&gt;

&lt;p&gt;上で紹介したおーちゃんさんが企画協力している参考書を買いました。YouTubeの語呂合わせなど共通しているので良かったです。
過去問などを解いていく中で、掘り下げて理解を深めたい箇所だけ参考書を読む使い方をしました。&lt;/p&gt;

&lt;p&gt;自分の印象としては、FP3級については過去問とYouTubeだけでも十分に合格できると思ったのですが、FP2級では問われる知識がより深く細かくなってくるので、FP2級からは参考書も必須だと思います。&lt;/p&gt;

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4839980519&amp;linkId=8c3e9f9b4df207ec5012a163d306f043&#34;&gt;&lt;/iframe&gt;

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4839980527&amp;linkId=24469138d5a0d8999134bb89ce9ea87c&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;試験当日までに買うもの&#34;&gt;試験当日までに買うもの&lt;/h2&gt;

&lt;p&gt;これらは試験前に購入しておきましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電卓（定数乗算ができ、ボタンが大きく押しやすいもの）&lt;/li&gt;
&lt;li&gt;腕時計（AppleWatchはNG)&lt;/li&gt;
&lt;li&gt;鉛筆・消しゴム&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;電卓&#34;&gt;電卓&lt;/h3&gt;

&lt;p&gt;電卓もダイソーのもので十分ですが、キーボードと同じようにボタンが小さすぎると押しづらいのでコンパクトサイズは避けましょう。&lt;/p&gt;

&lt;p&gt;また、定数計算（定数乗算）できるものを選びましょう。FP試験ではキャッシュフロー表の計算に「定数乗算」を頻繁に利用するためです。&lt;/p&gt;

&lt;p&gt;定数乗算を利用すると &lt;code&gt;100*(1.2^3)&lt;/code&gt; のような計算を &lt;code&gt;1.2*100===&lt;/code&gt; で計算できます。&lt;/p&gt;

&lt;h3 id=&#34;腕時計&#34;&gt;腕時計&lt;/h3&gt;

&lt;p&gt;AppleWatchなどのスマートウォッチは持ち込み不可で、時計のない試験会場もあるので腕時計は買っておきましょう。&lt;/p&gt;

&lt;p&gt;普段はAppleWatchを使っているので、自分はダイソーで適当なやつを買いました。&lt;/p&gt;

&lt;h3 id=&#34;鉛筆-消しゴム&#34;&gt;鉛筆・消しゴム&lt;/h3&gt;

&lt;p&gt;私はマークシート用のシャープペンを買いました。鉛筆削りが不要で、鉛筆よりもマークシートの記入がしやすいのでオススメです。&lt;/p&gt;

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OY187I8&amp;linkId=58ac502dca692f60888caaa1cad4208a&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;FP試験で多少はマネーリテラシーが身についたような気がするので受験して良かったです。会社員で確定申告をしないような人でも、住宅購入など金額の大きい重要な判断、親の相続などの場面では多少は役立つような気がしました。&lt;/p&gt;

&lt;p&gt;また、真剣に試験勉強をしたのは学生ぶりだったので懐かしい気持ちになりました。&lt;/p&gt;

&lt;p&gt;本記事がFPを受けようと思っている人・受ける人に少しでも役に立てば幸いです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UnityのShaderGraphでインクシェーダーを作る</title>
      <link>https://gam0022.net/blog/2022/12/25/unity-ink-shader/</link>
      <pubDate>Sun, 25 Dec 2022 23:03:44 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/12/25/unity-ink-shader/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://qiita.com/advent-calendar/2022/unity&#34;&gt;Unity Advent Calendar 2022&lt;/a&gt;の22日目の記事です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;スプラトゥーン3、けっこう面白いですね。過去作の1,2は未プレイでしたが、3からスプラデビューしました。&lt;/p&gt;

&lt;p&gt;スプラ3で遊びながら、インクシェーダーの実装方法に興味が出てきたので、UnityのShaderGraphでそれっぽいものを実装してみました。&lt;/p&gt;

&lt;p&gt;ShaderGraphの基本機能だけで構成されており、ノードの量も少なめにしました。&lt;/p&gt;

&lt;p&gt;ShaderGraphの基本操作は解説しませんが、なるべく丁寧に説明をしたつもりなので、ShaderGraphの入門記事として参考にしてください！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;UnityのShaderGraphでインクシェーダーを試作&lt;a href=&#34;https://twitter.com/hashtag/Unity3D?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Unity3D&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ShaderGraph?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ShaderGraph&lt;/a&gt; &lt;a href=&#34;https://t.co/PHxIkfnkiQ&#34;&gt;pic.twitter.com/PHxIkfnkiQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1606141695724204032?ref_src=twsrc%5Etfw&#34;&gt;December 23, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader.gif&#34; alt=&#34;インクシェーダー&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;色変更&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-color.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-color.gif&#34; alt=&#34;インクシェーダー 色変更&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しきい値の調整&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-threshold.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-threshold.gif&#34; alt=&#34;インクシェーダー しきい値の調整&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unityプロジェクト

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/ShaderPlaygroundURP&#34;&gt;github.com/gam0022/ShaderPlaygroundURP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/ShaderPlaygroundURP/&#34;&gt;WebGLデモ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;WASDと右クリックのドラッグでカメラ操作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;shadergraph全体&#34;&gt;ShaderGraph全体&lt;/h1&gt;

&lt;p&gt;ShaderGraphの全体です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/InkNoise.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/InkNoise.png&#34; alt=&#34;ShaderGraph全体&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ShaderGraphのスクロール領域を含めてキャプチャするために &lt;a href=&#34;https://github.com/Cyanilux/ShaderGraphToPNG&#34;&gt;Cyanilux/ShaderGraphToPNG&lt;/a&gt; というUnityのパッケージを利用しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;完璧なソリューションがありました。&lt;br&gt;Unity2021.3.15f1 + URP12.1.8 でも完璧に動作！&lt;a href=&#34;https://t.co/3J2qsrye8s&#34;&gt;https://t.co/3J2qsrye8s&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1607359807710978049?ref_src=twsrc%5Etfw&#34;&gt;December 26, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;!--
文字が小さくてすみません。

※2回に分けてスクリーンショットを撮影してMSペイントで手動結合しました。3回以上分割して撮影すればもっと高解像度にできるのですが、手間がかかるので諦めました。
いい感じにウィンドウのスクロール領域を含めて一発でスクリーンショットを撮る方法があれば教えてください。

[![ShaderGraph全体](/images/posts/2022-12-26-unity-ink-shader/shader-graph-all.png)](/images/posts/2022-12-26-unity-ink-shader/shader-graph-all.png)
--&gt;

&lt;h2 id=&#34;基本方針&#34;&gt;基本方針&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;URPのLitグラフに与えるBaseColorやSmoothnessや法線をいい感じに制御してインクっぽくする

&lt;ul&gt;
&lt;li&gt;カスタムなシェーディングはしない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インクの高さマップはGradient Noiseからプロシージャル生成

&lt;ul&gt;
&lt;li&gt;インタラクティブなインク制御は未対応&lt;/li&gt;
&lt;li&gt;RenderTextureを生成してペイントするようなアプローチでインタラクティブにできそう（今後の課題）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;チュートリアル&#34;&gt;チュートリアル&lt;/h1&gt;

&lt;p&gt;そこまで規模の大きくないShaderGraphですが、理解しやすいように1ステップごと解説します。&lt;/p&gt;

&lt;h2 id=&#34;ステップ1-pbrテクスチャに対応&#34;&gt;ステップ1. PBRテクスチャに対応&lt;/h2&gt;

&lt;p&gt;まずはPBRテクスチャに対応します。&lt;/p&gt;

&lt;p&gt;PBRテクスチャは以下のサイトからお借りしました。とても良い感じのCC0ライセンスの床のタイル素材を利用させていただきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://polyhaven.com/a/cobblestone_floor_08&#34;&gt;Cobblestone Floor 08 Texture • Poly Haven&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これがPBRテクスチャをプロパティにして、ShaderGraphの各種PBRパラメーターを渡すだけのShaderGraphです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/1-armtex.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/1-armtex.png&#34; alt=&#34;PBRテクスチャに対応&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;BaseColor&lt;/code&gt; や &lt;code&gt;Normal&lt;/code&gt; はそのままノードを繋げるだけでOKです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Metallic/Smoothness/Ambient Occlusion&lt;/code&gt; だけ少し工夫がいります。&lt;/p&gt;

&lt;p&gt;Poly Havenのテクスチャは &lt;code&gt;Ambient Occlusion/Roughness/Metallic&lt;/code&gt;（以下、ARMテクスチャ）がRGBに格納されているようなので、RGBの順番をBGRのように並び替える必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Smoothness = 1 - Roughness&lt;/code&gt; の関係があるので &lt;code&gt;One Minus&lt;/code&gt; ノードで変換します。&lt;/p&gt;

&lt;p&gt;これでPoly Havenから落としてきたARMテクスチャに対応したShaderGraphができました。&lt;/p&gt;

&lt;h2 id=&#34;ステップ2-uvのタイリング&#34;&gt;ステップ2. UVのタイリング&lt;/h2&gt;

&lt;p&gt;ここから最終的なインクシェーダーのShaderGraphをステップごとに解説します。&lt;/p&gt;

&lt;p&gt;まずUVのタイリングですが、単純にUVに定数を乗算しているだけです。今回は下地のテクスチャ用とインク用で独立してタイリングできるようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/2-uv.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/2-uv.png&#34; alt=&#34;UVのタイリング&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ3-インクの高さマップ用のノイズ生成&#34;&gt;ステップ3. インクの高さマップ用のノイズ生成&lt;/h2&gt;

&lt;p&gt;インクの高さマップはGradient Noiseから生成します。時間でアニメーションさせるために2つのGradient Noiseを線形補間で合成しています。&lt;/p&gt;

&lt;p&gt;1つ目のGradient NoiseのUVは固定させておいて、2つ目のGradient NoiseのUVはtimeでスクロールさせています。&lt;/p&gt;

&lt;p&gt;非常にシンプルな処理ですが、意外にもそれなりにインクっぽく見えるのではないでしょうか？&lt;/p&gt;

&lt;p&gt;余談になりますが、ShaderGraphのGradient Noiseはシェーダーでプロシージャル生成しているのでGPU負荷も高いと思います。実用するなら軽量化のためにテクスチャのサンプリングに置き換えた方がいいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/3-noise.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/3-noise.png&#34; alt=&#34;インクの高さマップ用のノイズ生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ4-凹凸を考慮したインク判定のしきい値&#34;&gt;ステップ4. 凹凸を考慮したインク判定のしきい値&lt;/h2&gt;

&lt;p&gt;ステップ3. でインクの高さマップを生成しました。この高さマップがしきい値以上ならインクの領域と見なすようにします。&lt;/p&gt;

&lt;p&gt;インク判定のしきい値は定数でも良いのですが、高さマップを考慮してブロックの溝など低い部分の方がインクになりやすくします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/4-threshold.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/4-threshold.png&#34; alt=&#34;インクの高さマップ用のノイズ生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;高さマップの影響力はプロパティで制御できるようにしました。&lt;/p&gt;

&lt;p&gt;高さマップの考慮がないと真っ平らなPlaneにインクが乗っているようで、雑コラ感・馴染まない感があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-off.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-off.png&#34; alt=&#34;高さマップの考慮なし&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;高さマップを考慮すると、ブロックの凹凸を考慮してインクが広がるので、リアリティを少し向上できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-on.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-on.png&#34; alt=&#34;高さマップの考慮あり&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ5-インクのマスク生成&#34;&gt;ステップ5. インクのマスク生成&lt;/h2&gt;

&lt;p&gt;「ステップ3のインクの高さマップ」から「ステップ4のしきい値」を引き算することで、インクのマスク画像を生成します。&lt;/p&gt;

&lt;p&gt;そのままだとコントラストが薄いので、Powerノードでコントラストを強めに調整します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-1-ink-mask.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-1-ink-mask.png&#34; alt=&#34;インクのマスク生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インクのマスクマップをLerpの引数にして、各種PBRパラメーターにインク用の値をブレンドします。
元はARMテクスチャの値をそのままPBRパラメーターとして渡していましたが、間にLerpノードを挟み込んで、インク用の &lt;code&gt;Ambient Occlusion/Roughness/Metallic&lt;/code&gt; をブレンドできるようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-2-ink-mask.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-2-ink-mask.png&#34; alt=&#34;インク用の設定をブレンド&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BaseMapも同じようにLerpします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-3-ink-mask.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-3-ink-mask.png&#34; alt=&#34;インク用の設定をブレンド(BaseMap)&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ6-法線の生成&#34;&gt;ステップ6. 法線の生成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/6-normal.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/6-normal.png&#34; alt=&#34;法線の生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ステップ3のインクの高さマップから法線を生成します。Normal From Heightノードがあるので利用します。&lt;/p&gt;

&lt;p&gt;ステップ5のインクのマスクでは高さマップの影響で高周波成分が現れてしまうので滑らかな法線ができず、法線生成には不適切です。しきい値を引き算する前のGradient Noiseの値をNormal From Heightノードに繋ぎます。&lt;/p&gt;

&lt;p&gt;今回もPowerノードでコントラストを調整可能にしました。SaturateノードではなくMaximumノードを利用しているのでは、 &lt;code&gt;Clamp(x, 0, INF)&lt;/code&gt; にしたいからです。&lt;/p&gt;

&lt;p&gt;マスク画像の結果は &lt;code&gt;[0-1]&lt;/code&gt; に正規化する必要がありますが、法線生成のHeightマップであれば最大値の制限は不要だと思ったからです。&lt;/p&gt;

&lt;p&gt;以上がインク用のシェーダーの解説でした。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;ShaderGraphだけでノーコードのインクシェーダーを試作しました。
PBRパラメーターを制御するだけのお手軽な実装ですが、思ったよりも良い見た目になったので満足です。&lt;/p&gt;

&lt;p&gt;今回はインクのマスクにGradient Noiseを利用しましたが、RenderTextureをシェーダー外部から与えればインタラクティブにインクを塗ったりもできると思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>normalize.fmにゲスト出演しました</title>
      <link>https://gam0022.net/blog/2022/10/20/normalizefm/</link>
      <pubDate>Thu, 20 Oct 2022 10:44:48 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/10/20/normalizefm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://normalize.fm/&#34;&gt;normalize.fm&lt;/a&gt;の第032回にゲスト出演させていただきました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/normalizeFM?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#normalizeFM&lt;/a&gt; の新エピソード公開しました。&lt;br&gt;今回は &lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; さんをゲストに、普段の収録と比較するとかなりテックな話題に寄った感じで、深い技術の話をいろいろうかがいました。&lt;br&gt;&lt;br&gt;032. たゆまぬ努力とキャッチアップ&lt;a href=&#34;https://t.co/acML0WOwYQ&#34;&gt;https://t.co/acML0WOwYQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; h_doxas (@h_doxas) &lt;a href=&#34;https://twitter.com/h_doxas/status/1582287588978618369?ref_src=twsrc%5Etfw&#34;&gt;October 18, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>レイトレ合宿8参加レポート</title>
      <link>https://gam0022.net/blog/2022/10/17/rtcamp8/</link>
      <pubDate>Mon, 17 Oct 2022 10:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/10/17/rtcamp8/</guid>
      <description>&lt;p&gt;9月2日(金)～9月4日(日)に沖縄本島で開催された&lt;a href=&#34;https://sites.google.com/view/raytracingcamp8/&#34;&gt;レイトレ合宿8&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;自作のレンダラーでこんな動画を &lt;strong&gt;10分の制限時間&lt;/strong&gt; でレンダリングして5位をいただきました！&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/c7JqEpaR658&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;レイマーチングとポリゴンをハイブリッドに描画できる単方向パストレーシングのレンダラーをOptiXで開発して16人中7位でした。&lt;br&gt;&lt;br&gt;レンダリング時間は10分（1フレーム2秒）だったので、&lt;br&gt;NEEやMISなどサンプリングの高速化も行いました。&lt;br&gt;&lt;br&gt;動画は本戦で実際に出力されたファイルです。&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/LDgKL7gLsY&#34;&gt;pic.twitter.com/LDgKL7gLsY&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1566269176314220544?ref_src=twsrc%5Etfw&#34;&gt;September 4, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;コロナの影響もあり、3年ぶりのレイトレ合宿でした…！&lt;/p&gt;

&lt;p&gt;台風11号がちょうど沖縄に直撃してしまい、天候には恵まれなかったのは残念でしたが、とても充実した合宿でした。&lt;/p&gt;

&lt;p&gt;合宿の様子や雰囲気を詳しく知りたい方は、Ki_NaN_komotiさんのブログ記事がオススメです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;２週間ぐらい経ちましたがレイトレ合宿の参加レポートを書きました&lt;br&gt;&lt;br&gt;レンダラー開発記とレイトレ合宿の様子を書いています&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt;&lt;a href=&#34;https://t.co/Fhtvuz9n2H&#34;&gt;https://t.co/Fhtvuz9n2H&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ki_NaN_komoti (@Kinakomoti2357) &lt;a href=&#34;https://twitter.com/Kinakomoti2357/status/1571122433763184640?ref_src=twsrc%5Etfw&#34;&gt;September 17, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;本戦用のレンダラーの解説&#34;&gt;本戦用のレンダラーの解説&lt;/h1&gt;

&lt;p&gt;こちらが本戦のプレゼン資料です。&lt;/p&gt;

&lt;div class=&#34;google-slide-wrap&#34;&gt;
&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vTTvbJ3UILqFymar8yG4VOomRdeJzfeS8zoehGZruGQCmq8A2cQ4rru3WYfZdi3xRD4PkE3yamqRHjt/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;1440&#34; height=&#34;839&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;GitHubに&lt;a href=&#34;https://github.com/gam0022/redflash_rtcamp8&#34;&gt;リポジトリ&lt;/a&gt;も公開しています。急いで実装したので品質は低いです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/blog/2019/09/18/rtcamp7/&#34;&gt;前回のレイトレ合宿7&lt;/a&gt;で開発したRedflashというレンダラーを動画に対応させました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/slide_p2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/slide_p2.png&#34; alt=&#34;スライド 基本機能&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前回までにこれらの基本的な機能は実装していました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;単方向のパストレーシング&lt;/li&gt;
&lt;li&gt;Disney BRDF&lt;/li&gt;
&lt;li&gt;NEE&lt;/li&gt;
&lt;li&gt;MIS&lt;/li&gt;
&lt;li&gt;レイマーチングの衝突判定（OptiXのカスタムプリミティブとして実装）&lt;/li&gt;
&lt;li&gt;ACES Filmic Tone Mapping&lt;/li&gt;
&lt;li&gt;Deep Learning Denoising（ディープラーニングによるデノイザー、OptiXを使えば簡単に利用できる）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年から静止画部門が廃止されたので、動画部門への対応を行いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アニメーション（シーンの動的な更新）&lt;/li&gt;
&lt;li&gt;動画のための画像の連番出力&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;レンダラーの出力設定&#34;&gt;レンダラーの出力設定&lt;/h2&gt;

&lt;p&gt;出力解像度の高さ・フレーム数の多さは、分かりやすくアピールポイントになるので、ギリギリを攻めました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;解像度は1920x1080&lt;/li&gt;
&lt;li&gt;フレーム数は300（30FPS * 10秒）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;制限時間は10分（600秒）なので、1フレームあたりの時間は2秒でした。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;長さは3秒以上10秒以下&lt;/code&gt; というレギュレーションだったので、上限の10秒にしました。&lt;/p&gt;

&lt;p&gt;パストレーシングの場合はゆったりしたアニメーションの方が映えそうなので、60FPSではなく30FPSにしました。
普通のPCのモニターのリフレッシュレートは60Hzだと思うので、24FPSなど中途半端なのは選択肢から除外していました。&lt;/p&gt;

&lt;p&gt;PNGの保存（エンコード＋ファイル保存）と、レンダリングは別スレッドで並列実行するようにしました。
解像度は2160pにするとPNGのエンコード時間がレンダリングよりもボトルネックになるので1080pを選びました。&lt;/p&gt;

&lt;p&gt;前回のレイトレ合宿7の本戦の静止画部門では、1フレームに60秒使えました。
使える時間が30分の1まで急激に短くなったのは大変でした。&lt;/p&gt;

&lt;p&gt;さらに実行環境（AWSのEC2インスタンス）も大幅にスペックダウンしていたのも痛手でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;p3.16xlarge（レイトレ合宿7）&lt;/li&gt;
&lt;li&gt;g4dn.xlarge（レイトレ合宿8）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;g4dn.xlargeではRTコアが使えるようになったようですが、レイマーチングが主なので自分の場合は恩恵があまりありませんでした…&lt;/p&gt;

&lt;h2 id=&#34;optixのバージョンについて&#34;&gt;OptiXのバージョンについて&lt;/h2&gt;

&lt;p&gt;今回は最新のOptiX7でレンダラーを実装しようと思ったのですが、最終的には前回と同じOptiX6で提出しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/blog/2022/08/08/raymarching-vs-raycasting/&#34;&gt;アドベントカレンダー&lt;/a&gt;ではOptiX7で実装をしていました。&lt;/p&gt;

&lt;p&gt;OptiX7ではなぜかポリゴンとレイマーチングのプリミティブを混在するとパフォーマンスが異常に悪化する問題が発生してしまい、これを解決する方法が見つからず、提出まで時間もなかったので諦めてOptiX6を採用しました。&lt;/p&gt;

&lt;p&gt;もしパフォーマンスの問題を解決できたとしても、OptiX7はかなり低レイヤーのAPIになっていたので、何かしらのラッパーを開発しないと使うのは大変に思いました。セットアップするだけでもかなり大量のコードの実装が必要でした。&lt;/p&gt;

&lt;h2 id=&#34;アニメーション要素&#34;&gt;アニメーション要素&lt;/h2&gt;

&lt;p&gt;10秒の尺に3種類のアニメーション要素を詰め込みました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ライトのアニメーション&lt;/li&gt;
&lt;li&gt;レイマーチングのパラメーターのアニメーション&lt;/li&gt;
&lt;li&gt;マテリアルのアニメーション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;動画の内容もそれぞれのアニメーションの要素を1つ1つ紹介するような感じにしました。&lt;/p&gt;

&lt;h3 id=&#34;ライトのアニメーション&#34;&gt;ライトのアニメーション&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/light_animation_960.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/light_animation_960.gif&#34; alt=&#34;ライトのアニメーション&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2つのポイントライトをアニメーションしました。&lt;/p&gt;

&lt;p&gt;OptiX6系では以下のようにmarkDirtyしてからlaunchすることでアクセラレーション構造を更新できました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;light_group-&amp;gt;getAcceleration()-&amp;gt;markDirty();
light_group-&amp;gt;getContext()-&amp;gt;launch(0, 0, 0);

top_group_light-&amp;gt;getAcceleration()-&amp;gt;markDirty();
top_group_light-&amp;gt;getContext()-&amp;gt;launch(0, 0, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シーン内のプリミティブの数が少ないので、このあたりは工夫しなくてもパフォーマンス上の問題はありませんでした。&lt;/p&gt;

&lt;p&gt;NEE用にライトの情報の構造体の配列（ComputeShaderのStructuredBufferのようなもの）を渡しているので、これも毎フレーム更新が必要でした。&lt;/p&gt;

&lt;h3 id=&#34;レイマーチングのパラメーターのアニメーション&#34;&gt;レイマーチングのパラメーターのアニメーション&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/raymarching-animation_960.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/raymarching-animation_960.gif&#34; alt=&#34;レイマーチングのパラメーターのアニメーション&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;せっかくレイマーチングでフラクタル（Mandelboxの軽量版）を描画しているので、フラクタルのパラメーターをアニメーションさせてみました。&lt;/p&gt;

&lt;p&gt;CUDAでtimeを受け取るようにして、timeを元にパラメーターをアニメーションしているだけなので、とても簡単に実装できました。&lt;/p&gt;

&lt;h3 id=&#34;マテリアルのアニメーション&#34;&gt;マテリアルのアニメーション&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/menger_960.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/menger_960.gif&#34; alt=&#34;マテリアルのアニメーション&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;マテリアルのパラメーターをアニメーション可能にして、ここではEmissiveをアニメーションさせるようにしました。&lt;/p&gt;

&lt;p&gt;Emissiveのアニメーションが映えるように、MengerSpongeにしました。平面が多いので光の反射が綺麗に見せられるかなと思ってこうなりました。
roughnessなどひたすら微調整して、最終的に気に入るルックにできました。&lt;/p&gt;

&lt;p&gt;実装的にはマテリアルのパラメーターを更新する専用のCallable Program（OptiX用語で関数ポインターのようなもの）を定義しました。&lt;/p&gt;

&lt;p&gt;CUDAの関数で好き勝手にアニメーションできるようにしました。&lt;/p&gt;

&lt;h2 id=&#34;アダプティブなeps&#34;&gt;アダプティブなeps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/zoom-out_960.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/zoom-out_960.gif&#34; alt=&#34;ズームアウト&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前回のレイトレ合宿に引き続き、今回もアダプティブなeps計算をしています。&lt;/p&gt;

&lt;p&gt;カメラからの距離に応じてレイマーチングの衝突判定につかうepsを変化させることで、実質的なLODのようなことをしています。&lt;/p&gt;

&lt;p&gt;カメラ距離が変化してもちょうど良い感じのディテールでフラクタルを描画することができました。&lt;/p&gt;

&lt;h2 id=&#34;デバッグ機能&#34;&gt;デバッグ機能&lt;/h2&gt;

&lt;h3 id=&#34;wasd機能&#34;&gt;WASD機能&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/wasd-v1.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/wasd-v1.gif&#34; alt=&#34;WASD機能&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いい感じのカメラアングルを探るためにWASDでカメラを移動できるようにしました。&lt;/p&gt;

&lt;p&gt;余談ですが、Unityのシーンビューの右クリックでも同じようなことができます。Unityでカメラワークを実装するときもこの機能をよく活用しています。&lt;/p&gt;

&lt;h3 id=&#34;デバッグ用のレンダラー&#34;&gt;デバッグ用のレンダラー&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/redflash_debug_render.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/redflash_debug_render.gif&#34; alt=&#34;デバッグ用のレンダラー&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;パストレーシングで描画すると処理が重くてフレーム落ちするのでアニメーションの確認には適しません。&lt;/p&gt;

&lt;p&gt;アニメーションをリアルタイムに確認できるように、レンダリングの品質を落としたデバッグ用のレンダラーも実装しました。&lt;/p&gt;

&lt;h2 id=&#34;awsの上限緩和申請は早めにやろう&#34;&gt;AWSの上限緩和申請は早めにやろう&lt;/h2&gt;

&lt;p&gt;AWSの上限緩和申請（4vCPU）は時間がかかる場合もあるので、提出直前にやるのは良くなかったです。&lt;/p&gt;

&lt;p&gt;他の参加者からはすぐに申請が通ったという声も聞いたので、自分だけ担当者ガチャに外れただけの可能性はあります。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;AWSの上限緩和申請(4vCPU)、1週間くらいかかったな&lt;br&gt;&lt;br&gt;申請: 2022/08/23 1:49&lt;br&gt;承認: 2022/08/29 10:37&lt;br&gt;&lt;br&gt;もっと事前にやっておくべきだった…&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1564068725212360704?ref_src=twsrc%5Etfw&#34;&gt;August 29, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;セミナー資料&#34;&gt;セミナー資料&lt;/h1&gt;

&lt;p&gt;レイトレ合宿ではセミナーも行われます。&lt;/p&gt;

&lt;p&gt;今年は参加者全員で発表を行ったので、朝から晩までたくさんのセミナーを聞くことができました。&lt;/p&gt;

&lt;div class=&#34;google-slide-wrap&#34;&gt;
&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vSdZQILhwkXvTsW024mmgc5V0G0sdFY2CQ1a5GtN953__e5drmPzBqVqr1qin2EtZOelzu6cl9IT9M2/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;1440&#34; height=&#34;839&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;私は「レイマーチングのすすめ」という発表をしました。&lt;/p&gt;

&lt;p&gt;過去資料を参照しながら、レイマーチングについて個人的に意外だと感じる部分や、Shadertoyなどで使わているテクニックについて、広く浅く紹介しました。&lt;/p&gt;

&lt;p&gt;口頭での説明が前提の発表なので、資料だけでは分かりにくいと思いますが、雰囲気だけでも伝わればと思います。&lt;/p&gt;

&lt;h1 id=&#34;印象に残った作品&#34;&gt;印象に残った作品&lt;/h1&gt;

&lt;p&gt;どの作品も工夫があって面白かったのですが、その中でも個人的にかなり印象に残った作品をピックアップしました。&lt;/p&gt;

&lt;p&gt;たた (@8picoz) さんがRust 100%のGPUレンダラーを開発していて、前々回のレイトレ合宿までは私もRustを使っていたということもあり、個人的にとても参考にしたいと思いました。
Vulkanのレイトレーシング機能をつかっていて、VulkanではSPIR-Vというシェーダーの中間コードの仕組みが使えるようになっているので、任意の言語でシェーダーを実装できるようになりました。
SPIR-Vをつかうことで、GPUコードもRustで実装をしたそうです。すごい良さそう！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;こんな感じの動画をレンダリングして11位でした！ &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/aSEekYHQgr&#34;&gt;pic.twitter.com/aSEekYHQgr&lt;/a&gt;&lt;/p&gt;&amp;mdash; たた (@8picoz) &lt;a href=&#34;https://twitter.com/8picoz/status/1566239120065982465?ref_src=twsrc%5Etfw&#34;&gt;September 4, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;うしお (@ushiostarfish) さんはNeRFで絵を出していました。
既存の機械学習のライブラリを使わずに、CUDAでスクラッチ実装したとのことだったので、個人的にとても驚きした。
学習のための写真も自分で苦労して撮影したという裏話も聞けて良かったです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;一発ネタのNeRFで、もはやレイトレなのか分からなくなってきましたが、思いのほか反響があってよかったです！&lt;br&gt;実装と解説スライドなどこちらにあります&lt;a href=&#34;https://t.co/YdeNXrIYBF&#34;&gt;https://t.co/YdeNXrIYBF&lt;/a&gt;&lt;br&gt;&lt;br&gt;運営の皆さま、今年も大変お疲れ様でございました！大変充実したイベントをありがとうございました！&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt;&lt;/p&gt;&amp;mdash; うしお (@ushiostarfish) &lt;a href=&#34;https://twitter.com/ushiostarfish/status/1568187460596953093?ref_src=twsrc%5Etfw&#34;&gt;September 9, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Shocker (@Shocker_0x15) さんのNeural Radiance Cachingをボリュームに適用して高速化をしていました。
他の参加者と差別化できていて、結果も綺麗ですごいと思いました。機械学習の波がレイトレ合宿にも来ているのを感じました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3年ぶりの &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; 8でMulti-scatteringな雲の動画をレンダリングして1位を頂きました！&lt;br&gt;普通にやると重すぎて間に合わないのでNeural Radiance Cachingをボリュームに適用して高速化しました。&lt;br&gt;&lt;br&gt;レンダラー紹介スライド&lt;a href=&#34;https://t.co/ry4W70XcgI&#34;&gt;https://t.co/ry4W70XcgI&lt;/a&gt; &lt;a href=&#34;https://t.co/82OFf5rYue&#34;&gt;pic.twitter.com/82OFf5rYue&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shocker (@Shocker_0x15) &lt;a href=&#34;https://twitter.com/Shocker_0x15/status/1566267613440684033?ref_src=twsrc%5Etfw&#34;&gt;September 4, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;hole (@h013) はゴールベースコースティクスを実装していました。分散の発生する処理がほとんどなく、Deterministicに結果が決まるそうで、ノイズがまったくないめちゃくちゃ綺麗な結果でした。
他の参加者と違うアプローチで差別化ができていて、結果もめちゃくちゃ綺麗でいいなと思いました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;レイトレ合宿終わりました。皆さんありがとうござました！&lt;br&gt;&lt;br&gt;僕はコースティクスを実装し、こんな感じの動画をレンダリングして４位でした。 &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/NbHutC9KtB&#34;&gt;pic.twitter.com/NbHutC9KtB&lt;/a&gt;&lt;/p&gt;&amp;mdash; hole (@h013) &lt;a href=&#34;https://twitter.com/h013/status/1566238238959759361?ref_src=twsrc%5Etfw&#34;&gt;September 4, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Shinji Ogaki (@ShinjiOgaki) さんはCPUレンダラーかつデノイズしないという条件で、ノイズがまったくない綺麗な絵を出していて、圧倒的な実装力の違いを見せつけられました。強者の風格をとても感じる作品でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;記事はまる一日で3000くらい閲覧があったようなので、合宿に興味がある人が多いのかも？&lt;br&gt;せっかくなので、少し尺の長い動画を載せておきます。&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/generative?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#generative&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/creativecoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#creativecoding&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/processing?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#processing&lt;/a&gt; &lt;a href=&#34;https://t.co/RqMLxaUIMX&#34;&gt;pic.twitter.com/RqMLxaUIMX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shinji Ogaki (@ShinjiOgaki) &lt;a href=&#34;https://twitter.com/ShinjiOgaki/status/1566909271043817472?ref_src=twsrc%5Etfw&#34;&gt;September 5, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;年々と制限時間が短くなっているのに、ほとんどの参加者はノイズのない綺麗なレンダリング結果を出していて、参加者のレベルがどんどんインフレしているのを感じました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/time-limit.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/time-limit.png&#34; alt=&#34;レイトレ合宿の時間制限の遷移&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もはやノイズの少ない絵を出すだけでは差別化が難しいので、それぞれの参加者がユニークな切り口で勝負してくるハイレベルな戦いでした。&lt;/p&gt;

&lt;p&gt;今年のセミナーは参加者全員で発表しました。参加者のバックグラウンドもさまざまだったので、いろんな分野の興味深い話や深い話を聞くことができて楽しかったです。&lt;/p&gt;

&lt;p&gt;レイトレ合宿を運営の方々、その他の参加者のみなさん、本当にありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;写真コーナー&#34;&gt;写真コーナー&lt;/h1&gt;

&lt;p&gt;天候には恵まれませんでしたが、ホテルがめちゃくちゃ豪華だったり、美味しいご飯を食べたりして沖縄を満喫しました。&lt;/p&gt;

&lt;p&gt;写真から雰囲気が少しでも伝われば幸いです。&lt;/p&gt;

&lt;p&gt;ホテルは棟ごと貸し切りをしました！まるでレンダリング用のシーンのようにピカピカなお部屋でした！すごい！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-1.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-1.jpg&#34; alt=&#34;ホテルの様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-2.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-2.jpg&#34; alt=&#34;ホテルの様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-3.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-3.jpg&#34; alt=&#34;ホテルの様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-4.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-4.jpg&#34; alt=&#34;ホテルの様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-5.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-5.jpg&#34; alt=&#34;ホテルの様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-6.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/hotel-6.jpg&#34; alt=&#34;ホテルの様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;沖縄の料理なども堪能しました。合宿自体は2泊でしたが、個人的に延泊して4泊したので料理の写真が多くなっています。&lt;/p&gt;

&lt;p&gt;しまぶた屋　地酒の飲み比べ
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-1.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-1.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;海ぶどう　茶碗蒸し
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-2.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-2.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なかゆくい　ハブ酒
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-3.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-3.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なかゆくい　マンゴーのかき氷
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-4.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-4.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アメリカ食堂
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-5.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-5.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;タコライスcafe きじむなぁ
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-6.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-6.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;琉球ダイニング 桃香
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-7.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-7.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;沖縄のブルーシールアイスクリーム BLUE SEAL
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-8.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-8.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-9.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-9.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ステーキハウス88
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-10.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-10.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-11.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-11.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;土～夢 ごはんカフェ 琉球ガラス村店（ドーム）
食器がおしゃれ
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-12.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/food-12.jpg&#34; alt=&#34;沖縄の料理の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;琉球ガラス村のエントランス
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-1.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-1.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DMMかりゆし水族館
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-2.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-2.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-3.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-3.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-4.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-4.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-5.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-5.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-6.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-6.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-7.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-7.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-8.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/sightseeing-8.jpg&#34; alt=&#34;沖縄の観光の様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本戦の景品です。組み立て式の時計でした。グリニッチ天文台で購入したものだそうです。
&lt;a href=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/gift.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-09-26-rtcamp8/gift.jpg&#34; alt=&#34;景品&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!--

# 関連商品

レンダラー名の由来となった楽曲です。プリパラを見てください。

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06Y3Z1PTK&amp;linkId=e1fef8b2771937a4232c7850b5dca2da&#34;&gt;&lt;/iframe&gt;

--&gt;</description>
    </item>
    
    <item>
      <title>速度比較！レイマーチングvsレイキャスティング</title>
      <link>https://gam0022.net/blog/2022/08/08/raymarching-vs-raycasting/</link>
      <pubDate>Mon, 08 Aug 2022 02:12:50 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/08/08/raymarching-vs-raycasting/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://sites.google.com/view/raytracingcamp8&#34;&gt;レイトレ合宿8&lt;/a&gt;のアドベントカレンダーです。&lt;/p&gt;

&lt;p&gt;レイマーチングはレイキャスティングと比べて遅いと感じていましたが、なるべく同じ条件で計測した場合に実際どのくらい差があるのか比較してみました。&lt;/p&gt;

&lt;h1 id=&#34;検証内容の概要&#34;&gt;検証内容の概要&lt;/h1&gt;

&lt;p&gt;メンガーのスポンジをレイマーチングとレイキャスティングでそれぞれ交差判定を実装し、フラクタルの深度を1～4に変化しながら計測しました。&lt;/p&gt;

&lt;p&gt;次の画像はレイマーチングによる深度4のメンガーのスポンジです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i4_s256_l300.png&#34; alt=&#34;レイマーチング 深度4 300ステップ&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;計測結果のサマリー&#34;&gt;計測結果のサマリー&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;先に結果から発表すると、なんとレイマーチングはレイキャスティングの15～20倍くらい遅いようでした。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ここまで遅いなんてショック😨…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/result_graph.png&#34; alt=&#34;計測結果の棒グラフ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;256サンプリング時のレンダリング時間（秒）&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;フラクタルの深度&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;レイマーチング&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.85388秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i1_s256.png&#34; alt=&#34;レイマーチング 深度1&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.00077秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i2_s256.png&#34; alt=&#34;レイマーチング 深度2&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.14309秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i3_s256.png&#34; alt=&#34;レイマーチング 深度3&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.29724秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i4_s256.png&#34; alt=&#34;レイマーチング 深度4&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;レイキャスティング&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.445493秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i1_s256.png&#34; alt=&#34;レイキャスティング 深度1&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.466056秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i2_s256.png&#34; alt=&#34;レイキャスティング 深度2&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.50258秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i3_s256.png&#34; alt=&#34;レイキャスティング 深度3&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.602458秒 &lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i4_s256.png&#34; alt=&#34;レイキャスティング 深度4&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;検証内容の詳細&#34;&gt;検証内容の詳細&lt;/h1&gt;

&lt;h2 id=&#34;検証pcのスペック&#34;&gt;検証PCのスペック&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OS: Windows 11&lt;/li&gt;
&lt;li&gt;CPU: Core i7-12700K&lt;/li&gt;
&lt;li&gt;GPU: GeForce RTX 3080&lt;/li&gt;
&lt;li&gt;メモリ: 64GB (3200MHz)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このピカピカ光るPCで検証しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;my new gear&amp;hellip; &lt;a href=&#34;https://t.co/eS2MbH7OKc&#34;&gt;pic.twitter.com/eS2MbH7OKc&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1546700194305437696?ref_src=twsrc%5Etfw&#34;&gt;July 12, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;共通条件&#34;&gt;共通条件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;レンダラーはNVIDIA OptiX 7.5上で実装&lt;/li&gt;
&lt;li&gt;256サンプリングする時間を計測

&lt;ul&gt;
&lt;li&gt;1回のoptixLaunchで256サンプリング&lt;/li&gt;
&lt;li&gt;Ray generationプログラム（CUDAの関数）の中で256回ループ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;出力解像度は1920x1080&lt;/li&gt;
&lt;li&gt;計測時間の詳細

&lt;ul&gt;
&lt;li&gt;シーンの初期化やBVHの構築は含まない&lt;/li&gt;
&lt;li&gt;optixLaunchの実行時間を計測&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;シェーディングはパストレーシング

&lt;ul&gt;
&lt;li&gt;マテリアルは拡散反射のみ&lt;/li&gt;
&lt;li&gt;NEEやMISはしないシンプルなパストレーシング&lt;/li&gt;
&lt;li&gt;反射の最大深度は5&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;シーン全体で2つのGAS

&lt;ul&gt;
&lt;li&gt;床（巨大なカスタムプリミティブのSphere）のGASが1つ&lt;/li&gt;
&lt;li&gt;メンガーのスポンジのGASが1つ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;レイマーチング&#34;&gt;レイマーチング&lt;/h2&gt;

&lt;p&gt;レイマーチングは繰り返しの計算によって数値的に衝突判定を解く手法で、Sphere Tracingとも呼ばれます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチングの最大ステップ回数（マーチングループのループ数）は100&lt;/li&gt;
&lt;li&gt;Intersectionプログラム（CUDAの関数）としてレイマーチングを実装

&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://gam0022.net/blog/2019/08/05/optix-raymarching-pathtracing/&#34;&gt;過去の記事&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;Optix6の内容なので、Optix7対応のために実装を多少修正&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;高速化のためにカメラからレイは飛ばさずに、バウンディングボックス（AABB）からレイを飛ばす

&lt;ul&gt;
&lt;li&gt;AABBは最適になるようにギリギリに設定&lt;/li&gt;
&lt;li&gt;カスタムプリミティブ全体で1つのAABB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;レイキャスティング&#34;&gt;レイキャスティング&lt;/h2&gt;

&lt;p&gt;今回のレイキャスティングとは、レイと三角形の解析的な交差判定のことです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メンガースポンジはHoudiniでモデリング

&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://gam0022.net/blog/2018/06/08/houdini/&#34;&gt;過去の記事&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;フラクタルの深度を指定可能にアップデート（ツイート参照）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Houdiniからobjで出力して自作のレンダラーで読み込み

&lt;ul&gt;
&lt;li&gt;OptiX7.xではobjのローダーが無かったので自作…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OptiXのビルトインの機能で衝突判定

&lt;ul&gt;
&lt;li&gt;OptiX上では三角ポリゴンの集合として表現&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OptiXの機能でGAS（Geometry acceleration structure）を構築

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RTコアによるレイトレーシングのハードウェアアクセラレーションあり&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;フラクタルの再帰回数を自由に増やせるようになった。&lt;br&gt;HoudiniのTOPs Feedback Loopの良い使用例ですね。 &lt;a href=&#34;https://t.co/yTR60S5vgC&#34;&gt;https://t.co/yTR60S5vgC&lt;/a&gt; &lt;a href=&#34;https://t.co/OifBfoTCFa&#34;&gt;pic.twitter.com/OifBfoTCFa&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1556203400257503232?ref_src=twsrc%5Etfw&#34;&gt;August 7, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;結果詳細&#34;&gt;結果詳細&lt;/h1&gt;

&lt;p&gt;改めて計測結果を見てみましょう。&lt;/p&gt;

&lt;h2 id=&#34;レンダリング時間&#34;&gt;レンダリング時間&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/result_graph.png&#34; alt=&#34;計測結果の棒グラフ&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;フラクタルの深度&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;レイマーチング&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.85388&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.00077&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.14309&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.29724&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;レイキャスティング&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.445493&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.466056&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.50258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.602458&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;レンダリング時間以外&#34;&gt;レンダリング時間以外&lt;/h2&gt;

&lt;p&gt;レンダリング時間以外のデータです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GAS（Geometry Acceleration Structure）の構築時間（秒）

&lt;ul&gt;
&lt;li&gt;レイキャスティングのみの結果&lt;/li&gt;
&lt;li&gt;レイマーチングではAABBはできてもBVHを構築できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ポリゴンの頂点数&lt;/li&gt;
&lt;li&gt;レイマーチングがレイキャスティングの何倍の時間がかかっているか&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;フラクタルの深度&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;GASの構築時間（秒）&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0008289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0010064&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0030907&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0135217&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ポリゴンの頂点数&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;192000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3840000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;倍率（Raymarching / Raycasting）&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.87434146&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.31263625&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.19230769&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.4321795&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;GASの構築は思ったより速いんですね。380万頂点でも0.01秒で完了しているのは驚きです。&lt;/p&gt;

&lt;p&gt;ポリゴンの頂点数は指数で増加しても描画時間は大きく変わらないので、Acceleration Structureは本当に偉大ですね🙏&lt;/p&gt;

&lt;p&gt;倍率について、フラクタルの深度が増えればレイマーチングの方が有利だと予想していましたが、予想通りにその傾向はありました。
ですが、思ったよりも差が縮まらないんだというのが率直な感想です。&lt;/p&gt;

&lt;h2 id=&#34;レンダリング結果&#34;&gt;レンダリング結果&lt;/h2&gt;

&lt;p&gt;大きなサイズのレンダリング結果です。&lt;/p&gt;

&lt;p&gt;異なるアルゴリズムでモデリングしているので、ジオメトリーは完全一致ではありません。&lt;/p&gt;

&lt;p&gt;記事を書いている途中で発覚しましたが、レイマーチングのステップ回数100では上部の法線とレイの角度が急な箇所でエラーが起きていました。
サムネではステップ回数300に増やして再レンダリングして15.7267秒でした。&lt;/p&gt;

&lt;h3 id=&#34;レイマーチング-深度1&#34;&gt;レイマーチング 深度1&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i1_s256.png&#34; alt=&#34;レイマーチング 深度1&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイマーチング-深度2&#34;&gt;レイマーチング 深度2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i2_s256.png&#34; alt=&#34;レイマーチング 深度2&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイマーチング-深度3&#34;&gt;レイマーチング 深度3&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i3_s256.png&#34; alt=&#34;レイマーチング 深度3&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイマーチング-深度4&#34;&gt;レイマーチング 深度4&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raymarching_i4_s256.png&#34; alt=&#34;レイマーチング 深度4&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイキャスティング-深度1&#34;&gt;レイキャスティング 深度1&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i1_s256.png&#34; alt=&#34;レイキャスティング 深度1&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイキャスティング-深度2&#34;&gt;レイキャスティング 深度2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i2_s256.png&#34; alt=&#34;レイキャスティング 深度2&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイキャスティング-深度3&#34;&gt;レイキャスティング 深度3&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i3_s256.png&#34; alt=&#34;レイキャスティング 深度3&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;レイキャスティング-深度4&#34;&gt;レイキャスティング 深度4&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-08-08-raymarching-vs-raycasting/raycast_i4_s256.png&#34; alt=&#34;レイキャスティング 深度4&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;レイマーチングの高速化手法&#34;&gt;レイマーチングの高速化手法&lt;/h1&gt;

&lt;p&gt;レイマーチングの高速化手法を軽く調べてみました。&lt;/p&gt;

&lt;p&gt;EnhancedSphereTracingやAccelerating Sphere Tracingはレイマーチングのステップを少し大きく調整してステップ数を減らす手法です。
IFSやMod Repetitionと乱数の組み合わせによる非連続な距離関数だとうまくいかない気もしていますが、ちゃんと試したことはないので分かりません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EnhancedSphereTracing [Benjamin Keinert 2014]

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://erleuchtet.org/~cupe/permanent/enhanced_sphere_tracing.pdf&#34;&gt;論文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Hirai0827/items/eddcb73a1976c3088b88&#34;&gt;日本語解説 by @lucknknock さん&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Accelerating Sphere Tracing [Csaba Bálint 2018]

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/publication/331547302_Accelerating_Sphere_Tracing&#34;&gt;論文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Hirai0827/items/e05e13f343357d648b1b&#34;&gt;日本語解説 by @lucknknock さん&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cone Marchingは非連続な距離関数でもおそらく適用できそうです。
低解像度でDepthを計算しておいて、高解像度でDepthを引き継いでレイマーチングをすることで、トータルで距離関数の評価回数をかなり削減できます。
しかし、プライマリレイにしか適用できないため、パストレーシングでは効果が低そうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fulcrum-demo.org/wp-content/uploads/2012/04/Cone_Marching_Mandelbox_by_Seven_Fulcrum_LongVersion.pdf&#34;&gt;Cone_Marching_Mandelbox_by_Seven_Fulcrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.gamesindustry.biz/article/1803/18032802/&#34;&gt;［GDC 2018］Cone Marching法で描くフラクタルVRの世界「CORAL」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このあたりはよく読んでいません。自分のための備忘録です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Geometric Method for Accelerated Sphere Tracing of Implicit Surfaces [Csaba Bálint 2021]

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cyber.bibl.u-szeged.hu/index.php/actcybern/article/view/4203&#34;&gt;論文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;後で読む&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Real-Time Rendering of Complex Fractals

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-1-4842-7185-8_33&#34;&gt;リンク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Real-Time Renderingの章らしいが、単なるレイマーチングの紹介かもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Area Lights in Signed Distance Function Scenes

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://diglib.eg.org/bitstream/handle/10.2312/egs20191021/085-088.pdf?sequence=1&amp;amp;isAllowed=y&#34;&gt;論文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;衝突判定ではないが気になるのでメモ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;レイマーチングはめちゃくちゃ遅いので、レイトレ合宿のようにレンダリング時間がシビアなら悪手かもしれません。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KodeLifeでMIDIコンを使うのがとても簡単だった</title>
      <link>https://gam0022.net/blog/2022/05/08/kodelife-midi/</link>
      <pubDate>Sun, 08 May 2022 21:56:23 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/05/08/kodelife-midi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hexler.net/kodelife&#34;&gt;KodeLife&lt;/a&gt;でMIDIコンを使うのがとても簡単でした。こんな感じにVJっぽいことが気軽にできます。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ht&#34; dir=&#34;ltr&#34;&gt;KORG nanoKONTROL2 + KodeLife &lt;a href=&#34;https://t.co/UqFQqYUFHa&#34;&gt;pic.twitter.com/UqFQqYUFHa&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1487783819730059264?ref_src=twsrc%5Etfw&#34;&gt;January 30, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;このシェーダーは&lt;a href=&#34;https://gam0022.net/blog/2021/12/31/tdf2021-shader-showdown/&#34;&gt;Tokyo Demo Fest 2021のShader Showdown&lt;/a&gt;をKodeLife向けに少し修正したものです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;kodelifeとは&#34;&gt;KodeLifeとは&lt;/h1&gt;

&lt;p&gt;リアルタイムにシェーダーのライブコーディングをするためのソフトです。&lt;/p&gt;

&lt;p&gt;Mac / Windows / Linux / iOS / Androidなど幅広いプラットフォームに対応しています。&lt;/p&gt;

&lt;h1 id=&#34;kodelifeでmidiコンを使うまでの手順&#34;&gt;KodeLifeでMIDIコンを使うまでの手順&lt;/h1&gt;

&lt;p&gt;公式マニュアルの&lt;a href=&#34;https://hexler.net/kodelife/manual/parameters-built-in&#34;&gt;Parameters · Built-In&lt;/a&gt;を見れば解決なのですが、KodeLifeまったく使ったことのない人向けに画像付きで手順をまとめました。&lt;/p&gt;

&lt;h2 id=&#34;1-新規プロジェクトを作成&#34;&gt;1. 新規プロジェクトを作成&lt;/h2&gt;

&lt;p&gt;まずはKodeLifeを起動して新規プロジェクトを作成します。&lt;/p&gt;

&lt;h2 id=&#34;2-midi-channelを追加&#34;&gt;2. MIDI Channelを追加&lt;/h2&gt;

&lt;p&gt;MIDIコントローラーの入力を受けるけるために、パラメーターのリストにMIDI Channelを追加します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Project &amp;gt; Parameters &amp;gt; ＋ボタン &amp;gt; Built-in &amp;gt; Input &amp;gt; MIDI Channel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-08-kodelife-midi/add-midi-channel.png&#34; alt=&#34;MIDI Channelを追加&#34; /&gt;&lt;/p&gt;

&lt;p&gt;追加するとこうなります。MIDI Channelの設定はデフォルトのままでOKです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-08-kodelife-midi/midi-channel.png&#34; alt=&#34;MIDI Channelの設定&#34; /&gt;&lt;/p&gt;

&lt;p&gt;デフォルトの状態だとMIDIの入力が32x32のテクスチャとしてサンプリング可能になります。&lt;/p&gt;

&lt;h2 id=&#34;3-midi-channelをシェーダーからサンプリング&#34;&gt;3. MIDI Channelをシェーダーからサンプリング&lt;/h2&gt;

&lt;h3 id=&#34;midi入力を受け取るmidi関数を定義&#34;&gt;midi入力を受け取るmidi関数を定義&lt;/h3&gt;

&lt;p&gt;前述のとおり、MIDIの入力が32x32のテクスチャとしてサンプリング可能になります。&lt;/p&gt;

&lt;p&gt;まずテクスチャのサンプラーを定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;uniform sampler2D midi1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、こんな感じのmidi関数を定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;ivec2 midiCoord(int offset)
{
    int x = offset % 32;
    int y = offset / 32;
    return ivec2(x, y);
}

float midi(int ccNumber) {
    return texture(midi1, vec2((1. / 32.) * midiCoord(3 * 127 + ccNumber))).r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;midi関数の使用例&#34;&gt;midi関数の使用例&lt;/h3&gt;

&lt;p&gt;midi関数は&lt;a href=&#34;https://www.g200kg.com/jp/docs/dic/controlchange.html&#34;&gt;コントロールチェンジ番号&lt;/a&gt;を受け取って、対応する値を [0-1] の範囲で返します。テクスチャなので [0-1] です。&lt;/p&gt;

&lt;p&gt;IFSのイテレーションなどにmidi関数を使えば、冒頭の動画のようにIFSの幾何学形状をMIDIコンで制御できます！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec4 map(vec3 p) {
    vec3 pos = p;
    p = mod(p, 1.) - 0.5;
    vec4 m = vec4(1, 1, 1, 1);

    float s = 1.;
    for (int i = 0; i &amp;lt; 10 * midi(0); i++) {// MIDIコンでIFSのイテレーションを制御
        p = abs(p) - 0.5;
        rot(p.xy, -0.5);
        p = abs(p) - 0.4;
        rot(p.yz, -0.1);

        float a = 1.0 + midi(1);// MIDIコンでIFSのスケールを制御
        p *= a;
        s *= a;
    }

    U(m, sdBox(p, vec3(0.5, 0.05, 0.05)) / s, 1., 1., 0.);
    U(m, sdBox(p, vec3(0.5 + 0.5 * (cos(TAU * time * 0 / 4.)), 0.06, 0.05)) / s, 0., 0.1, 0.5);
    U(m, sdBox(p, vec3(0.2, 0.6, 0.1)) / s, 0., saturate(cos(TAU * (time + pos.z / 8.))), -0.5);

    return m;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シェーダーの全文は&lt;a href=&#34;https://gist.github.com/gam0022/23fc2128753495f88b6824e1dd134168&#34;&gt;gist&lt;/a&gt;にあります。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;KodeLifeではMIDIコンを簡単に使えて素敵！という小ネタでした。&lt;/p&gt;

&lt;p&gt;ちなみに使ったMIDIコンは&lt;a href=&#34;https://amzn.to/39LN12C&#34;&gt;KORG nanoKONTROL2&lt;/a&gt;です。&lt;/p&gt;

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B004M8UZS8&amp;linkId=8165ff008f7ff356a2d6382883941aca&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;せっかくMIDIコンを買ったのに、とくにVJする機会もないので置物になってます。誰かVJに誘ってください。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HugoをGitHub Pagesで公開し、2リポジトリ構成の管理を楽にする方法</title>
      <link>https://gam0022.net/blog/2022/05/07/hugo-on-github-pages/</link>
      <pubDate>Sat, 07 May 2022 20:05:08 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/05/07/hugo-on-github-pages/</guid>
      <description>&lt;p&gt;本サイトのホスト先をConoHa VPSからGitHub Pagesに乗り換えました。&lt;/p&gt;

&lt;p&gt;実は去年の5月に乗り換えていて、1年ほど運用して方針が固まったので記事にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-07-hugo-on-github-pages/thumbnail.png&#34; alt=&#34;Hugo on GitHub Pages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;vps-github-pagesの移行理由&#34;&gt;VPS→GitHub Pagesの移行理由&lt;/h1&gt;

&lt;p&gt;お金です。費用の削減が目的です。&lt;/p&gt;

&lt;p&gt;ConoHa VPSは月額1000円ほどの固定費がかかっていましたが、GitHub Pagesは無料です。&lt;/p&gt;

&lt;p&gt;また、VPSだと急にブログにアクセスが増えた場合にスケールしづらい・費用がかかるなどの懸念もありました。&lt;/p&gt;

&lt;h1 id=&#34;hugoをgithub-pagesにホスティングする&#34;&gt;HugoをGitHub Pagesにホスティングする&lt;/h1&gt;

&lt;p&gt;GitHub Pagesは、GitHubが静的ウェブページのためのウェブホスティングサービスです。
HTMLやCSSなどの静的ファイルをGitHubのリポジトリにコミットすることで静的サイトを公開できます。&lt;/p&gt;

&lt;h2 id=&#34;2リポジトリ構成とは&#34;&gt;2リポジトリ構成とは&lt;/h2&gt;

&lt;p&gt;GitHub Pagesでは、特定のブランチやディレクトリをサイトのルートとして指定できます。&lt;/p&gt;

&lt;p&gt;ディレクトリ指定を考慮すると、大きく分けて2つのリポジトリ構成が考えられます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;リポジトリ1つ構成

&lt;ul&gt;
&lt;li&gt;Hugoのpublicディレクトリ以下を公開する設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リポジトリ2つ構成（こっちを採用！！）

&lt;ul&gt;
&lt;li&gt;Hugoのプロジェクト（記事のマークダウンやHugoテンプレートなど）のリポジトリ&lt;/li&gt;
&lt;li&gt;Hugoの生成物（HTMLやCSSなどの公開用の静的コンテンツ）のリポジトリ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最終的に2.のリポジトリ2つ構成に落ち着きました。&lt;/p&gt;

&lt;p&gt;1.の方がシンプルですが、コミットの差分が多くなってしまい、文章校正などがやりづらいと思ったからです。&lt;/p&gt;

&lt;p&gt;具体的には以下の2つのリポジトリ構成にしました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/gam0022.github.com-source-hugo&#34;&gt;https://github.com/gam0022/gam0022.github.com-source-hugo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Hugoのプロジェクト（記事のマークダウンやHugoテンプレートなど）のリポジトリ&lt;/li&gt;
&lt;li&gt;2. のリポジトリをsubmoduleとして参照&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/gam0022.github.com&#34;&gt;https://github.com/gam0022/gam0022.github.com&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Hugoの生成物（HTMLやCSSなどの公開用の静的コンテンツ）のリポジトリ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2リポジトリ構成のcommitをバッチで自動化&#34;&gt;2リポジトリ構成のcommitをバッチで自動化&lt;/h2&gt;

&lt;p&gt;2リポジトリ構成ではコミットが面倒という問題がありました。&lt;/p&gt;

&lt;p&gt;そこで簡単な.batを書いて、バッチを叩くだけで自動的に2リポジトリのcommitとpushができるようにしました。
Windowsを利用している人は参考にしてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/gam0022.github.com-source-hugo/blob/master/deploy.bat&#34;&gt;deploy.bat&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;:: コミットメッセージ
set msg=&amp;quot;Build %date% %time%&amp;quot;

pushd public

:: publicディレクトリを掃除
git fetch -p
git checkout -B master origin/master

popd

:: HTMLを生成
hugo.exe

pushd public

:: HTML生成物をコミット
git add .
git commit -m %msg%
git push origin HEAD

popd

:: ソースをコミット
git add .
git commit -m %msg%
git push origin HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;カスタムドメインとssl化&#34;&gt;カスタムドメインとSSL化&lt;/h1&gt;

&lt;p&gt;現在は独自ドメインのSSL化も簡単にできます。以前はCloudFlare等のCDNが必要でしたが、現在はCDNも不要です。&lt;/p&gt;

&lt;p&gt;独自ドメインのSSL化に必要な設定は2つだけです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GitHub側の設定&lt;/li&gt;
&lt;li&gt;ドメインの管理ページ側のAレコード・CNAMEの設定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この記事の情報が古くなっている可能性もあるので、最新の情報は公式マニュアルも参照してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.github.com/ja/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;GitHub Pages サイトのカスタムドメインを管理する&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;github側の設定&#34;&gt;GitHub側の設定&lt;/h2&gt;

&lt;p&gt;リポジトリの &lt;code&gt;Settings &amp;gt; Pages &amp;gt; Custom domain&lt;/code&gt; からカスタムドメインを指定できます。&lt;/p&gt;

&lt;p&gt;SSL証明書の更新まで自動的にGitHub Pages側でやってくれるので、本当にこれだけしかやることがないです。&lt;/p&gt;

&lt;p&gt;SSL化したい場合には、 &lt;code&gt;Enforce HTTPS&lt;/code&gt; にチェックします。&lt;/p&gt;

&lt;p&gt;マニュアルにも書かれていますが、DNSやHTTPSの変更が伝播するには、最大24時間かかるそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-07-hugo-on-github-pages/github-custom-domain.png&#34; alt=&#34;GitHub側の設定&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ドメインの管理ページ側のaレコード-cnameの設定&#34;&gt;ドメインの管理ページ側のAレコード・CNAMEの設定&lt;/h2&gt;

&lt;p&gt;CNAMEとAレコードを設定して問題なく運用できています。&lt;/p&gt;

&lt;p&gt;筆者はあまりネットワークに詳しくないので、間違っていたら教えてください。&lt;/p&gt;

&lt;p&gt;Aレコード&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CNAME&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gam0022.github.io.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-07-hugo-on-github-pages/google-domain.png&#34; alt=&#34;Google Domain&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;Hugoのホスト先をVPSからGitHub Pagesに移行して固定費削減できました。&lt;/p&gt;

&lt;p&gt;VPSではrsyncで即時に反映されていたのが、GitHub Pagesにしてから反映に数分かかるなど細かい不満はありますが、無料で使えているので許容範囲かなと思っています。&lt;/p&gt;

&lt;h2 id=&#34;静的cms-ホスティングサービスを選ぶ理由&#34;&gt;静的CMS＋ホスティングサービスを選ぶ理由&lt;/h2&gt;

&lt;p&gt;はてなブログなどのブログサービスへの移行も検討したことも過去にありますが、特定のサービスに依存したくないという考えから現在の構成に落ち着いています。&lt;/p&gt;

&lt;p&gt;企業やサービスの寿命を考えると、10年後や20年後まで存続しているのか分からないので、特定の企業やサービスにロックインしたくありません。&lt;/p&gt;

&lt;p&gt;その点で静的CMS + 適当なサービスにホスティングがブログの持続性（サービス終了のリスク回避）では最強だと考えています。&lt;/p&gt;

&lt;p&gt;もしGitHub Pagesがサービス終了したとしても、その時はまたVPSにホスティングすれば良いだけです。&lt;/p&gt;

&lt;p&gt;完全に余談ですが、ドメインは10年更新にしているので、筆者が死亡したとしてもしばらくサイトは消えないと思います。&lt;/p&gt;

&lt;p&gt;それでは！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WH-1000XM3からWH-1000XM4に乗り換えた</title>
      <link>https://gam0022.net/blog/2022/04/10/wh-1000xm4/</link>
      <pubDate>Sun, 10 Apr 2022 21:37:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/04/10/wh-1000xm4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://amzn.to/37BfZAX&#34;&gt;WH-1000XM3&lt;/a&gt;から&lt;a href=&#34;https://amzn.to/3reEuuG&#34;&gt;WH-1000XM4&lt;/a&gt;に乗り換えてから半年ほど経過したので、感想を書きます。&lt;/p&gt;

&lt;p&gt;結論から言うと、 &lt;strong&gt;マルチペアリングが便利&lt;/strong&gt; だったので、乗り換えて大正解でした。&lt;/p&gt;

&lt;p&gt;現在WH-1000XM3を使っているけど、WH-1000XM4に乗り換えようとしている方、WH-1000XM3 vs WH-1000XM4の比較で悩んでいる方はぜひ参考にしてください。&lt;/p&gt;

&lt;p&gt;WH-1000XM3は2019年2月、WH-1000XM4は2021年11月に購入しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-04-10-wh-1000xm4/compare.jpg&#34; alt=&#34;WH-1000XM3とWH-1000XM4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;見た目は完全に同じで、後述の近接センサーの有無くらいしか外見上の違いはありません。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;my new gear&amp;hellip; &lt;a href=&#34;https://t.co/8PlziGlzha&#34;&gt;pic.twitter.com/8PlziGlzha&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1461969208959401986?ref_src=twsrc%5Etfw&#34;&gt;November 20, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;マルチペアリングは大正義&#34;&gt;マルチペアリングは大正義&lt;/h2&gt;

&lt;p&gt;WH-1000XM3は同時に1台の機器にしか接続できなかったので、PCとiPhoneの2台で使うには毎回Bluetoothの接続の切り替えが必要でした。&lt;/p&gt;

&lt;p&gt;私の場合は、自宅ではPC、外出時にiPhoneという使い方をしています。PCの方でBluetooth接続を切断してから、iPhoneでBluetoothの接続をやりなおすという手順が必要でした。めちゃくちゃ煩わしいです。&lt;/p&gt;

&lt;p&gt;WH-1000XM4ではマルチポイントによって同時に2台まで接続できます。
注意点としては音を再生できるのは1台の機器だけです。
PCで音楽再生を止めて、iPhoneで音楽を再生すれば、iPhoneのみから音が再生されます。
1台からしか流れないとしてもBluetoothの再接続が不要になったという点が本当に素晴らしいです。&lt;/p&gt;

&lt;p&gt;詳細は公式ページを参照してくいださい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://helpguide.sony.net/mdr/wh1000xm4/v1/ja/contents/TP0002935898.html&#34;&gt;WH-1000XM4 | ヘルプガイド | 2台の機器と同時に接続する（マルチポイント接続）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3台目の接続をしようとすると、2台目のデバイスの接続が上書きされる挙動になります。
以前はBluetoothの接続を切断しないと新たに接続ができなかったので、上書きできるようになっただけでも大きなメリットに感じました。&lt;/p&gt;

&lt;h2 id=&#34;近接センサーがイヤーパッドカバーと干渉する問題&#34;&gt;近接センサーがイヤーパッドカバーと干渉する問題&lt;/h2&gt;

&lt;p&gt;近接センサーによってヘッドフォンを頭から外した時に自動的に再生を一時停止する機能も搭載されました。&lt;/p&gt;

&lt;p&gt;個人的に絶対に必要というほどでもないですが、ちょっと便利な機能でした。&lt;/p&gt;

&lt;p&gt;この機能はSONY公式のHeadphones Connectアプリから「ヘッドフォンを外したら音楽を一時停止」でON/OFFが可能です。&lt;/p&gt;

&lt;p&gt;近接センサーのデメリットとして、イヤーパッドカバーと干渉してしまうという問題が発生しました。&lt;/p&gt;

&lt;p&gt;設定でOFFにすればいいのですが、ONにした状態でも&lt;a href=&#34;https://amzn.to/3O4eEDQ&#34;&gt;EarTouch 2（M55）&lt;/a&gt;というイヤーパッドカバーであれば干渉が起きませんでした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-04-10-wh-1000xm4/ng.jpg&#34; alt=&#34;干渉するイヤーパッドカバー&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通常のイヤーパッドカバーだと、左耳の近接センサーを覆ってしまうため、干渉します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-04-10-wh-1000xm4/EarTouch2-1.jpg&#34; alt=&#34;EarTouch2のパッケージを空けた様子&#34; /&gt;&lt;/p&gt;

&lt;p&gt;EarTouch2のパッケージを空けた様子です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-04-10-wh-1000xm4/EarTouch2-2.jpg&#34; alt=&#34;EarTouch2を装着した様子&#34; /&gt;&lt;/p&gt;

&lt;p&gt;EarTouch2を装着した様子です。&lt;/p&gt;

&lt;p&gt;イヤーパッドと完全に密着するので、半年利用して近接センサーと干渉することは一度もありませんでした。&lt;/p&gt;

&lt;p&gt;EarTouch2にはサイズが複数ある点には注意してください。WH-1000XM4に装着するのであれば &lt;strong&gt;「2-M55」&lt;/strong&gt; を必ず選んでくださいね。&lt;/p&gt;

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0948XC4VY&amp;linkId=dc3499299002f4bca3bf85e9953ebc74&#34;&gt;&lt;/iframe&gt;

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08F2866Q3&amp;linkId=49fb740e6d3212c880baafe7e2fc5660&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;完全に密着しているので、耳が圧迫されて痛くなることもないのも良かったです。&lt;/p&gt;

&lt;p&gt;イヤーパッドカバーを装着することで、皮脂や汗を防ぎ、衛生的に利用できているので大満足です。
半年ほど利用して本体のイヤーパッド部分への汚れや匂いは完全に防ぐことができました。&lt;/p&gt;

&lt;p&gt;さら頭頂部と接する皮の部分の皮脂がつかないように、このカバーも併用しています。サイズ感がぴったりなのでオススメできます。&lt;/p&gt;

&lt;iframe sandbox=&#34;allow-popups allow-scripts allow-modals allow-forms allow-same-origin&#34; style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06XKL5YZ6&amp;linkId=51ba0a690dae2cd91e46bd9d103b1cae&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;音質-ノイズキャンセリング性能&#34;&gt;音質・ノイズキャンセリング性能&lt;/h2&gt;

&lt;p&gt;音質・ノイズキャンセリング性能については、個人的にはあまり進化を感じませんでした。&lt;/p&gt;

&lt;p&gt;ノイズキャンセリング性能については、WH-1000XM3の時点で十分に完成されていたので、まったく不満はありません。&lt;/p&gt;

&lt;p&gt;Bluetooth接続なので、秒単位の遅延は発生しています。音ゲーなどをプレイするのは難しいでしょう。&lt;/p&gt;

&lt;p&gt;PCにヘッドセットとしてマイクありで接続すると、WH-1000XM3と同様に音質は完全にゴミになります。&lt;/p&gt;

&lt;p&gt;このあたりはBluetoothのコーデックの限界なのかなと思って諦めています。&lt;/p&gt;

&lt;p&gt;なお、WH-1000XM4ではaptX/aptX HD未対応とのことです。この点はWH-1000XM3よりも退化しているようですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://iyusuke.net/wh1000xm4-aptx-aptxhd/&#34;&gt;【Weekly小噺】WH-1000XM4がLDACとAACのみでaptX/aptX HDに対応しなかったわけ | iyusuke -YusukeMiyamotoのブログ-&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;PCと携帯のように2台以上の端末で使う需要があるなら、WH-1000XM4のマルチペアリング接続は大きなメリットがあるので、WH-1000XM3から乗り換えを検討しても良いと思いました。&lt;/p&gt;

&lt;p&gt;執筆時点ではWH-1000XM3とWH-1000XM4の差額は7000円ほどですが、毎日の接続の切り替えの手間を考えれば、差額に見合うだけの価値があると思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tokyo Demo Fest 2021のShader Showdownに参加しました</title>
      <link>https://gam0022.net/blog/2021/12/31/tdf2021-shader-showdown/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/12/31/tdf2021-shader-showdown/</guid>
      <description>&lt;p&gt;12月11日～12日にオンラインで開催された&lt;a href=&#34;https://tokyodemofest.jp/&#34;&gt;Tokyo Demo Fest 2021&lt;/a&gt;（以下、TDF）に参加しました。&lt;/p&gt;

&lt;p&gt;TDFは、日本国内で唯一のデモパーティです。
リアルタイムに映像や音楽を生成するプログラムを「デモ」と言い、デモを鑑賞したり完成度を競ったりして楽しむイベントを「デモパーティ」と言います。
「デモシーン」はデモやデモパーティを中心としたコンピューターのサブカルチャーです。&lt;/p&gt;

&lt;p&gt;TDFのShader Showdownというイベントに競技者として参加しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-31-tdf2021-shader-showdown/Collage_Fotor_v3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-31-tdf2021-shader-showdown/Collage_Fotor_v3.jpg&#34; alt=&#34;Collage_Fotor_v3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;また、TDFのGLSL Graphics Compoにも参加したので、こちらは別記事にまとめました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2021/12/20/tdf2021-glsl/&#34;&gt;Tokyo Demo Fest 2021のGLSL Graphics Compo優勝作品の解説 | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;shader-showdownとは&#34;&gt;Shader Showdownとは&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;TokyoDemoFestのShader Showdownは、世界的なDemoparty「Revision」と同じレギュレーションで開催します。&lt;br&gt;試合の放映はパーティー当日12/11-12となります。乞うご期待……！ &lt;a href=&#34;https://t.co/IlVue5npWz&#34;&gt;pic.twitter.com/IlVue5npWz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tokyo Demo Fest 2021 (2021/12/11-12) (@TokyoDemoFest) &lt;a href=&#34;https://twitter.com/TokyoDemoFest/status/1452275618997886976?ref_src=twsrc%5Etfw&#34;&gt;October 24, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Shader Showdownとは25分間でシェーダーを書き、どちらの作品が良いかを決める競技です。&lt;/p&gt;

&lt;p&gt;試合中は、一切のドキュメントの参照ができません。当然ながら必要な関数はすべて試合中に実装しないいけません。
時間が25分しかないので、バグを生み出すと修正する時間はありません。世界的なDemoparty「Revision」に準拠しためちゃくちゃ厳しいレギュレーションでの開催でした。&lt;/p&gt;

&lt;p&gt;1対1のトーナメント形式で開催され、試合の勝敗は観衆（ビジター）の投票によって決定します。今回は私を含めた8人でトーナメントを行いました。&lt;/p&gt;

&lt;p&gt;対戦はGLSLのライブコーディングで行われます。&lt;a href=&#34;https://github.com/TheNuSan/Bonzomatic/releases/tag/v11&#34;&gt;Bonzomatic&lt;/a&gt;というアプリを利用し、対戦者の書いているコードやカーソルの位置が共有されます。
Bonzomaticはシェーダーのライブコーディング専用のアプリです。&lt;/p&gt;

&lt;p&gt;次の初期状態のサイケなトンネルはBonzomaticのデフォルトのシェーダーです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-31-tdf2021-shader-showdown/bonzomatic-default.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-31-tdf2021-shader-showdown/bonzomatic-default.jpg&#34; alt=&#34;bonzomaticの初期状態&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;極座標による疑似3Dのシェーダーで汎用性に乏しいため、自分を含めてほどんどの競技者はまず初期状態のコードはコメントアウトするか消します。本当に無からシェーダーを書いています。&lt;/p&gt;

&lt;p&gt;ビジターは対戦者が25分の制限時間の中でどのような戦略とアイデアをもってコードを書いていくかをすぐ隣でみているかのように体験できます。&lt;/p&gt;

&lt;p&gt;詳しいGLSLライブコーディングの知識がなくても楽しめるよう、TDFでは対戦者がどのようなコードを書いているかのリアルタイムな解説があります。&lt;/p&gt;

&lt;h1 id=&#34;ライブコーディングした作品解説&#34;&gt;ライブコーディングした作品解説&lt;/h1&gt;

&lt;p&gt;今回のTDFのShader Showdownでライブコーディングした作品を簡単に解説します。&lt;/p&gt;

&lt;p&gt;TDFのShader Showdownの全作品は&lt;a href=&#34;https://livecode.demozoo.org/party_series/174.html&#34;&gt;livecode.demozoo.org&lt;/a&gt;にもアーカイブされています。&lt;/p&gt;

&lt;h2 id=&#34;lightning-tunnel-quarter-final&#34;&gt;Lightning Tunnel | Quarter-Final&lt;/h2&gt;

&lt;p&gt;準々決勝（Quarter-Final）の作品です。&lt;/p&gt;

&lt;p&gt;稲妻が轟くトンネルをイメージして作りました。&lt;/p&gt;

&lt;p&gt;ボリュームレンダリングをしてBloom感を出しています。ボリュームレンダリングの実装が雑なのでアーティファクトが発生しているのですが、むしろ雷の荒々しい感じが再現できて良かったです。&lt;/p&gt;

&lt;p&gt;時間が余ったのでカメラのFoVのアニメーションをしたのですが、ちょっとワープっぽい効果になりました。&lt;/p&gt;

&lt;p&gt;モデリングはIFSでやっています。IFSで狙った形状を出すことは困難なので、パラメーターは事前に調整をして暗記しておきました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;25分でライブコーディングしたシェーダーです。&lt;br&gt;&lt;br&gt;This shader was coded in 25 minutes.&lt;br&gt;&lt;br&gt;Shader showdown quarter-final at &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Bonzomatic?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Bonzomatic&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/LiveCoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#LiveCoding&lt;/a&gt; &lt;a href=&#34;https://t.co/WTw7tHVsbk&#34;&gt;pic.twitter.com/WTw7tHVsbk&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469562828831195140?ref_src=twsrc%5Etfw&#34;&gt;December 11, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/sl3XWM&#34;&gt;Shadertoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://neort.io/art/c6qm3ls3p9f3hsje6360&#34;&gt;NEORT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YouTubeのアーカイブ（Day1の2:15頃）です。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/2s9KfMn1J9M?start=8114&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;vj-feat-niko-14-semi-final&#34;&gt;VJ feat. Niko_14 | Semi-Final&lt;/h2&gt;

&lt;p&gt;準決勝（Semi-Final）の作品です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/himazin917&#34;&gt;Niko_14&lt;/a&gt;さんの音楽がとても素晴らしかったので、音楽と同期したVJに挑戦しました。&lt;/p&gt;

&lt;p&gt;試合の前日に自分の試合の音楽担当はNiko_14さんと聞いたので、そのタイミングでVJをする決意をしました。&lt;/p&gt;

&lt;p&gt;VJっぽい絵を狙ったことが無かったのですが、ほぼ狙い通りのバキバキな感じにできたので良かったです。
シェーダーの構成としてはQuarter-Finalとほぼ同じで、IFSとボリュームレンダリングの組み合わせです。
IFSのパラメーターは適当だったのですが、ちゃんと狙い通りの絵になったので良かったです。&lt;/p&gt;

&lt;p&gt;色はFFT（音楽の周波数ごとのボリューム）に対応していて、低音が赤、中音が緑、高音が青に対応しています。
キックの音が支配的だったので、キックに合わせて赤～ピンクっぽいビームが発生しています。&lt;/p&gt;

&lt;p&gt;Twitterの動画の4秒頃のように、音が切り替わるタイミングでサウンドリアクティブになっているのが分かりやすいと思います。ぜひ音声をONにして再生してください！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;25分でライブコーディングしたシェーダーです。&lt;br&gt;かっこいい音楽は &lt;a href=&#34;https://twitter.com/himazin917?ref_src=twsrc%5Etfw&#34;&gt;@himazin917&lt;/a&gt; さん制作です！&lt;br&gt;&lt;br&gt;This shader was coded in 25 minutes.&lt;br&gt;Sound by &lt;a href=&#34;https://twitter.com/himazin917?ref_src=twsrc%5Etfw&#34;&gt;@himazin917&lt;/a&gt;&lt;br&gt;&lt;br&gt;Shader showdown semi-final at &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Bonzomatic?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Bonzomatic&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/LiveCoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#LiveCoding&lt;/a&gt; &lt;a href=&#34;https://t.co/HzUpd9le3t&#34;&gt;pic.twitter.com/HzUpd9le3t&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469924900257562627?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/NttSRS&#34;&gt;Shadertoy&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ShadertoyのSoundcloud連携が機能していないため、音楽はNiko_14さんのものではなく、仮です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YouTubeのアーカイブ（Day2の1:41頃）です。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/bp37xTVNRrM?start=6086&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;VJっぽいバキバキとした絵の方向性やFFTを用いたサウンドリアクティブなシェーダーはこれまで挑戦したことのないジャンルだったので、新しい方向性を模索する良い経験になりました。&lt;/p&gt;

&lt;p&gt;Semi-Finalでは&lt;a href=&#34;https://twitter.com/kamoshika_vrc&#34;&gt;Kamoshika&lt;/a&gt;さんに負けてしまったのですが、試合後のコメントによると反射の処理には&lt;a href=&#34;https://gam0022.net/blog/2021/06/08/unity-bible2/&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』の自分の章&lt;/a&gt;を参考にしてくださったそうで、めちゃくちゃありがてぇ🙏となりました。&lt;/p&gt;

&lt;p&gt;Jugem-Tさんも実況による盛り上げありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;凄い画同士の殴り合いの中BGMもライブコーディングで生成してる(Niko_14氏)とんでもない光景になっててヤバい&lt;br&gt;&lt;br&gt;Shader Showdown準決勝 gam0022氏 vs Kamoshika氏&lt;br&gt;[LIVE]Tokyo Demo Fest 2021 Day2 &lt;a href=&#34;https://t.co/648ZNFJTxk&#34;&gt;https://t.co/648ZNFJTxk&lt;/a&gt; &lt;a href=&#34;https://twitter.com/YouTube?ref_src=twsrc%5Etfw&#34;&gt;@YouTube&lt;/a&gt;より &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/atG6c8hWiK&#34;&gt;pic.twitter.com/atG6c8hWiK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jugem-T 𓆡作業中 (@Jugem_T) &lt;a href=&#34;https://twitter.com/Jugem_T/status/1469892859503734787?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;大変でしたが、楽しかったです。&lt;/p&gt;

&lt;p&gt;25分でできる範囲はかなり限られてくるので、詰め込める要素を取捨選択して、ミスをしないように実装するのは思っていたより難しく感じました。25分だとデバッグしている余裕はなくバグを生み出した瞬間に敗戦が濃厚になります。
距離関数も普段はコピペしているので暗記も大変でした。回転行列くらいは導出できるのですが、sdBoxは導出していたら時間がまったく足りません。&lt;/p&gt;

&lt;p&gt;正直に言うと、まさかここまでレベルの高い戦いになるとは思っておらず、参加者のみなさんが凄すぎてちょっと心が折れそうでした。&lt;/p&gt;

&lt;p&gt;とくにFinal（決勝）の&lt;a href=&#34;https://twitter.com/kamoshika_vrc&#34;&gt;Kamoshika&lt;/a&gt; vs &lt;a href=&#34;https://twitter.com/phi16_&#34;&gt;phi16&lt;/a&gt; の戦いは印象深かったです。&lt;/p&gt;

&lt;p&gt;Kamoshikaさんは蝶、phi16さんはライブゲームと、両者とも &amp;ldquo;生命&amp;rdquo; を誕生させていました。偶然にもテーマが一致していてちょっと面白かったです。&lt;/p&gt;

&lt;p&gt;とにかく実装量がえげつなく、これをライブコーディングでやるんだ…と驚かされました。
競技者として参加したことで、25分間でこの量をミスなく実装する困難さは痛いほど理解していたので、なおさら驚かされました。&lt;/p&gt;

&lt;p&gt;両者ともミスなく作品を仕上げており、まさに決勝戦に相応しい素晴らしい戦いを見せていただきました🙏心の底から感動しました。&lt;/p&gt;

&lt;p&gt;世界レベルの実力者の方々と戦えて本当に光栄でした！ありがとうございます！&lt;/p&gt;

&lt;p&gt;Kamoshikaさん&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;25 minutes live coding at Shader Showdown Final.&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/LiveCoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#LiveCoding&lt;/a&gt; &lt;a href=&#34;https://t.co/WeVq82f50E&#34;&gt;pic.twitter.com/WeVq82f50E&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kamoshika (@kamoshika_vrc) &lt;a href=&#34;https://twitter.com/kamoshika_vrc/status/1470360600517971970?ref_src=twsrc%5Etfw&#34;&gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;phi16さん&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/qluYGj653s&#34;&gt;pic.twitter.com/qluYGj653s&lt;/a&gt;&lt;/p&gt;&amp;mdash; phi16 (@phi16&lt;em&gt;) &amp;lt;a href=&amp;ldquo;&lt;a href=&#34;https://twitter.com/phi16&#34;&gt;https://twitter.com/phi16&lt;/a&gt;&lt;/em&gt;/status/1470104161320849409?ref_src=twsrc%5Etfw&amp;rdquo;&amp;gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;記録 TDF2021 ShaderShowdown &lt;a href=&#34;https://t.co/mMcSoYwh5U&#34;&gt;https://t.co/mMcSoYwh5U&lt;/a&gt;&lt;/p&gt;&amp;mdash; phi16 (@phi16&lt;em&gt;) &amp;lt;a href=&amp;ldquo;&lt;a href=&#34;https://twitter.com/phi16&#34;&gt;https://twitter.com/phi16&lt;/a&gt;&lt;/em&gt;/status/1470415119708753921?ref_src=twsrc%5Etfw&amp;rdquo;&amp;gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;YouTubeのアーカイブ（Day2の4:27頃）です。&lt;/p&gt;

&lt;p&gt;Finalでは私も実況者の一人として参加しています。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/bp37xTVNRrM?start=16030&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;おつかれさまでした！&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/h2yXCGGBYa&#34;&gt;pic.twitter.com/h2yXCGGBYa&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469999619409350657?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;さいごに、関係者のみなさんに感謝を申し上げます。
TDFのオーガナイザーの方々、Shader Showdownで対戦してくださったgyaboさん、norargsさん、Kamoshikaさん、0b5vrさん、phi16さん、sp4ghetさん、gazさん、実況のamagiさん、doxasさん、hiraiさんmurasaqiさん、音楽を担当したNiko_14さん、寝る前さん、h0ffman1さん、アーカイブ関連でpsenoghさん、Zavieさん、応援してくださった観戦者みなさん、本当にありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;練習&#34;&gt;練習&lt;/h1&gt;

&lt;p&gt;ライブコーディングの練習中の作品です。&lt;/p&gt;

&lt;p&gt;Quarter-FinalのIFS+ボリュームレンダリングのアプローチは練習中に決めました。&lt;/p&gt;

&lt;p&gt;トンネルのIFSのモデリングもよく見ると面影が残っています。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;情報量を追加（エンコード耐久テスト）&lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Raymarching?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Raymarching&lt;/a&gt; &lt;a href=&#34;https://t.co/uBg43zGOk6&#34;&gt;pic.twitter.com/uBg43zGOk6&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1453405601971666944?ref_src=twsrc%5Etfw&#34;&gt;October 27, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Diamond Variation 🔷 &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Raymarching?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Raymarching&lt;/a&gt; &lt;a href=&#34;https://t.co/IAEhBgdW5s&#34;&gt;pic.twitter.com/IAEhBgdW5s&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1453768374312263683?ref_src=twsrc%5Etfw&#34;&gt;October 28, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Shadertoy?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shadertoy&lt;/a&gt; にポートしました。&lt;br&gt;&lt;br&gt;&amp;quot;Diamond Tunnel&amp;quot; by gam0022&lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt;&lt;a href=&#34;https://t.co/oyyz8mop2x&#34;&gt;https://t.co/oyyz8mop2x&lt;/a&gt; &lt;a href=&#34;https://t.co/DXnqCAKY1Z&#34;&gt;pic.twitter.com/DXnqCAKY1Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1476576224768331776?ref_src=twsrc%5Etfw&#34;&gt;December 30, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Unity][URP] Y軸ビルボードシェーダー</title>
      <link>https://gam0022.net/blog/2021/12/23/unity-urp-billboard-shader/</link>
      <pubDate>Thu, 23 Dec 2021 10:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/12/23/unity-urp-billboard-shader/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://qiita.com/advent-calendar/2021/unity&#34;&gt;Unity Advent Calendar 2021&lt;/a&gt;の23日目の記事です。&lt;/p&gt;

&lt;p&gt;前日は&lt;a href=&#34;https://twitter.com/UnagiHuman&#34;&gt;@UnagiHuman&lt;/a&gt;さんの&lt;a href=&#34;https://qiita.com/UnagiHuman/items/7db6c75adea0d5862acf&#34;&gt;「Unityの新MeshAPIでMeshColliderをリアルタイム変形させる」&lt;/a&gt;でした。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こんな感じのY軸のビルボードをC#スクリプトを使わずに、シェーダーだけで実装しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/Unity-URP-Billboard-trim.gif&#34; alt=&#34;Y軸ビルボード&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHubリポジトリ: &lt;a href=&#34;https://github.com/gam0022/unity-urp-shader&#34;&gt;gam0022/unity-urp-shader&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;要約&#34;&gt;要約&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;シェーダーだけでY軸ビルボードを実装&lt;/li&gt;
&lt;li&gt;UnityのURP対応&lt;/li&gt;
&lt;li&gt;回転行列を生成するアプローチなので、プラットフォーム間の違い（Zの方向やUVの上下など）による問題が起きない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;シェーダーで実装するメリット&#34;&gt;シェーダーで実装するメリット&lt;/h1&gt;

&lt;p&gt;シェーダーでビルボードを計算するメリットはたくさんあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C#スクリプトが不要でシェーダーだけで動作する

&lt;ul&gt;
&lt;li&gt;シェーダーのポータビリティは高い&lt;/li&gt;
&lt;li&gt;昔のVRCのようにユーザスクリプトが書けない環境でも使える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;シーンビュー上でも動作する&lt;/li&gt;
&lt;li&gt;GPU（頂点シェーダー）でビルボード計算ができる

&lt;ul&gt;
&lt;li&gt;ビルボード計算のためのCPU負荷は0&lt;/li&gt;
&lt;li&gt;板ポリの頂点数は4なので、頂点シェーダーでビルボード処理をしても、GPU負荷はかなり軽い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;シェーダーのコード-全体&#34;&gt;シェーダーのコード（全体）&lt;/h1&gt;

&lt;p&gt;最終的なシェーダーのコードはこちらです。&lt;/p&gt;

&lt;p&gt;単体で動作するので、コピペして使えます。&lt;a href=&#34;https://github.com/gam0022/unity-urp-shader/blob/master/LICENSE&#34;&gt;MITライセンス&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;ファイル名: &lt;a href=&#34;https://github.com/gam0022/unity-urp-shader/blob/master/Assets/URP-Shaders/Billboard/Shaders/Unlit-Billboard.shader&#34;&gt;&lt;code&gt;Unlit-Billboard.shader&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// URP-Unlit-Billboard Shader by @gam0022 (MIT Licence)
// https://gam0022.net//blog/2021/12/23/unity-urp-billboard-shader/
Shader &amp;quot;Universal Render Pipeline/Unlit-Billboard&amp;quot;
{
    Properties
    {
        _BaseMap (&amp;quot;Base Map&amp;quot;, 2D) = &amp;quot;white&amp;quot; { }
        _BaseColor (&amp;quot;Base Color&amp;quot;, Color) = (1, 1, 1, 1)
        _Cutoff (&amp;quot;Alpha Cutoff&amp;quot;, Range(0, 1)) = 0.5
    }

    SubShader
    {
        Tags {
            &amp;quot;RenderPipeline&amp;quot; = &amp;quot;UniversalPipeline&amp;quot;
            &amp;quot;RenderType&amp;quot; = &amp;quot;TransparentCutout&amp;quot;
            &amp;quot;Queue&amp;quot; = &amp;quot;AlphaTest&amp;quot;
            &amp;quot;IgnoreProjector&amp;quot; = &amp;quot;True&amp;quot;
        }

        Pass
        {
            Tags { &amp;quot;LightMode&amp;quot; = &amp;quot;UniversalForward&amp;quot; }

            HLSLPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            #include &amp;quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl&amp;quot;

            struct Attributes
            {
                float4 positionOS: POSITION;
                float2 uv: TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionHCS: SV_POSITION;
                float2 uv: TEXCOORD0;
            };

            sampler2D _BaseMap;

            CBUFFER_START(UnityPerMaterial)
            float4 _BaseMap_ST;
            half4 _BaseColor;
            half _Cutoff;
            CBUFFER_END

            Varyings vert(Attributes IN)
            {
                Varyings OUT;

                // 回転行列を生成してビルボード処理をします
                float3 yup = float3(0.0, 1.0, 0.0);
                float3 up = mul((float3x3)unity_ObjectToWorld, yup);

                float3 worldPos = unity_ObjectToWorld._m03_m13_m23;
                float3 toCamera = _WorldSpaceCameraPos - worldPos;
                float3 right = normalize(cross(toCamera, up)) * length(unity_ObjectToWorld._m00_m10_m20);
                float3 forward = normalize(cross(up, right)) * length(unity_ObjectToWorld._m02_m12_m22);

                float4x4 mat = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1,
                };
                mat._m00_m10_m20 = right;
                mat._m01_m11_m21 = up;
                mat._m02_m12_m22 = forward;
                mat._m03_m13_m23 = worldPos;

                float4 vertex = float4(IN.positionOS.xyz, 1);
                vertex = mul(mat, vertex);
                OUT.positionHCS = mul(UNITY_MATRIX_VP, vertex);

                OUT.uv = TRANSFORM_TEX(IN.uv, _BaseMap);
                return OUT;
            }

            half4 frag(Varyings IN): SV_Target
            {
                half4 base = tex2D(_BaseMap, IN.uv);
                clip(base.a - _Cutoff);
                return base * _BaseColor;
            }
            ENDHLSL

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;解説&#34;&gt;解説&lt;/h1&gt;

&lt;h2 id=&#34;前回の記事との違い&#34;&gt;前回の記事との違い&lt;/h2&gt;

&lt;p&gt;この記事は前回の記事&lt;a href=&#34;https://gam0022.net/blog/2019/07/23/unity-y-axis-billboard-shader/&#34;&gt;[Unity] Y軸ビルボードシェーダーの実装と解説&lt;/a&gt;の改訂版です。以下のような違いがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URP（Universal Render Pipeline）に対応&lt;/li&gt;
&lt;li&gt;ビルボード処理のアプローチを改良（プラットフォーム依存をなくす）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;前回の記事-ビュー変換をスキップ-の欠点&#34;&gt;前回の記事（ビュー変換をスキップ）の欠点&lt;/h3&gt;

&lt;p&gt;前回の記事では、カメラのビュー行列の変換をスキップすることで、ビルボード処理を実装していました。&lt;/p&gt;

&lt;p&gt;Unityではプラットフォーム間の違い（Zの方向やUVの上下など）をビュー行列とプロジェクション行列でうまく吸収する設計になっており、ビュー行列の変換をスキップするとプラットフォームの対応を自力で行う必要が出てきて、かなり面倒でした。
将来的に新しいプラットフォームが増えた時などにシェーダーの修正が必要になる可能性もあり、このアプローチは筋が良くないな、と記事の公開後に思っていました。&lt;/p&gt;

&lt;p&gt;今回紹介する &lt;strong&gt;回転行列を生成するアプローチ&lt;/strong&gt; では、そのようなプラットフォーム依存の問題が起きません。&lt;/p&gt;

&lt;h2 id=&#34;回転行列を生成するアプローチ&#34;&gt;回転行列を生成するアプローチ&lt;/h2&gt;

&lt;p&gt;Unityが生成するモデル行列を使わずに、頂点シェーダーの中でうまく回転行列を生成することで、常にカメラ側を向くようにMeshを回転させてビルボード処理を実現します。&lt;/p&gt;

&lt;p&gt;シェーダーからビルボード処理を抜き出して、できるだけコメントを入れました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 回転行列を生成してビルボード処理をします
// 常にカメラ側を向くようにMeshを回転させます

// Y-UPベクトル
float3 yup = float3(0.0, 1.0, 0.0);

// up = Y軸の基底ベクトル
// オブジェクトのTransformの回転を考慮
float3 up = mul((float3x3)unity_ObjectToWorld, yup);

// オブジェクトのワールド座標
float3 worldPos = unity_ObjectToWorld._m03_m13_m23;

// オブジェクトからカメラに向かうベクトル
float3 toCamera = _WorldSpaceCameraPos - worldPos;

// right = X軸の基底ベクトル
// 前半の項 : rightはtoCameraとupの両方に直交するので、crossから計算
// 後半の項 : オブジェクトのTransformのX方向のスケールを考慮
float3 right = normalize(cross(toCamera, up)) * length(unity_ObjectToWorld._m00_m10_m20);

// forward = Z軸の基底ベクトル
// 前半の項 : forwardはupとrightの両方に直交するので、crossから計算
// 後半の項 : オブジェクトのTransformのZ方向のスケールを考慮
float3 forward = normalize(cross(up, right)) * length(unity_ObjectToWorld._m02_m12_m22);

// 各基底ベクトルを並べてビルボード用の回転行列を生成
// （厳密には平行移動とスケールも含んだ変換行列）
float4x4 mat = {
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1,
};
mat._m00_m10_m20 = right;//     X軸の基底ベクトル
mat._m01_m11_m21 = up;//        Y軸の基底ベクトル
mat._m02_m12_m22 = forward;//   Z軸の基底ベクトル
mat._m03_m13_m23 = worldPos;//  平行移動のベクトル


// ローカル座標（平行移動のためにw=1）
float4 vertex = float4(IN.positionOS.xyz, 1);

// ビルボード用の回転行列を乗算してワールド空間に変換
vertex = mul(mat, vertex);

// ビュー行列とプロジェクション行列を乗算してクリップ空間に変換
OUT.positionHCS = mul(UNITY_MATRIX_VP, vertex);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは超重要情報ですが、 &lt;strong&gt;回転後の空間の基底ベクトルを並べた行列が回転行列になります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これだけ覚えておけば、回転だけでなく、拡大縮小やSkew（せん断）の行列は自然に導出できます。&lt;/p&gt;

&lt;p&gt;知らなかった人はぜひ覚えておきましょう。CEDECで同じ話を2回くらいしています（&lt;a href=&#34;https://www.klab.com/jp/blog/creative/2020/cedec2020.html&#34;&gt;2020&lt;/a&gt;と&lt;a href=&#34;https://www.klab.com/jp/blog/tech/2021/cedec-kyushu-2021-online-3d.html&#34;&gt;2021&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/kec2-1.png&#34; alt=&#34;基底ベクトルをイメージすればOK&#34; /&gt;
&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/kec2-2.png&#34; alt=&#34;回転ベクトル1&#34; /&gt;
&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/kec2-3.png&#34; alt=&#34;回転ベクトル2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;スケール対応&#34;&gt;スケール対応&lt;/h2&gt;

&lt;p&gt;モデル行列 &lt;code&gt;unity_ObjectToWorld&lt;/code&gt; から各軸のスケールを取得することで、スケール対応ができます。
Y軸に関しては、upを計算するときにnormalizeしなければ自動でスケールが考慮されます。&lt;/p&gt;

&lt;h3 id=&#34;スケール対応なし&#34;&gt;スケール対応なし&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// up = Y軸の基底ベクトル
// オブジェクトのTransformの回転を考慮
float3 up = normalize(mul((float3x3)unity_ObjectToWorld, yup));

//...

// right = X軸の基底ベクトル
// rightはtoCameraとupの両方に直交するので、crossから計算
float3 right = normalize(cross(toCamera, up));

// forward = Z軸の基底ベクトル
// forwardはupとrightの両方に直交するので、crossから計算
float3 forward = normalize(cross(up, right));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;スケール対応あり&#34;&gt;スケール対応あり&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// up = Y軸の基底ベクトル
// オブジェクトのTransformの回転を考慮
float3 up = mul((float3x3)unity_ObjectToWorld, yup);

//...

// right = X軸の基底ベクトル
// 前半の項 : rightはtoCameraとupの両方に直交するので、crossから計算
// 後半の項 : オブジェクトのTransformのX方向のスケールを考慮
float3 right = normalize(cross(toCamera, up)) * length(unity_ObjectToWorld._m00_m10_m20);

// forward = Z軸の基底ベクトル
// 前半の項 : forwardはupとrightの両方に直交するので、crossから計算
// 後半の項 : オブジェクトのTransformのZ方向のスケールを考慮
float3 forward = normalize(cross(up, right)) * length(unity_ObjectToWorld._m02_m12_m22);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;追記&lt;br&gt;GameObjectのスケールに対応しました。&lt;a href=&#34;https://twitter.com/hashtag/Unity3d?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Unity3d&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/HLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#HLSL&lt;/a&gt; &lt;a href=&#34;https://t.co/gI4a3zpmJQ&#34;&gt;pic.twitter.com/gI4a3zpmJQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1473858972558200843?ref_src=twsrc%5Etfw&#34;&gt;December 23, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;srp-batcher&#34;&gt;SRP Batcher&lt;/h2&gt;

&lt;p&gt;URP（SRP）からSRP Batcherというドローコールバッチング（厳密にはドローコールの数を減らすわけではなく、ドローコール間のGPUの設定コストを削減）の仕組みが導入されました。&lt;/p&gt;

&lt;p&gt;以前のビルドインレンダーパイプラインのドローコールバッチングではMeshが結合されるので、ビルボードのように特殊な頂点変換をするシェーダーでは考慮が必要で、けっこう面倒でした。&lt;/p&gt;

&lt;p&gt;SRP BatcherはMeshを結合しないので、頂点変換で特別な考慮をしなくてもシェーダーが動くようになりました！めでたい🎉&lt;/p&gt;

&lt;p&gt;今回のシェーダーをフレームデバッガーで確認すると、ちゃんとSRP Batcherで描画されているのが分かります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/frame-debugger.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/frame-debugger.png&#34; alt=&#34;SRP Batcher&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SRP Batcherについては、以下の記事が詳しいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.unity.com/ja/technology/srp-batcher-speed-up-your-rendering&#34;&gt;SRP Batcher：レンダリングをスピードアップ | Unity Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;リンク&#34;&gt;リンク&lt;/h1&gt;

&lt;p&gt;参考にさせていただきました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URP対応（SRP Batcherも対応👍）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://light11.hatenadiary.com/entry/2021/07/29/194213&#34;&gt;【Unity】URP用のシェーダの書き方が旧パイプラインと微妙に違ってややこしいのでまとめた - LIGHT11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;利用したテクスチャ素材

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pngall.com/tree-png/download/23754&#34;&gt;Tree PNG Clipart Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.deviantart.com/fabooguy/art/Dirt-Ground-Texture-Tileable-2048x2048-441212191&#34;&gt;Dirt/Ground Texture [Tileable | 2048x2048]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tokyo Demo Fest 2021のGLSL Graphics Compo優勝作品の解説</title>
      <link>https://gam0022.net/blog/2021/12/20/tdf2021-glsl/</link>
      <pubDate>Mon, 20 Dec 2021 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/12/20/tdf2021-glsl/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;http://qiita.com/advent-calendar/2021/klab&#34;&gt;KLab Engineer Advent Calendar 2021&lt;/a&gt;の20日目の記事です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;12月11日～12日にオンラインで開催された&lt;a href=&#34;https://tokyodemofest.jp/&#34;&gt;Tokyo Demo Fest 2021&lt;/a&gt;（以下、TDF）に参加しました。&lt;/p&gt;

&lt;p&gt;TDFは、日本国内で唯一のデモパーティです。
リアルタイムに映像や音楽を生成するプログラムを「デモ」と言い、デモを鑑賞したり完成度を競ったりして楽しむイベントを「デモパーティ」と言います。
「デモシーン」はデモやデモパーティを中心としたコンピューターのサブカルチャーです。&lt;/p&gt;

&lt;p&gt;今年のTDFでは、『Alien Spaceship』という作品を発表しました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/_F0Pxq7TKqs&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Released &amp;quot;Alien Spaceship&amp;quot; at GLSL Graphics compo, &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021&lt;br&gt;&lt;br&gt;It&amp;#39;s running on &lt;a href=&#34;https://twitter.com/hashtag/GLSLSandbox?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSLSandbox&lt;/a&gt; &lt;br&gt;Only 1Pass Shader! No post-effects used&lt;a href=&#34;https://twitter.com/hashtag/GLSLSandbox?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSLSandbox&lt;/a&gt; で動作します。&lt;br&gt;1パスのシェーダーのみの制約で実装しており、ポストエフェクトは未使用です。 &lt;a href=&#34;https://t.co/lJBQQjjHMR&#34;&gt;pic.twitter.com/lJBQQjjHMR&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469977106612649985?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/_F0Pxq7TKqs&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/fl3SRB&#34;&gt;Shadertoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=90438&#34;&gt;Pouet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://glslsandbox.com/e#77788.0&#34;&gt;GLSL Sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TDFのGLSL Graphics Compoにて、&lt;a href=&#34;https://tokyodemofest.jp/tdf2021-results.txt&#34;&gt;本作品が1位&lt;/a&gt;に選ばれました！&lt;/p&gt;

&lt;p&gt;この記事では『Alien Spaceship』の利用技術と制作の裏側について解説します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;glsl-graphics-compoとは&#34;&gt;GLSL Graphics Compoとは？&lt;/h1&gt;

&lt;p&gt;デモシーンの文化に馴染みのない方に向けて、簡単にGLSL Graphics Compoの概要や制約について説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://glslsandbox.com/&#34;&gt;GLSL sandbox&lt;/a&gt;はWeb上でGLSLのフラグメントシェーダーを編集・実行できるWebGLで実装されたサービスです。作品を公開したり共有もできます。&lt;/p&gt;

&lt;p&gt;GLSL Graphics CompoはGLSL Sandbox上で動作するGLSLのシェーダーによるグラフィックスを競うコンポです。
コンポはコンペティションの意味で、参加者投票によって順位が決まります。&lt;/p&gt;

&lt;h2 id=&#34;glslシェーダーだけで映像をつくる&#34;&gt;GLSLシェーダーだけで映像をつくる&lt;/h2&gt;

&lt;p&gt;そもそもGLSLシェーダー、つまり &lt;strong&gt;プログラミングのソースコードだけで映像をつくる&lt;/strong&gt; 行程を一般的には想像しづらいかもしれません。&lt;/p&gt;

&lt;p&gt;まずは次の図を見ていただけると、具体的にイメージを掴めるかもしれません。
GLSLのコードからコメントや改行・空白文字を取り除き、処理の内容で色分けしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/minify-text.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/minify-text.png&#34; alt=&#34;GLSLのコードの処理&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この7756文字のGLSLのシェーダーに映像のすべてが実装されています。&lt;/p&gt;

&lt;p&gt;見てのとおり &lt;strong&gt;シーンのモデリング、ライティング、カメラワーク、演出のシーケンスがすべて含まれています。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;変数名や関数名を1文字に短縮したり、デバッグ用のコードの削除はしていないので、まだまだ文字数を削る余地はあります。
今回は文字数をそこまで意識してコーディングせずに、可読性を重視しました。&lt;/p&gt;

&lt;p&gt;GLSL sandboxでは音楽を再生できないので、YouTubeの音楽は後付けです。Shadertoy標準楽曲「Most Geometric Person」を使わせていただきました。&lt;/p&gt;

&lt;h2 id=&#34;レイマーチング&#34;&gt;レイマーチング&lt;/h2&gt;

&lt;p&gt;GLSL sandbox用のGLSLのフラグメントシェーダーで記述できるのは、フルスクリーンのMeshを描画する2D処理のみです。&lt;/p&gt;

&lt;p&gt;入力は描画対象のピクセルの座標、出力はピクセルの画素値の単純な2D処理です。
また、時間やマウス座標を入力にすることで、アニメーションもできます。&lt;/p&gt;

&lt;p&gt;3Dを描画するためには、GLSLコードの中に3Dのカメラや3Dのシーンの形状を定義する必要があります。&lt;/p&gt;

&lt;p&gt;2DのGLSLのシェーダーで3D空間を描画するためのテクニックとして、レイマーチングがよく使われます。&lt;/p&gt;

&lt;p&gt;レイマーチングは、距離関数の長さだけひたすらレイを進める処理をくり返し、距離関数が0になったら衝突したと判定する単純なアルゴリズムです。
つまり、レイトレーシングの交差判定のアルゴリズムのひとつです。
レイマーチングは、描画する形状を距離関数という数式によってプロシージャルに定義できるため、3Dのモデリングなしに3Dシーンを描画できます。&lt;/p&gt;

&lt;p&gt;レイマーチングの詳細については、過去に勉強会のスライドや書籍で紹介しています。&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/rS2j757JUrqeWL&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/shohosoda9/threejs-58238484&#34; title=&#34;シェーダだけで世界を創る！three.jsによるレイマーチング&#34; target=&#34;_blank&#34;&gt;シェーダだけで世界を創る！three.jsによるレイマーチング&lt;/a&gt; &lt;/strong&gt; de &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/shohosoda9&#34; target=&#34;_blank&#34;&gt;Sho Hosoda&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B097GBR2N3&amp;linkId=ad2164f51c3a4574701f9097c0eb7fde&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;alien-spaceshipの技術解説&#34;&gt;Alien Spaceshipの技術解説&lt;/h1&gt;

&lt;p&gt;前置きが長くなりましたが、ここからレイマーチング経験者に向けた技術解説をします。&lt;/p&gt;

&lt;p&gt;技術的なポイントとしては次の3点です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;宇宙船の船内のような具体的な対象を目指したモデリング

&lt;ul&gt;
&lt;li&gt;SDF（距離関数）によるモデリングでは少し難しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リアルタイムなグローバルイルミネーション（GI）あるライティング

&lt;ul&gt;
&lt;li&gt;事前計算なしのGIのリアルタイム計算は技術的にとても難しい課題&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;長尺のタイムラインのシーケンス

&lt;ul&gt;
&lt;li&gt;シェーダーはカメラワークや演出のシーケンスの実装に適した道具ではないが、なるべくスマートな実装になるように工夫&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;モデリング&#34;&gt;モデリング&lt;/h2&gt;

&lt;p&gt;全編を通してプリミティブとしてはBoxとSphere（卵）の2種類しか使っていません。&lt;/p&gt;

&lt;h3 id=&#34;前半のhallwayシーン&#34;&gt;前半のHallwayシーン&lt;/h3&gt;

&lt;p&gt;壁の光る部分はBoxをSkewしたり、床はBoxにDisplacement Mapでディテールを加えています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1164.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1164.jpg&#34; alt=&#34;party1164.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;壁のskew&#34;&gt;壁のSkew&lt;/h4&gt;

&lt;p&gt;壁の &lt;strong&gt;く&lt;/strong&gt; の字の折り曲がった形状には、BoxをSkewで変形させています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;p.x -= W - 0.5 * abs(p.y);// Skewで変形
opUnion(m, sdBox(p, vec3(a * 1.7, H, 0.24)), SOL, roughness, 0.0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;床のdisplacement-map&#34;&gt;床のDisplacement Map&lt;/h4&gt;

&lt;p&gt;床のDisplacement Mapは次のような数式で実装しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// hをsdBoxの第2引数のサイズに加算すると、Displacement Mapになる
float h = 0.1 * floor(2. * sin(p.x)) + 0.2 * floor(sin(2. * p.z));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sinから滑らかなカーブを得て、それをfloorで階段状に離散化しているだけです。&lt;/p&gt;

&lt;p&gt;pは事前にabs(p.x)により左右ミラーしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/floor_graph.png&#34; alt=&#34;床の断面&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;扉の台形波&#34;&gt;扉の台形波&lt;/h4&gt;

&lt;p&gt;扉の台形のギザギザの関数は&lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;kaneta先生&lt;/a&gt;のコードをお借りしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/3dd3WB&#34;&gt;Energy Lab by kaneta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;float smoothPulse(float start, float end, float period, float smoothness, float t) {
    float h = abs(end - start) * 0.5;
    t = mod(t, period);
    return smoothstep(start, start + h * smoothness, t) - smoothstep(end - h * smoothness, end, t);
}

float y(float x) {
    return smoothPulse(0.0, 0.6, 1.0, 0.5, x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/smoothPulse.png&#34; alt=&#34;扉の台形波&#34; /&gt;&lt;/p&gt;

&lt;p&gt;床のEmissiveや扉を開けたときのEmissiveの模様のパターンもsmoothPulse関数を用いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party2085.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party2085.jpg&#34; alt=&#34;party2085.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/smoothPulsePattern.png&#34; alt=&#34;smoothPulsePattern.png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Floor Emissive Pattern
float py = smoothPulse(0.0, 0.6, 1.0, 0.5, 0.25 * p.y);
float emi = smoothPulse(0.2, 0.25, 1.0, 0.5, py + p.x / 2.0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shadertoyに簡単なサンプルを用意しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/7ttXWf&#34;&gt;smoothPulse Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hallwayシーンまとめ&#34;&gt;Hallwayシーンまとめ&lt;/h4&gt;

&lt;p&gt;天井についても、係数を調整しながら箱を並べることで、狙った形状をモデリングしていきました。
特殊なことは何もしていませんが、sdBoxの評価回数が増えると負荷が高くなるので、なるべくsdBoxの数を減らすように意識しました。
レイマーチングでは、座標をmodで繰り返すと特定の軸に対して無限にオブジェクトを配置できます（opRep）。
前述の左右のミラー化もsdBoxの評価回数を減らすための工夫のひとつです。&lt;/p&gt;

&lt;p&gt;ほぼopRepとSkewとDisplacement Mapのテクニックの繰り返しで地道にモデリングしているだけです。&lt;/p&gt;

&lt;p&gt;ライティングの問題とモデリングの問題を切り分けるためにシンプルなレイマーチングの描画モードも用意しました。&lt;/p&gt;

&lt;p&gt;よく見ると強引にSkewとDisplacement Mapをしたために、よく見るとアーティファクトが発生しています。
最終的なライティングでは暗い箇所となってほとんど目立たなかったので、今回はそのままにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/debug-scene.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/debug-scene.png&#34; alt=&#34;debug-scene.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;後半のalienの巣のシーン&#34;&gt;後半のAlienの巣のシーン&lt;/h3&gt;

&lt;p&gt;IFS（Iterated Function Systems）をつかっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party6370.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party6370.jpg&#34; alt=&#34;party6370.jpg&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party7186.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party7186.jpg&#34; alt=&#34;party7186.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IFSでは狙った形をモデリングすることは困難なので、パラメーターを延々と調整しながら、理想的な見た目になるまで試行錯誤を繰り返しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// IFSのパラメーター
vec4 ifs = vec4(875, 482, 197, 545) / vec2(1200, 675).xyxy;

// IFSでモデリング
p = pos;
p -= vec3(0, H, 16. * 3.5);

for (int i = 0; i &amp;lt; 5; i++) {
    p = abs(p) - ifs.w;
    rot(p.xz, -4. * ifs.x);
    p = abs(p) - ifs.z;
    rot(p.xy, -4. * ifs.y);
}

opUnion(m, sdEgg(p, 0.1), SOL, 0.0, 0.0);
opUnion(m, sdBox(p, vec2(1, 0.01).xyy), SOL, roughness, 0.0);
opUnion(m, sdBox(p - vec2(0.001, 0).yxy, vec2(1, 0.01).xyy), VOL, 2.4 * saturate(cos(beatTau / 2. + 10. * p.x)), 2.4);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ライティング-グローバルイルミネーション&#34;&gt;ライティング（グローバルイルミネーション）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1895.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1895.jpg&#34; alt=&#34;party1895.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全編を通してグローバルイルミネーション（GI）や、少しラフな反射（roughness = 0.05くらい）をしています。&lt;/p&gt;

&lt;p&gt;グラフィックスエンジニアなら性癖に刺さるポイントだと思います。&lt;/p&gt;

&lt;p&gt;GIをリアルタイムに計算するのは技術的にはとても難しい課題です。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://twitter.com/Virgill74&#34;&gt;Virgillさん&lt;/a&gt;が開発したMadtracingを用いてGIを計算しました。&lt;/p&gt;

&lt;p&gt;Madtracingは&lt;a href=&#34;https://www.pouet.net/prod.php?which=77102&#34;&gt;End of time by Alcatraz &amp;amp; Altair&lt;/a&gt;というデモで使われた手法です。&lt;/p&gt;

&lt;p&gt;Madtracing解説用のシェーダーがShadertoyに公開されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/Xt3cWS&#34;&gt;EOT - Grid scene by Virgill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パストレーシングと同じように表面のroughnessに応じてセカンダリレイを飛ばしてGIを計算します。&lt;/p&gt;

&lt;p&gt;通常のパストレーシングでは物体の表面にヒットしてからセカンダリレイを複数回飛ばすと思いますが、
Madtracingではレイマーチングのステップ中にセカンダリレイを近傍のオブジェクトのroughnessに応じて飛ばします。&lt;/p&gt;

&lt;p&gt;これによってボリューム感やBloom感のあるライティングを実現できます。その代償として、少々負荷が高い印象です。&lt;/p&gt;

&lt;p&gt;今回のデモでは、Madtracingを自分の使いやすい形に少しだけフォークして利用しました。&lt;/p&gt;

&lt;p&gt;まず、マテリアルのフォーマット（map関数の返り値）を以下のように定義しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec4 m = vec4(1, VOL, 0, 0);
// x: Distance
// y: MaterialType (VOL or SOL)
// z: Roughness in (0-1), Emissive when z&amp;gt;1
// w: ColorPalette
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MadtracingからAA処理を削除して、AA処理はプライマリレイの生成に移動しました。これで少し負荷削減とシンプル化ができました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Ref. EOT - Grid scene by Virgill
// https://www.shadertoy.com/view/Xt3cWS
void madtracer(vec3 ro1, vec3 rd1, float seed) {
    scol = vec3(0);
    float t = 0., t2 = 0.;
    vec4 m1, m2;
    vec3 rd2, ro2, nor2;
    for (int i = 0; i &amp;lt; 160; i++) {
        m1 = map(ro1 + rd1 * t);
        // t += m1.y == VOL ? 0.25 * abs(m1.x) + 0.0008 : 0.25 * m1.x;
        t += 0.25 * mix(abs(m1.x) + 0.0032, m1.x, m1.y);
        ro2 = ro1 + rd1 * t;
        nor2 = normal(ro2);
        rd2 = mix(reflect(rd1, nor2), hashHs(nor2, vec3(seed, i, iTime)), saturate(m1.z));
        m2 = map(ro2 + rd2 * t2);
        // t2 += m2.y == VOL ? 0.25 * abs(m2.x) : 0.25 * m2.x;
        t2 += 0.25 * mix(abs(m2.x), m2.x, m2.y);
        scol += .007 * (pal(m2) * step(1., m2.z) + pal(m1) * step(1., m1.z));

        // force disable unroll for WebGL 1.0
        if (t &amp;lt; -1.) break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;絶対に実行されないbreak-によるコンパイル時間削減&#34;&gt;「絶対に実行されないbreak」によるコンパイル時間削減&lt;/h3&gt;

&lt;p&gt;madtracer関数に、謎の &lt;code&gt;if (t &amp;lt; -1.) break;&lt;/code&gt; があることに気がついたでしょうか？&lt;/p&gt;

&lt;p&gt;tはレイの進んだ距離で、絶対にマイナス値にはなりません。つまり絶対に実行されないbreak処理です。
普通に考えれば不要な処理ですが、これはGLSLコンパイル時間削減のハックです。&lt;/p&gt;

&lt;p&gt;breakを追加することで、GLSLコンパイラによってforがunrollされずにloopとして処理されて、コンパイル時間を大きく削減できます。&lt;/p&gt;

&lt;p&gt;ChromeデフォルトのWebGLのANGLE有効時にはかなり効果的で、自分の環境ではコンパイル時間を32.9秒から1.7秒に削減できました。&lt;/p&gt;

&lt;p&gt;コンポ提出当日はずっとコンパイル時間の削減に工数を費やしていて、提出2.5時間前くらいに気がついたので、もっと早く気がついていればという気持ちです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; が終わったので、&lt;br&gt;コンパイル時間を32.9秒から1.7秒に削減する&lt;br&gt;「絶対に実行されないbreak」の実例を貼っておきます。&lt;br&gt;&lt;br&gt;breakを追加することで、GLSLコンパイラによってforがunrollされずにloopに処理されて、コンパイル時間を大きく削減できます。&lt;a href=&#34;https://t.co/SC7A9WAkll&#34;&gt;https://t.co/SC7A9WAkll&lt;/a&gt; &lt;a href=&#34;https://t.co/XRakPPq0TU&#34;&gt;pic.twitter.com/XRakPPq0TU&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1470408956866883584?ref_src=twsrc%5Etfw&#34;&gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;同様のテクニックとして、&lt;code&gt;N + min(0, iFrame)&lt;/code&gt; をループ回数にする手法があります。&lt;a href=&#34;https://twitter.com/AruGL&#34;&gt;Danilさん&lt;/a&gt;に教えていただきました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;maybe you know usual trick with loop N+min(0,iFrame) it also can speedup compiling&lt;a href=&#34;https://t.co/XPfP9CZms0&#34;&gt;https://t.co/XPfP9CZms0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Danil (@AruGL) &lt;a href=&#34;https://twitter.com/AruGL/status/1466751715038879755?ref_src=twsrc%5Etfw&#34;&gt;December 3, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;コードにすると、こういう感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;for(int i = 0; i &amp;lt; 160 + min(0, iFrame); i++) {
    // ループ中の処理
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ShadertoyなどのWebGL2.0環境であれば、この方法で同じコンパイル時間削減の効果を得られます。&lt;/p&gt;

&lt;p&gt;WebGL1.0の場合はダイナミックループをサポートしていないので、WebGL1.0で動くGLSLSandboxでは &lt;code&gt;N + min(0, iFrame)&lt;/code&gt; のハックは使えません。&lt;/p&gt;

&lt;p&gt;GLSLSandbox用なら、&lt;code&gt;絶対に実行されないbreak&lt;/code&gt; のハックを使うと良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;タイムラインのシーケンス&#34;&gt;タイムラインのシーケンス&lt;/h2&gt;

&lt;p&gt;タイムラインのシーケンス管理のために次の簡単なマクロを実装しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Timeline
float prevEndTime = 0., t = 0.;
#define TL(beat, end) if (t = beat - prevEndTime, beat &amp;lt; (prevEndTime = end))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方は簡単で、TLの引数に現在時刻と境界値（区間の終了タイミング）を指定します。
単位は区別していないので、時間単位でもビート単にでも統一されていてばOKです。&lt;/p&gt;

&lt;p&gt;グローバル変数tに現在区間の相対的な時間が自動的に設定されるため、処理をスッキリと書けます。&lt;/p&gt;

&lt;p&gt;ifの条件の中にカンマを複数の式を書けるのは今回はじめて知りました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// カメラワーク制御の実装例

// 0～ 4*8ビート目までの処理
TL(beat, 4. * 8.) setCamera(vec4(600, 250. + t * 3., 600, 243. - t * 6.), 3.);

// 4*8～4*10ビート目までの処理
else TL(beat, 4. * 10.) setCamera(vec4(600, 307, 600, 44. + t * 4.), 3.);

// 4*10～4*12ビート目までの処理
else TL(beat, 4. * 12.) setCamera(vec4(494, 322, 695, 216), 2.4 + 0.2 * t);

// 4*12～4*14ビート目までの処理
else TL(beat, 4. * 14.) setCamera(vec4(600, 481. + 10. * t, 600, 59), 3.);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はカットごとにカメラを完全に切り替えていたので、このような仕組みでうまくカメラワークを実装できました。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;kanetaさんのsmoothPulse関数や、VirgillさんのMadtracing以外にも、数え切れないほどたくさんの解説記事とシェーダーを参考にしたり、たくさんの作品に影響を受けました。
たくさんの方々に感謝します。ありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;ここからは技術的なこと以外のポエムをつらつらと書きます。&lt;/p&gt;

&lt;h2 id=&#34;glsl-graphics-compo初優勝&#34;&gt;GLSL Graphics Compo初優勝！&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/12/12/tdf2018/&#34;&gt;2018年のPC Demo Compo&lt;/a&gt;に引き続き、Tokyo Demo Festでのコンポ優勝は2回目です。&lt;/p&gt;

&lt;p&gt;これまでGLSL Graphics Compoはずっと3位で、なかなか優勝できなかったので、ようやく心残りを解消できました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;I won the GLSL Graphics compo at &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021!&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021 の GLSL Graphics compo で優勝しました！めちゃくちゃ嬉しいです！&lt;br&gt;&lt;br&gt;&amp;quot;Alien Spaceship&amp;quot; by &lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/KQaQo1NI0R&#34;&gt;pic.twitter.com/KQaQo1NI0R&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469994430950445057?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;GLSL Graphics compo 1位のトロフィーを受け取りました🏆&lt;br&gt;&lt;br&gt;今年のトロフィーは例年よりもずっと重厚感があります。&lt;br&gt;&lt;br&gt;副賞の光るキーボードもありがとうございました。&lt;br&gt;家にある光るキーボードは3台目ですが、大切にします🙏&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/vC3ce68i7S&#34;&gt;pic.twitter.com/vC3ce68i7S&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1472229449433481220?ref_src=twsrc%5Etfw&#34;&gt;December 18, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;トロフィーの素材や厚みが例年よりも高級感があって、個人的にもなんだか嬉しい気持ちです（笑）。&lt;/p&gt;

&lt;p&gt;GUNCY&amp;rsquo;Sさんによる副賞のRazer BlackWidow V3 Green Switchもありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;気軽にtdfにエントリーしてほしい&#34;&gt;気軽にTDFにエントリーしてほしい&lt;/h2&gt;

&lt;p&gt;GLSL Graphics CompoはTDF独自のコンポで、海外のパーティでは見たことのない形式ですが、個人的にはとても好きです。&lt;/p&gt;

&lt;p&gt;2016年のTDFに初参加したとき、一晩でGLSLSandboxのシェーダーを書いて、GLSL Graphics Compoにエントリーした記憶は今でも鮮明に覚えています。
自分のシェーダーが巨大なスクリーンに映し出されたとき、オーディエンスの歓声が聞こえて本当に嬉しかったです。
この体験がなければデモシーンやシェーダーを続けていないような気がします。勇気を出してエントリーして良かったと本当に思います。&lt;/p&gt;

&lt;p&gt;デモを1本完成させるのは本当に大変ですが、GLSL Graphics Compoなら気軽に参加できることがメリットだと思います。&lt;/p&gt;

&lt;p&gt;気軽に参加できる数少ないコンポですが、近年のGLSL Graphics Compoのレベルはインフレを続けて、上位勢はかなりガチな作品を出してくるなという印象があります。&lt;/p&gt;

&lt;p&gt;本来のGLSL Graphics Compoは数秒から10秒程度の短いグラフィックス作品の部門だと自分は認識しています。
&lt;a href=&#34;https://nanka.hateblo.jp/entry/2018/12/13/080322&#34;&gt;Traveler 2&lt;/a&gt;やAlien Spaceshipのような長尺のデモっぽい作品がGLSL Graphics Compoに増えることで、もし他の参加者が萎縮してしまったらとても不本意な気持ちです。&lt;/p&gt;

&lt;p&gt;GLSL Graphics Compoは順位や周りを気にせず、1晩クオリティの雑なシェーダーでも構わず気軽にエントリーできる雰囲気にして、新規参入者が増える未来を望んでいます。&lt;/p&gt;

&lt;h2 id=&#34;オンラインパーティの体験&#34;&gt;オンラインパーティの体験&lt;/h2&gt;

&lt;p&gt;今回のTDF初のオンライン開催でした。&lt;/p&gt;

&lt;p&gt;TDFのオーガナイザーの方々の努力のおかげで、実際のデモパーティにかなり近い体験を再現できていたのではないかと思います。&lt;/p&gt;

&lt;p&gt;Day2のYouTubeの視聴回数が3000回を超えているので、例年のオフラインパーティよりもたくさんの人に見てもらえたなど、オンラインのメリットも感じました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/2s9KfMn1J9M&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/bp37xTVNRrM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;ですが、やはり正直に言うと「オンラインだと物足りないなぁ…」というのが正直な感想でした。
とくにオーディエンスの反応や会場の熱気を直接感じられないのはとても寂しかったです。またオフラインでデモパーティできる日が本当に待ち遠しいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;またオフラインでデモパーティできる日が待ち遠しい… &lt;a href=&#34;https://t.co/WsyEHySE28&#34;&gt;https://t.co/WsyEHySE28&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1470764587834568715?ref_src=twsrc%5Etfw&#34;&gt;December 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;shader-showdown&#34;&gt;Shader Showdown&lt;/h2&gt;

&lt;p&gt;TDF初の試みであるShader Showdownは本当に激熱でした。&lt;/p&gt;

&lt;p&gt;とくに決勝戦の &lt;a href=&#34;https://twitter.com/phi16_&#34;&gt;phi16&lt;/a&gt; vs. &lt;a href=&#34;https://twitter.com/kamoshika_vrc&#34;&gt;Kamoshika&lt;/a&gt; の戦いは一生忘れないくらい印象に残りました。&lt;/p&gt;

&lt;p&gt;Shader Showdownについては、別の記事に書きました（12/31）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2021/12/31/tdf2021-shader-showdown/&#34;&gt;Tokyo Demo Fest 2021のShader Showdownに参加しました | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;TokyoDemoFestのShader Showdownは、世界的なDemoparty「Revision」と同じレギュレーションで開催します。&lt;br&gt;試合の放映はパーティー当日12/11-12となります。乞うご期待……！ &lt;a href=&#34;https://t.co/IlVue5npWz&#34;&gt;pic.twitter.com/IlVue5npWz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tokyo Demo Fest 2021 (2021/12/11-12) (@TokyoDemoFest) &lt;a href=&#34;https://twitter.com/TokyoDemoFest/status/1452275618997886976?ref_src=twsrc%5Etfw&#34;&gt;October 24, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;おわりに-1&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;さいごに、関係者のみなさんに感謝を申し上げます。
TDFのオーガナイザーの方々、エントリーしてくださったみなさん、YouTubeで視聴してくださったみなさん、応援してくださった方々、ありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;本編では言及しなかったけれども一応書いておきたいことを箇条書きでつらつら書きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今年のTDFでは、KLabはゴールドスポンサーとして協賛

&lt;ul&gt;
&lt;li&gt;協賛できて良かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜGLSL Graphics Compoに出したの？

&lt;ul&gt;
&lt;li&gt;音楽を作る能力と余裕があれば、IntroとしてPC Demo Compoに出したかったが、間に合わなかった&lt;/li&gt;
&lt;li&gt;sadakkeyさん多忙&lt;/li&gt;
&lt;li&gt;来年は音楽も勉強したい（毎年言っている気もする）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;計画的にデモを作りたい

&lt;ul&gt;
&lt;li&gt;TDF直後には、他の人や作品に感化されて、溢れるモチベーションとやる気があるはずなのに&lt;/li&gt;
&lt;li&gt;結局毎年締切ギリギリまで着手できない&lt;/li&gt;
&lt;li&gt;だんだん徹夜もつらくなってきた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;着想点

&lt;ul&gt;
&lt;li&gt;グローバルイルミネーションをやりたかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.magnum.graphics/guest-posts/area-lights-with-ltcs/&#34;&gt;Area Lights with LTCs&lt;/a&gt;も調査はした

&lt;ul&gt;
&lt;li&gt;BRDFなどに依存したルックアップテーブルが必要で、1Pass実装にフォールバックが不可能っぽいので諦めた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;作業日記&#34;&gt;作業日記&lt;/h1&gt;

&lt;p&gt;ネタ供養🙏です。&lt;/p&gt;

&lt;h2 id=&#34;2021-11-07&#34;&gt;2021-11-07&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-07-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-07-v1-1.png&#34; alt=&#34;2021-11-07-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-16&#34;&gt;2021-11-16&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-1.png&#34; alt=&#34;2021-11-16-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-2.png&#34; alt=&#34;2021-11-16-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-3.png&#34; alt=&#34;2021-11-16-v1-3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この頃はIFSを弄っていた。&lt;/p&gt;

&lt;h2 id=&#34;2021-11-17&#34;&gt;2021-11-17&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-1.png&#34; alt=&#34;2021-11-17-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-2.png&#34; alt=&#34;2021-11-17-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-18&#34;&gt;2021-11-18&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v1-1.png&#34; alt=&#34;2021-11-18-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v2-1.png&#34; alt=&#34;2021-11-18-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-19&#34;&gt;2021-11-19&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-1.png&#34; alt=&#34;2021-11-19-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ボロノイでザラザラとした床にする案&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-2.png&#34; alt=&#34;2021-11-19-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-3.png&#34; alt=&#34;2021-11-19-v1-3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-4.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-4.png&#34; alt=&#34;2021-11-19-v1-4.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-20&#34;&gt;2021-11-20&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-20-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-20-v1-1.png&#34; alt=&#34;2021-11-20-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-21&#34;&gt;2021-11-21&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-1.png&#34; alt=&#34;2021-11-21-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-2.png&#34; alt=&#34;2021-11-21-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v2-1.png&#34; alt=&#34;2021-11-21-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-22&#34;&gt;2021-11-22&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v1-1.png&#34; alt=&#34;2021-11-22-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v2-1.png&#34; alt=&#34;2021-11-22-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-12-02&#34;&gt;2021-12-02&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v1-1.png&#34; alt=&#34;2021-12-02-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v2-1.png&#34; alt=&#34;2021-12-02-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-12-03&#34;&gt;2021-12-03&lt;/h2&gt;

&lt;p&gt;締切当日はコンパイル時間の削減をがんばっていた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>リモートワーク「買って良かったモノ・買って失敗したモノ」</title>
      <link>https://gam0022.net/blog/2021/08/23/best-buy/</link>
      <pubDate>Mon, 23 Aug 2021 13:50:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/08/23/best-buy/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;リモートワークになってから1年半が経過しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/blog/2020/03/10/best-buy/&#34;&gt;去年&lt;/a&gt;も作業環境の紹介と商品レビューをしたのですが、1年半も経ったのでアップデートしようと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-08-23-best-buy/desk.jpg&#34; alt=&#34;机&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※これはアフィリエイト記事です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;買って良かったモノ&#34;&gt;買って良かったモノ&lt;/h1&gt;

&lt;p&gt;成功した買い物の振り返りです。&lt;/p&gt;

&lt;h2 id=&#34;無線メカニカルキーボード&#34;&gt;無線メカニカルキーボード&lt;/h2&gt;

&lt;p&gt;Logicoolの&lt;a href=&#34;https://amzn.to/3mkYYR3&#34;&gt;G913-TKL&lt;/a&gt;を使っています（2020/8～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B088BYC54C&amp;linkId=46888f2d7de2e24dfd62106c3e31fc5b&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;打鍵感が良い&lt;/li&gt;
&lt;li&gt;キースイッチは3種類から選べる

&lt;ul&gt;
&lt;li&gt;クリッキー（青軸）←自分はこれ&lt;/li&gt;
&lt;li&gt;リニア（赤軸）&lt;/li&gt;
&lt;li&gt;タクタイル（茶軸）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ライトを光らせないならバッテリーの持ちが良い

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/gam0022/status/1322617333425139712&#34;&gt;87日間、毎日使用してバッテリー残量37%&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テンキーレスで場所をとらない

&lt;ul&gt;
&lt;li&gt;テンキーは使わない派なので机のスペースを節約できてGOOD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キーボードレイアウトが無難

&lt;ul&gt;
&lt;li&gt;親指の位置に無変換・変換キーが配置されているのがGOOD

&lt;ul&gt;
&lt;li&gt;個人的に無変換・変換キーでIMEをON/OFFにしているため&lt;/li&gt;
&lt;li&gt;FILCOのキーボードもテンキーレスの無難なレイアウトだが、スペースキーが大きすぎるため選択肢から外した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;音量のダイヤルが便利

&lt;ul&gt;
&lt;li&gt;不要だろうと思っていたが、意外に便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全体的にデザインが良い

&lt;ul&gt;
&lt;li&gt;ライトをOFFにすると無刻印っぽくてカッコいい&lt;/li&gt;
&lt;li&gt;ボディはアルミ製&lt;/li&gt;
&lt;li&gt;ゴミが溜まりにくい構造&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;薄型なのでパームレストがなくても使える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3万円の光るオモチャです！&lt;br&gt;カッコいいし最高！😆 &lt;a href=&#34;https://t.co/RsdBEgZpn3&#34;&gt;pic.twitter.com/RsdBEgZpn3&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1292653375926894592?ref_src=twsrc%5Etfw&#34;&gt;August 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪いポイント&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PS5では認識しない

&lt;ul&gt;
&lt;li&gt;ちなみにELECOMの&lt;a href=&#34;https://amzn.to/3kiLzq3&#34;&gt;TK-FDM105TXBK&lt;/a&gt;という1500円くらいの安価な無線のメンブレンキーボードであれば認識する&lt;/li&gt;
&lt;li&gt;LIGHTSPEEDというLogicool独自のワイヤレス規格だからかもしれないと思い、Bluetoothで接続しても「PS5はこのBluetooth機器に対応していません」となる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;値段が高い

&lt;ul&gt;
&lt;li&gt;現時点のAmazon価格が25,360円&lt;/li&gt;
&lt;li&gt;大きな欠点はない商品なので、個人的には妥当な価格&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;充電ケーブルがmicro USB Type-B

&lt;ul&gt;
&lt;li&gt;USB Type-Cが良かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;誤解を生まないように補足すると、&lt;br&gt;G913 TKLは本当に素晴らしいキーボードです。&lt;br&gt;&lt;br&gt;でもなぜか PS4/PS5 未対応でした。念の為にbluetoothとUSBレシーバーの両方で試しましたが、どちらもダメでした。 &lt;a href=&#34;https://t.co/4uTnb5HibI&#34;&gt;pic.twitter.com/4uTnb5HibI&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1359745575743201289?ref_src=twsrc%5Etfw&#34;&gt;February 11, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;無線マウス&#34;&gt;無線マウス&lt;/h2&gt;

&lt;p&gt;LogicoolのG502WLという無線のマウスを使っています（2021/3～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3日ぶりにマウスを購入しました！（買い物が下手すぎる…🙄）&lt;br&gt;&lt;br&gt;今度はG502WLというクワガタみたいなやつです。&lt;br&gt;&lt;br&gt;G703h（3枚目の写真の奥）は全体的には良かったのですが、ホイールクリックが硬くて深すぎるのと、自分の手には少しサイズが大きすぎましたね😢 &lt;a href=&#34;https://t.co/O6NeYwnc2o&#34;&gt;pic.twitter.com/O6NeYwnc2o&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1373234586881122314?ref_src=twsrc%5Etfw&#34;&gt;March 20, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07RR94VQT&amp;linkId=0e8f91eb0af540ef2a5c961b9a460f9a&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-1&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;持ちやすい

&lt;ul&gt;
&lt;li&gt;高さが低め（4cm）&lt;/li&gt;
&lt;li&gt;「つまみ持ち・つかみ持ち」の人には最適な高さ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;カスタマイズ可能なボタンの位置が押しやすく、誤操作しずらい

&lt;ul&gt;
&lt;li&gt;親指と人差し指の位置に集約されている&lt;/li&gt;
&lt;li&gt;G HUBでアプリケーションごとにカスタマイズも可能&lt;/li&gt;
&lt;li&gt;ゲームだけでなくUnity Editorのショートカットに割り当ても可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-1&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;バッテリーの持ちが悪い

&lt;ul&gt;
&lt;li&gt;ライトをOFFにしても1週間くらいでバッテリーが切れる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amzn.to/3j5IQAI&#34;&gt;G-PMP-001 POWERPLAY&lt;/a&gt;という専用のマウスパッドを買えば充電しながら使える

&lt;ul&gt;
&lt;li&gt;Amazon価格で17,523円&lt;/li&gt;
&lt;li&gt;個人的にマウスパッドは不要なので未購入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;充電ケーブルがmicro USB Type-B

&lt;ul&gt;
&lt;li&gt;USB Type-Cが良かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;G HUBの使い勝手が悪い

&lt;ul&gt;
&lt;li&gt;設定に手間がかかる&lt;/li&gt;
&lt;li&gt;使い方を理解するのが難しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;echo-dot-nature-remo-mini-meross&#34;&gt;Echo Dot + Nature Remo mini + Meross&lt;/h2&gt;

&lt;p&gt;Echo Dot 第3世代とNature Remo miniのセットを買いました（2020/10～）。&lt;/p&gt;

&lt;p&gt;買う前は便利なのか半信半疑でしたが、エアコン等の家電の操作を音声できるため便利です。&lt;/p&gt;

&lt;p&gt;寝る時に「Alexa おやすみ」で家電を一括OFFにして、「Alexa おはよう」で家電を一括ONもできます。&lt;/p&gt;

&lt;p&gt;細かい設定は別記事にしようと思いますが、このような家電をAlexaで管理しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;照明&lt;/li&gt;
&lt;li&gt;エアコン&lt;/li&gt;
&lt;li&gt;PCの電源&lt;/li&gt;
&lt;li&gt;モニターの電源&lt;/li&gt;
&lt;li&gt;加湿器（冬場のみ）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;echo dot と Nature Remo mini が届いたのでセットアップした！ &lt;a href=&#34;https://t.co/04VoZShslL&#34;&gt;pic.twitter.com/04VoZShslL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1317044797601804288?ref_src=twsrc%5Etfw&#34;&gt;October 16, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07PFFMQ64&amp;linkId=20a74e386150dd6529d9622e885c1f2d&#34;&gt;&lt;/iframe&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07CWNLHJ8&amp;linkId=20656060e550fcb1afeac74887ba421f&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Nature Remoはリモコンの赤外線を再現することで家電を制御するので、リモコン制御のほとんどの家電を操作できます。&lt;/p&gt;

&lt;p&gt;リモコン制御できないものは、Merossというスマートプラグを利用しました。
こちらはコンセントの電流のON/OFFしかできないので、加湿器や照明のように単純な家電にしか使わないほうが良いと思います。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08BRX8BLZ&amp;linkId=7b71e4efd068fb20a331df1fe4b101e3&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;悪かった点-echo-dot-第3世代&#34;&gt;悪かった点（Echo Dot 第3世代）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PCのBluetoothスピーカーとして利用すると、一時停止しているブラウザの動画や音楽が勝手に再生される&lt;/li&gt;
&lt;li&gt;音質が悪い

&lt;ul&gt;
&lt;li&gt;音楽の再生用途としては厳しい音質&lt;/li&gt;
&lt;li&gt;スマートスピーカーとしては問題ない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;echo dotをPCのbluetoothスピーカーとして利用中。&lt;br&gt;&lt;br&gt;概ね快適だけど、困ったところが1つがある。&lt;br&gt;&lt;br&gt;一時停止しているブラウザの動画や音楽が勝手に再生される現象が発生する。&lt;br&gt;&lt;br&gt;設定などで解決できるならなんとかしたい…&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1320651494853496834?ref_src=twsrc%5Etfw&#34;&gt;October 26, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;ウェブカメラ&#34;&gt;ウェブカメラ&lt;/h2&gt;

&lt;p&gt;オンライン会議のときだけノートPCを利用していましたが、デスクトップPCがメインになったのでWebカメラを買いました（2021/2～）。&lt;/p&gt;

&lt;p&gt;ノートPCを机の上から撤去できてスッキリとしました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;AmazonのタイムセールだったのでWebカメラを買った。&lt;br&gt;これでWeb会議専用のノートPCを机から撤去できる！ &lt;a href=&#34;https://t.co/GVNGPE4PD9&#34;&gt;pic.twitter.com/GVNGPE4PD9&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356196732774715399?ref_src=twsrc%5Etfw&#34;&gt;February 1, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07QQR6G5N&amp;linkId=c3bebf8f73b1de0ed73be0721c504fff&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-2&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;画質や機能は必要十分&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-2&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;長時間（6時間以上）利用していると映像が止まることもある

&lt;ul&gt;
&lt;li&gt;ZoomやMeet上でカメラのON/OFFで治るので致命的ではない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画角（視野角）が78°は広すぎる

&lt;ul&gt;
&lt;li&gt;部屋全体が写りやすい&lt;/li&gt;
&lt;li&gt;ZoomやMeetのバーチャル背景が実装されてからはそこまで気にならない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;付属アプリのLogicool Captureの使い勝手は微妙

&lt;ul&gt;
&lt;li&gt;画角が広すぎる場合はトリミング等ができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;画角が広すぎワロタと思っていたが、Logicool Captureという専用アプリをインストールしたら、画角と中央位置を調整できた👍&lt;a href=&#34;https://t.co/NtxdPFxtyd&#34;&gt;https://t.co/NtxdPFxtyd&lt;/a&gt; &lt;a href=&#34;https://t.co/LlDo5W5M2Q&#34;&gt;pic.twitter.com/LlDo5W5M2Q&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356197321407569926?ref_src=twsrc%5Etfw&#34;&gt;February 1, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;無線ヘッドセット&#34;&gt;無線ヘッドセット&lt;/h2&gt;

&lt;p&gt;オンライン会議用にヘッドセット（&lt;a href=&#34;https://amzn.to/381p6Ig&#34;&gt;Logicool G733&lt;/a&gt;）を買いました（2021/2～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;またヘッドセットを買った🎧 &lt;a href=&#34;https://t.co/lgjaztw8Mk&#34;&gt;pic.twitter.com/lgjaztw8Mk&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356513514437795843?ref_src=twsrc%5Etfw&#34;&gt;February 2, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08FSYJ92M&amp;linkId=f2e4c3f1ba886551661d8e91f7883115&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-3&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;音質が良い・遅延がない

&lt;ul&gt;
&lt;li&gt;SONYのノイズキャンセリングヘッドホン&lt;a href=&#34;https://amzn.to/32NECE6&#34;&gt;WH-1000XM3&lt;/a&gt;の場合

&lt;ul&gt;
&lt;li&gt;体感できるレベルの遅延がある&lt;/li&gt;
&lt;li&gt;マイクを有効にすると顕著に音質が劣化する&lt;/li&gt;
&lt;li&gt;Bluetoothの仕様上、帯域が狭いので仕方がない可能性&lt;/li&gt;
&lt;li&gt;色んなBluetoothのレシバーを購入したが改善しなかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;これらの問題がすべて解決したので、初手でこれを買えばよかった…&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Bluetoothはトラブルが多いので、今後は避ける予定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マイクも問題ない

&lt;ul&gt;
&lt;li&gt;同僚から声が聞き取りやすくなったと評判だった（WH-1000XM3と比較して）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;再生・一時停止ボタンがある

&lt;ul&gt;
&lt;li&gt;初期設定だとマイクのON/OFFになっているが、G HUBでカスタマイズが可能&lt;/li&gt;
&lt;li&gt;家事をしながら音楽を再生しているときにポーズできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;音量調整のボタンがある&lt;/li&gt;
&lt;li&gt;PS5でも使用可能

&lt;ul&gt;
&lt;li&gt;ちなみにPS5ではBluetoothのヘッドセットは使用不可（WH-1000XM3で検証済み）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-3&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bluetooth未対応

&lt;ul&gt;
&lt;li&gt;iPhoneと接続できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;椅子&#34;&gt;椅子&lt;/h2&gt;

&lt;p&gt;AKRACINGのゲーミングチェアを使っています（2018/7～）。&lt;/p&gt;

&lt;p&gt;長時間集中して作業するためには、椅子は身体に負担のかからないちゃんとしたものを選ぶべきかと思います。&lt;/p&gt;

&lt;p&gt;ゲーミングチェアを買う以前は、無印良品の&lt;a href=&#34;https://www.muji.com/jp/ja/store/cmdty/section/S10305&#34;&gt;体にフィットするソファ&lt;/a&gt;へ座りながらコタツで作業していましたが、姿勢が安定しないせいで身体を痛めそうですし作業にも集中できませんでした…&lt;/p&gt;

&lt;p&gt;このゲーミングチェアは腰と首の位置にそれぞれサポートがあり、長時間座っていても疲労感が少ないです。&lt;/p&gt;

&lt;p&gt;それから、賃貸に住んでいるため、キャスターで床が傷つかないかどうか、わりと心配していました。&lt;/p&gt;

&lt;p&gt;このゲーミングチェアは床を傷つけにくいキャスターを採用していて、実際に床に直接置いてずっと使用していますが、まったく気にならないです！&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01G8E6NZW&amp;linkId=c4ebe4bcb67905f67849a9e72c1de0be&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-4&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;素材の硬さが絶妙で、長時間座っていてもお尻や腰が痛くならない&lt;/li&gt;
&lt;li&gt;腰の位置のランバーサポートがとても良くて、深く腰掛けても腰椎がサポートされて体が痛くならない&lt;/li&gt;
&lt;li&gt;フローリング床に傷をつけにくいPU（ポリウレタン）製キャスターを採用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-4&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;レザーのパーツが摩耗してきた（経年劣化の許容範囲）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;補足&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/32NiM3y&#34;&gt;最上位のモデル&lt;/a&gt;だと座面チルト機能があるので、リクライニングをよく使う人は、こっちを買ったほうがいいかもしれません。&lt;/p&gt;

&lt;p&gt;AKRACINGのゲーミングチェアはAmazonのセールで毎回セール対象になっているので、セールを狙って買うのが良いかもしれません。自分もセールのときに買いました。&lt;/p&gt;

&lt;h2 id=&#34;机&#34;&gt;机&lt;/h2&gt;

&lt;p&gt;LOWYAの&lt;a href=&#34;https://item.rakuten.co.jp/low-ya/f802-g1021-100/?s-id=ph_pc_itemname&#34;&gt;デスク&lt;/a&gt;を使っています（2018/1～）。&lt;/p&gt;

&lt;h3 id=&#34;良いポイント-5&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;140cm x 70cmの大きさなので、作業スペースに困らない

&lt;ul&gt;
&lt;li&gt;例: ノートパソコンとデスクトップPCを並行して使える&lt;/li&gt;
&lt;li&gt;個人的にL字型よりシンプルな形の方が好き&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;モニターアームを設置できるスペースが広い

&lt;ul&gt;
&lt;li&gt;引き出しのある手前側以外はどこでもモニターアームを取り付けられる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2年利用して、大きな問題なし&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;奥行きが 70cm あるため、ノートパソコンやA6サイズのキャンパスノートと併用しても十分な作業スペースが確保できます。&lt;/p&gt;

&lt;!--

![キャンパスノートと併用](/images/posts/2020-03-04-best-buy/mac-open2.jpg)

![Macを開いた状態](/images/posts/2020-03-04-best-buy/mac-open.jpg)

--&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/mac-close2.jpg&#34; alt=&#34;Macを閉じた状態&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪いポイント-5&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;角が角張っているので、腕などに擦れて塗装がハゲる。腕が痛い

&lt;ul&gt;
&lt;li&gt;姿勢によっては角が腕にあたって痛く感じるかもしれない&lt;/li&gt;
&lt;li&gt;欲を言えば角が丸く加工してあるタイプの方が良いかもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;角で腕が痛い問題&#34;&gt;角で腕が痛い問題&lt;/h3&gt;

&lt;p&gt;TRUSCO(トラスコ)の安心クッションを机の角に接着して解決しました（2020/9～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;机の角が当たって痛いのでL字型のクッションを装着した。&lt;br&gt;思ったより快適になった気がする！&lt;br&gt;厚さ（高さ）もいい感じ。&lt;a href=&#34;https://t.co/B5KKp36AJ5&#34;&gt;https://t.co/B5KKp36AJ5&lt;/a&gt;&lt;br&gt;&lt;br&gt;TRUSCO(トラスコ) 安心クッション L字型 大 1本入 ブラック TAC-08 &lt;a href=&#34;https://t.co/uXuOTEeXkx&#34;&gt;pic.twitter.com/uXuOTEeXkx&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1308303960793513984?ref_src=twsrc%5Etfw&#34;&gt;September 22, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00B4T9H78&amp;linkId=2a5612e0f7f8f735b6d55d0f932e3fb2&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;掃除がしずらいという問題もありますが、痛いよりは良いのでこれで運用しています。&lt;/p&gt;

&lt;h3 id=&#34;配線がカオス問題の解決&#34;&gt;配線がカオス問題の解決&lt;/h3&gt;

&lt;p&gt;配線を整理することで掃除機がけが非常に楽になりました。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00BP4S3D6&amp;linkId=740a76ea7dc29b96d1759610b75a4fc5&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;掃除機をかけやすくした☺️ &lt;a href=&#34;https://t.co/hMHo0C2Iwb&#34;&gt;pic.twitter.com/hMHo0C2Iwb&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1323846467191123976?ref_src=twsrc%5Etfw&#34;&gt;November 4, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;LOWYAのデスクだと高さがギリギリだったので、本当に設置できるか寸法は確認したほうが良いと思います。&lt;/p&gt;

&lt;h2 id=&#34;モニター&#34;&gt;モニター&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2IlWooI&#34;&gt;I-O DATAの31.5型 WQHDのモニター EX-LDQ322DB&lt;/a&gt;を使っています（2018/5～）。&lt;/p&gt;

&lt;p&gt;※私が購入したのは1つ前のEX-LDQ321DBというモデルでしたが、今買うなら後継機のEX-LDQ322DBでいい気がします。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0816PPCHZ&amp;linkId=89b2d4f31835374d62ee072f4c3d6bea&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-6&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WQHD（2560x1440）の解像度は使いやすい

&lt;ul&gt;
&lt;li&gt;Windows用の高DPI環境のスケーリングに対応したアプリが少ないので、現状では4K解像度は使いづらい（個人の意見）&lt;/li&gt;
&lt;li&gt;スケーリングなしに広すぎず狭すぎず、ちょうどよいくらいの解像度&lt;/li&gt;
&lt;li&gt;4K解像度でスケーリングなしだと文字が小さすぎて実用性が低い&lt;/li&gt;
&lt;li&gt;アスペクト比が16:9なので、全画面でゲームしたり動画鑑賞するときに無難&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;31.5インチだと、スケーリングなしで普通に文字が読めるくらいの大きさになる

&lt;ul&gt;
&lt;li&gt;WQHDや4Kの高解像度なら、30インチ未満はやめておいたほうがいいかも&lt;/li&gt;
&lt;li&gt;4Kで40インチ以上であれば、スケーリングは不要そうだが、置き場所に困る&lt;/li&gt;
&lt;li&gt;40インチだと視野が広くないと厳しそう（想像）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結論として、WQHDの31インチが作業用としては最適

&lt;ul&gt;
&lt;li&gt;Macがメインならスケーリングありで30インチ前後の4K解像度の方が快適かも&lt;/li&gt;
&lt;li&gt;最近はWindowsがメインの開発環境のため、WQHDを選択&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-6&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;リモコンで操作できない（悪いというほどではない）

&lt;ul&gt;
&lt;li&gt;Nature Remoで操作できれば完璧だった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;補足-1&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;なぜかWQHDの製品はほとんど発売されていないので、選択肢はI-O DATAくらいしかありません。もっと色んなメーカーから発売して欲しいです。&lt;/p&gt;

&lt;p&gt;机が大きすぎて、モニターのスケール感が伝わりにくいと思ったので、キーボードとティッシュ箱と並べた様子です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/display.jpg&#34; alt=&#34;ディスプレイ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;モニターアーム&#34;&gt;モニターアーム&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/39pDucj&#34;&gt;エルゴトロン LX デスクマウント モニターアーム&lt;/a&gt;を使っています（2019/7～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00689HXI4&amp;linkId=3a2e16eee065f517d43c3742428d038b&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-7&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンサイズ：34インチまで、荷重範囲：3.2㎏から11.3㎏までなので、前述のWQHDのモニターでも余裕でホールドできる

&lt;ul&gt;
&lt;li&gt;2年以上使っているが、自重で落ちることはない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;昇降範囲:33cmなので、高めの位置でもホールドできる

&lt;ul&gt;
&lt;li&gt;ノートPCと併用して利用するときに便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;机を壁ギリギリまで配置できて空間が無駄にならない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/monitor-arm.jpg&#34; alt=&#34;モニターアーム&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ノイズキャンセリングヘッドホン&#34;&gt;ノイズキャンセリングヘッドホン&lt;/h2&gt;

&lt;p&gt;SONYのノイズキャンセリングヘッドホン&lt;a href=&#34;https://amzn.to/32NECE6&#34;&gt;WH-1000XM3&lt;/a&gt;を使っています（2019/2～）。&lt;/p&gt;

&lt;p&gt;G733を買ってから使用頻度は減りましたが、外出時にiPhoneで音楽を聞きたいときや、部屋でノイズキャンセリングが欲しい場面では使っています。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07GZ8DZC8&amp;linkId=b56ce3f9b6fc28eb3b74dee541fddb33&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-8&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ノイズキャンセリング性能が神

&lt;ul&gt;
&lt;li&gt;外したときに雑音が気になりすぎて、ノイズキャンセリングのない状態に戻れなくなるレベル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バッテリーが30時間くらい持つので、1日中使える

&lt;ul&gt;
&lt;li&gt;毎日、寝る前に充電して、朝から夜まで利用可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワイヤレスが最高すぎる

&lt;ul&gt;
&lt;li&gt;もう有線には戻れない&lt;/li&gt;
&lt;li&gt;そもそも最近のiPhoneはイヤホンジャックがない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有線でも利用可能なので、飛行機で映画を見るときにも使える&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-7&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;長時間利用すると圧迫感や蒸れが気になる

&lt;ul&gt;
&lt;li&gt;この製品の問題というより、ヘッドフォン自体の特徴&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マイクの性能が悪い

&lt;ul&gt;
&lt;li&gt;Bluetoohのコーデック上の問題かもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;音の遅延がある

&lt;ul&gt;
&lt;li&gt;Bluetoohのコーデック上の問題かもしれない&lt;/li&gt;
&lt;li&gt;音ゲーなどをする人は影響がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;イヤークッションの蒸れる-雑菌が繁殖する問題の解決&#34;&gt;イヤークッションの蒸れる・雑菌が繁殖する問題の解決&lt;/h3&gt;

&lt;p&gt;イヤークッションを交換し、カバーをかけることで緩和しました。&lt;/p&gt;

&lt;p&gt;レザーはアルコール消毒で痛むため、皮脂などの汚れを落とすことが難しく、そもそも肌に触れないように使用すべきというのが個人的な結論です。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082B4WPNS&amp;linkId=a3789b3da5ffd075781c51ec72b0be3d&#34;&gt;&lt;/iframe&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07QHD7S2L&amp;linkId=e3a29ddf7c8e907bf8d9230b1fabb928&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;pc&#34;&gt;PC&lt;/h2&gt;

&lt;p&gt;ドスパラのCore i7-9700K / RTX2070搭載のフルタワー型のPCを使っています。&lt;/p&gt;

&lt;h3 id=&#34;メモリを増設&#34;&gt;メモリを増設&lt;/h3&gt;

&lt;p&gt;メモリ32GBを追加し、合計48GBになりました（2021/3～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B093GNJS1T&amp;linkId=074f2b41d30705649bd2bb414c9c62df&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;メモリを48GBに増設！&lt;br&gt;&lt;br&gt;DDR4 3200Mhzのメモリだったが、&lt;br&gt;何も設定せずに2666Mhzで動作して良かった👍&lt;br&gt;&lt;br&gt;メモリの外装は深い赤色🧧&lt;br&gt;Amazonの写真よりかっこいい⭐️ &lt;a href=&#34;https://t.co/oVZsP7PS4x&#34;&gt;pic.twitter.com/oVZsP7PS4x&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1374223664846053378?ref_src=twsrc%5Etfw&#34;&gt;March 23, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;購入する前に互換性のチェックをしておくと買い物に失敗しません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マザーボードの型番を調べる&lt;/li&gt;
&lt;li&gt;メーカーページのメモリのサポート一覧（&lt;a href=&#34;https://www.asus.com/jp/Motherboards-Components/Motherboards/All-series/PRIME-B365-PLUS/HelpDesk_QVL/&#34;&gt;例&lt;/a&gt;）を参照し、購入予定のメモリがリストアップされていることを確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インターネット回線&#34;&gt;インターネット回線&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nuro.jp/hikari/&#34;&gt;NURO光&lt;/a&gt;は安くて速いので、3年以上引っ越す予定がなければ、個人的にはオススメできます。&lt;/p&gt;

&lt;p&gt;NURO光 for マンションに加入できる物件なら、月2500円程度なのでかなりコスパが良いです。
戸建てプランだと月5000円程度になってしまいます。&lt;/p&gt;

&lt;p&gt;月額料金とは別に4万円の工事費が30か月の分割払いになりますが、&lt;a href=&#34;https://www.hikari-au.net/nuro/install/fee&#34;&gt;途中解約しなければ実質無料&lt;/a&gt;になります。&lt;/p&gt;

&lt;p&gt;3年未満で解約してしまうと、残りの工事費用を一括で支払う必要があるので、割高になってしまう可能性があります。&lt;/p&gt;

&lt;p&gt;※この記事を鵜呑みにせず最新の情報を各自で調べてください。加入できるプランや条件は申し込み時期や物件ごとに変わりますし、料金プランが非常に複雑なのでこの記事では説明しません。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;NURO 光 for マンション開通記念🎉&lt;br&gt;この速度で月額税別2500円なのは強い😉 &lt;a href=&#34;https://t.co/ompihOEwY5&#34;&gt;pic.twitter.com/ompihOEwY5&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1228952083698569216?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;ファイアウォール機能-ipv6のspi機能の有効化&#34;&gt;ファイアウォール機能・IPv6のSPI機能の有効化&lt;/h3&gt;

&lt;p&gt;NURO光の契約時にレンタルできるZTE製ONU（F660A）のデフォルト設定にはセキュリティ上の問題があるため、ファイアウォール機能・IPv6のSPI機能を有効にして利用しています。詳しくは次の記事を参考にしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukimomiji.net/nuro-onu-f660a-firewall-setting/&#34;&gt;NURO光のONUのファイアウォール機能を有効にしたメモ | ゆきろぐ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lanケーブルをcat6aに変更&#34;&gt;LANケーブルをCat6Aに変更&lt;/h3&gt;

&lt;p&gt;PCとPS5用のLANケーブルをCat6Aに変更しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;LANケーブルを選ぶための有益情報です。&lt;br&gt;&lt;br&gt;・カテゴリ6A UTPを買いましょう。&lt;br&gt;・RJ-45のカテゴリ7は規格不適合品&lt;br&gt;・一般家庭でSTPケーブルが使えるようなアースを準備するのは非常に難しい&lt;br&gt;・カテゴリ7以上はSTPケーブルが必須&lt;br&gt;・カテゴリ7は家庭用には適しておらず非推奨&lt;a href=&#34;https://t.co/KnZqRiwdvG&#34;&gt;https://t.co/KnZqRiwdvG&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1360555713156640770?ref_src=twsrc%5Etfw&#34;&gt;February 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;買って失敗したモノ&#34;&gt;買って失敗したモノ&lt;/h1&gt;

&lt;p&gt;無駄な買い物の振り返りです。&lt;/p&gt;

&lt;h3 id=&#34;有線ヘッドセット&#34;&gt;有線ヘッドセット&lt;/h3&gt;

&lt;p&gt;個人的に有線は邪魔でした。&lt;/p&gt;

&lt;p&gt;G733（無線）を購入したので、G433（有線）は倉庫番になってしまいました。買い物を失敗したと思います。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B071GBFYT4&amp;linkId=2069d47e7e06263faacf71a9fda9568c&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;買い物が下手すぎる人の写真です。&lt;br&gt;&lt;br&gt;左から順に、&lt;br&gt;・SONY WH-1000XM3（bluetooth）&lt;br&gt;・Logicool G433（有線）&lt;br&gt;・Logicool G733（無線） &lt;a href=&#34;https://t.co/uapx5cXnKg&#34;&gt;pic.twitter.com/uapx5cXnKg&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356514427550400518?ref_src=twsrc%5Etfw&#34;&gt;February 2, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;無線マウス-1&#34;&gt;無線マウス&lt;/h3&gt;

&lt;p&gt;G703hは評判が良い製品でしたが、自分には合わなかったので3時間くらいで使わなくなりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マウスのホイールクリックが硬すぎる&lt;/li&gt;
&lt;li&gt;高さが大きすぎる（4.3cm）

&lt;ul&gt;
&lt;li&gt;「つまみ持ち・つかみ持ち」にはNG&lt;/li&gt;
&lt;li&gt;おそらく「かぶせ持ち」にはOK&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07SYKKP47&amp;linkId=d0aad011c54de02b7fac25b3a9bc447f&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;G703hという無線のマウスを購入しました！&lt;br&gt;&lt;br&gt;これまで使用していたマウスは壊れました… &lt;a href=&#34;https://t.co/Ayu9UCYjNj&#34;&gt;pic.twitter.com/Ayu9UCYjNj&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1372101400570732545?ref_src=twsrc%5Etfw&#34;&gt;March 17, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;キーボード&#34;&gt;キーボード&lt;/h3&gt;

&lt;p&gt;PC用のG913-TKLとPS5用のTK-FDM105TXBKしか使っていません。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;買い物が下手そう🤣 &lt;a href=&#34;https://t.co/szr0QZ0mPN&#34;&gt;pic.twitter.com/szr0QZ0mPN&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1401029798017654788?ref_src=twsrc%5Etfw&#34;&gt;June 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;番外編&#34;&gt;番外編&lt;/h1&gt;

&lt;p&gt;デスク周りではないですが、リモートワークの健康管理と生活、ステイホームに関連して買ってよかったモノの振り返りです。&lt;/p&gt;

&lt;h2 id=&#34;oculus-quest-2&#34;&gt;Oculus Quest 2&lt;/h2&gt;

&lt;p&gt;VRヘッドセットのOculus Quest 2を買いました（2020/10～）。&lt;/p&gt;

&lt;p&gt;HTC Viveからの乗り換えです。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B09B9F7439&amp;linkId=c81b9e4085271b5f91acbafd67a44d6e&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Oculus Quest 2、届きました！&lt;br&gt;予定より1日早いので嬉しい😆 &lt;a href=&#34;https://t.co/etooBjyPIn&#34;&gt;pic.twitter.com/etooBjyPIn&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1321634309778808833?ref_src=twsrc%5Etfw&#34;&gt;October 29, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Linkケーブル（USB-C to USB-A 3.0 ケーブル）は買ったけどまったく使わなかったので、買い物に失敗しました。&lt;/p&gt;

&lt;h3 id=&#34;良いポイント-9&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;完全ワイヤレスでPC VRが使える（Virtual Desktopを利用）

&lt;ul&gt;
&lt;li&gt;遅延なども感じない&lt;/li&gt;
&lt;li&gt;現在はAir Link（Oculus公式機能）で無線化できるらしいが未検証&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スタンドアローンでも動作する

&lt;ul&gt;
&lt;li&gt;運動不足解消のために毎日のBeat Saberが日課&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HTC Viveと比較

&lt;ul&gt;
&lt;li&gt;解像度が高い&lt;/li&gt;
&lt;li&gt;ベースステーションが不要

&lt;ul&gt;
&lt;li&gt;Nature RemoとHTC Viveのベースステーションが干渉していたので、個人的には大きなメリット&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;値段が安い

&lt;ul&gt;
&lt;li&gt;圧倒的コストパフォーマンス&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-8&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Facebookアカウントが必須

&lt;ul&gt;
&lt;li&gt;発売当初はFacebookアカウントがBANされて文鎮化した人が続出。大きな話題に&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.moguravr.com/oculus-quest-2-facebook-account-problem/&#34;&gt;Oculus Quest 2のアカウント凍結問題 Facebook側の回答は？【10月15日追記】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Quest 2 Eliteストラップは通常使用でヒビが入った

&lt;ul&gt;
&lt;li&gt;完全には壊れていないのでテープで補強して利用中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;裸眼で遊ぶためのレンズ&#34;&gt;裸眼で遊ぶためのレンズ&lt;/h3&gt;

&lt;p&gt;Quest2に限ったことではありませんが、VRヘッドセットは裸眼だと見えない問題があります。&lt;/p&gt;

&lt;p&gt;リーフツアラーの水中マスク用のレンズを買うことで完全に解決しました。レンズは左右で2枚購入する必要があるので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Oculus Quest2にリーフツアラーの水中マスクをぴったり装着できた！&lt;br&gt;&lt;br&gt;レンズ同士もぶつからないし、良さげな気がする。 &lt;a href=&#34;https://t.co/22yXqdBZZZ&#34;&gt;pic.twitter.com/22yXqdBZZZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1323188481930096640?ref_src=twsrc%5Etfw&#34;&gt;November 2, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01AJDQB6E&amp;linkId=afae8593e42afa3260c144f6bbe0fe3c&#34;&gt;&lt;/iframe&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01AJDQ84O&amp;linkId=e95e5fce8486be9ef3e034cfeb75b192&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;注意点としては、レザー製のクッションは素材が柔らかすぎるので、リーフツアラーの度付きレンズの固定ができませんでした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Quest2の接顔パーツのリコール手続きをしたら、&lt;br&gt;VR Coverのフェイスクッションが無料で送られてきました！&lt;br&gt;&lt;br&gt;Quest2付属品はウレタン製で硬かったのですが、こちらはレザー製で柔らかいですね☺️&lt;br&gt;&lt;br&gt;ただし、素材が柔らかすぎるので、リーフツアラーの度付きレンズの固定に工夫が必要かもしれません。 &lt;a href=&#34;https://t.co/WorRPtwW0c&#34;&gt;pic.twitter.com/WorRPtwW0c&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1367712944545361920?ref_src=twsrc%5Etfw&#34;&gt;March 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;ps5&#34;&gt;PS5&lt;/h2&gt;

&lt;p&gt;運良くPS5をAmazonで定価購入できました（2021/2～）。&lt;/p&gt;

&lt;p&gt;PS4所持者でもPS5を買って良かったと思いました。&lt;/p&gt;

&lt;h3 id=&#34;良かった点&#34;&gt;良かった点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;☓ボタンで決定に統一された&lt;/li&gt;
&lt;li&gt;ほとんどのPS4のソフトがそのまま遊べる

&lt;ul&gt;
&lt;li&gt;自分の購入ソフトでは『P.T.』以外は遊べた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PS4からのスペックアップを実感できる

&lt;ul&gt;
&lt;li&gt;PS4だとファンが唸るような高負荷なゲームでもPS5なら静かのケースが多い&lt;/li&gt;
&lt;li&gt;ゲームのロードが高速化される&lt;/li&gt;
&lt;li&gt;Marvel&amp;rsquo;s Spider-Man Remasteredのレイトレによる反射が綺麗&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;My new gear😍&lt;br&gt;&lt;br&gt;左から PS3/PS4/PS5 を並べたけど、PS5の存在感が強い😲 &lt;a href=&#34;https://t.co/d3ptsGWdtN&#34;&gt;pic.twitter.com/d3ptsGWdtN&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1359708607487430657?ref_src=twsrc%5Etfw&#34;&gt;February 11, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08JH72RMK&amp;linkId=2e308c3df692aaa581a1e82fd429fc8d&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;フォトモードのテスト &lt;a href=&#34;https://twitter.com/hashtag/PS5Share?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#PS5Share&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hashtag/MarvelsSpiderManRemastered?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#MarvelsSpiderManRemastered&lt;/a&gt; &lt;a href=&#34;https://t.co/zGS5HC0G6s&#34;&gt;pic.twitter.com/zGS5HC0G6s&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1426635820530683904?ref_src=twsrc%5Etfw&#34;&gt;August 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;マーベルスパイダーマンのリマスター版、完全トロコンしました！&lt;br&gt;あまり理不尽なトロフィーは無かったので楽しみながら取れました。 &lt;a href=&#34;https://twitter.com/hashtag/PS5Share?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#PS5Share&lt;/a&gt; &lt;a href=&#34;https://t.co/Ga26Cy4dZm&#34;&gt;pic.twitter.com/Ga26Cy4dZm&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1426635192094003200?ref_src=twsrc%5Etfw&#34;&gt;August 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪かった点&#34;&gt;悪かった点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PS5専用のソフトが現段階では少ない

&lt;ul&gt;
&lt;li&gt;実質的に高スペックなPS4という印象は拭えない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wifi体重計&#34;&gt;Wifi体重計&lt;/h2&gt;

&lt;p&gt;健康管理のために体重の自動記録ができるWifi体重計を買いました（2020/6～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Withings Body + 届きました。&lt;br&gt;&lt;br&gt;Withings Health Mateというアプリをインストールして指示に従って操作したら簡単に連携できました。&lt;br&gt;&lt;br&gt;リモートワークが長期化しているので、健康管理をやっていきます。 &lt;a href=&#34;https://t.co/b1DWIbHQir&#34;&gt;pic.twitter.com/b1DWIbHQir&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1409498054491721737?ref_src=twsrc%5Etfw&#34;&gt;June 28, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;!--
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B071LNJTVH&amp;linkId=24cfac29c3bae313168e3137860c8cd5&#34;&gt;&lt;/iframe&gt;
--&gt;

&lt;h3 id=&#34;良いポイント-10&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wifiで自動的に体重を記録できる

&lt;ul&gt;
&lt;li&gt;スマートフォンアプリと&lt;a href=&#34;https://healthmate.withings.com/&#34;&gt;Webサイト&lt;/a&gt;で時系列の確認ができる&lt;/li&gt;
&lt;li&gt;Bluetooth/NFCタイプの体重計は自動的に記録できないので、Wifiタイプが絶対に良い

&lt;ul&gt;
&lt;li&gt;以前はBluetooth/NFCタイプのオムロンの体重体組成計 HBF-254C『カラダスキャン』を使っていたが、アプリとの通信の手間が必要で面倒だった…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デザインが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;上位機種のwithings-body-cardio&#34;&gt;上位機種のWithings Body Cardio&lt;/h3&gt;

&lt;p&gt;上位機種の&lt;a href=&#34;https://amzn.to/3kcpuJz&#34;&gt;Withings Body Cardio&lt;/a&gt;はデザインが個人的に好みではなかったので、このWithings Body +にしました。基本的な機能はWithings Body +で揃っているので満足しています。&lt;/p&gt;

&lt;h2 id=&#34;冷凍庫&#34;&gt;冷凍庫&lt;/h2&gt;

&lt;p&gt;自炊はしない独身男性なので冷凍食品が主食です。&lt;/p&gt;

&lt;p&gt;冷凍食品をまとめ買いするため、冷凍庫が73Lの&lt;a href=&#34;https://amzn.to/3y6kv21&#34;&gt;ツインバード ハーフ＆ハーフ&lt;/a&gt;を買いました（2021/6～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B076Y4LS14&amp;linkId=55a42452ce98f4e480ba1501034ed97a&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;都内在住なので東京ゼロエミポイントとして11,000円相当のギフト券も受け取れました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;細かい注意点としては家電リサイクル券が必要ということくらいですかね。&lt;br&gt;&lt;br&gt;新規購入は対象外（買い替えが対象）のと、家電リサイクル法に従ってリサイクルする必要があります。&lt;br&gt;&lt;br&gt;きちんとリサイクル回収してくれるお店で家電を購入すれば問題ないと思います。&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1418440143245955073?ref_src=twsrc%5Etfw&#34;&gt;July 23, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;※Amazonのマーケットプレイスでは設置やリサイクル回収をしてくれない場合があるので、大手の家電量販店（オンラインサイトも含む）での購入を推奨します。&lt;/p&gt;

&lt;p&gt;※東京ゼロエミポイントの申請には「家電リサイクル券（排出者控え）」が必須なので、古い冷蔵庫を家電リサイクル法に基づいて正しくリサイクルする必要があります。注意しましょう。&lt;/p&gt;

&lt;p&gt;私は楽天市場のJoshin webで注文し、古い冷蔵庫のリサイクル回収を依頼しました。&lt;/p&gt;

&lt;h3 id=&#34;良いポイント-11&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;省エネ基準達成率:101%

&lt;ul&gt;
&lt;li&gt;前述の東京ゼロエミポイントの対象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;冷凍庫が広いので、冷凍食品を買いだめるという目的は達成

&lt;ul&gt;
&lt;li&gt;冷蔵室:73L&lt;/li&gt;
&lt;li&gt;冷凍室:73L&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自動霜取り機能がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;優先度&#34;&gt;優先度&lt;/h1&gt;

&lt;p&gt;予算が限られているなら、この順番で買うと費用対効果が高そうというランキングです（完全に個人の主観）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;椅子&lt;/li&gt;
&lt;li&gt;モニター&lt;/li&gt;
&lt;li&gt;ヘッドセット&lt;/li&gt;
&lt;li&gt;机&lt;/li&gt;
&lt;li&gt;キーボード&lt;/li&gt;
&lt;li&gt;マウス&lt;/li&gt;
&lt;li&gt;Webカメラ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;椅子とモニターは作業効率に大きく影響しそうなので、この2つだけはしっかりしたものを選ぶといいのではないかと思います。&lt;/p&gt;

&lt;p&gt;ヘッドセットもマイクの調子が悪いとオンライン会議の相手にストレスを与えてしまうので、なるべく良いものが好ましそうですね。&lt;/p&gt;

&lt;h1 id=&#34;さいごに&#34;&gt;さいごに&lt;/h1&gt;

&lt;p&gt;気がつくと異常にLogicool製品が増えました。Logicool信者ではないですが、製品の質に安定感があり、幅広いラインナップを取り揃えているので、PC機器のブランド統一するなら有力な選択肢かなと思います。&lt;/p&gt;

&lt;p&gt;G HUBの使い勝手が微妙だったり、稀にフリーズすることがあるので、今後のソフトウェアアップデートに期待しています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>『Unityゲーム プログラミング・バイブル 2nd Generation』のレイマーチングとTimelineの章を執筆しました</title>
      <link>https://gam0022.net/blog/2021/06/08/unity-bible2/</link>
      <pubDate>Tue, 08 Jun 2021 10:30:19 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/06/08/unity-bible2/</guid>
      <description>&lt;p&gt;6/29発売の&lt;a href=&#34;https://amzn.to/3oe2agf&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』&lt;/a&gt;を執筆しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/Collage_Fotor.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/Collage_Fotor.jpg&#34; alt=&#34;『Unityゲーム プログラミング・バイブル 2nd Generation』&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』について、公式ページから紹介文を引用します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unityのゲーム開発現場で最も使われた決定版書籍が、大幅バージョンアップして登場!&lt;/strong&gt;
&lt;strong&gt;ゲームの開発現場で即実践できるスキルが身につく!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本書は、ゲーム開発で最も使われている「Unity」の入門や初級レベルを卒業した方向けの書籍です。ゲームの開発現場で、即実践できるスキルが身につくように、&lt;strong&gt;「37」の最新のトピックを網羅&lt;/strong&gt;しました。&lt;/p&gt;

&lt;p&gt;本書には、第一線の現場で活躍している23名の著者陣が参加しており、ゲーム開発のノウハウやTipsが満載されています。またほとんどのトピックでは、サンプルゲームがダウンロードでき、実際に動かしながら、実践的に学んでいくことが可能です。&lt;/p&gt;

&lt;p&gt;Unityでのゲーム開発のさまざまな場面で、すぐに役立つ1冊となっています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--
![Unityゲーム プログラミング・バイブル 2nd Generation](/images/posts/2021-05-27-unity-bible2/Collage_Fotor.jpg)
--&gt;

&lt;p&gt;37のトピックのうち、私は次の2つを担当しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチング：基礎から応用まで&lt;/li&gt;
&lt;li&gt;Timelineによる映像制作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事では私の担当した内容を簡単に紹介します。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation 』を執筆しました！&lt;br&gt;6/29発売です！&lt;br&gt;&lt;br&gt;・レイマーチング：基礎から応用まで&lt;br&gt;・Timelineによる映像制作&lt;br&gt;&lt;br&gt;の2本を担当しました。&lt;a href=&#34;https://t.co/lYWIxseCON&#34;&gt;https://t.co/lYWIxseCON&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1392725305526161411?ref_src=twsrc%5Etfw&#34;&gt;May 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;レイマーチング-基礎から応用まで&#34;&gt;レイマーチング：基礎から応用まで&lt;/h1&gt;

&lt;div style=&#34;display: flex;&#34;&gt;
    &lt;div style=&#34;width: 50%;&#34;&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg&#34; alt=&#34;サンプル11 距離関数の応用：無限複製編&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style=&#34;width: 50%;&#34;&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg&#34; alt=&#34;サンプル13 距離関数の応用：無限複製とブーリアン演算の合せ技&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;!--
![サンプル11 距離関数の応用：無限複製編](/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg)
![サンプル13 距離関数の応用：無限複製とブーリアン演算の合せ技](/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg)
--&gt;

&lt;p&gt;このセクションでは「レイマーチング」という手法により、グラフィックスを描画する仕組みを紹介しました。&lt;/p&gt;

&lt;p&gt;レイマーチングと似た名前の手法にレイトレーシングがありますが、どちらもレイ、つまり光線をプログラムでシミュレーションしてカメラに映る画像を生成する手法です。&lt;/p&gt;

&lt;p&gt;レイマーチングでは、距離関数という数式で定義した形状に対して、レイとの交差判定を行うことで照明や反射などの計算を行います。
そのため、通常のUnityの描画パイプラインではできないような表現が可能になるということが特徴です。&lt;/p&gt;

&lt;p&gt;このセクションでは、Unityのシェーダーのコードを記述してレイマーチングを実装します。
レイマーチングの基礎から応用まで解説するために、合計13個のサンプルシーンを用意しました。
少しずつ処理を加えることで、一歩ずつレベルアップしながら理解を深められるチュートリアル形式のサンプルシーンになっています。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトは、筆者のGitHubにて公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/UnityBible2-RaymarchingTutorial&#34;&gt;https://github.com/gam0022/UnityBible2-RaymarchingTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このセクションで学べることとそのポイントを、以下にまとめておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチングのアルゴリズムと本質

&lt;ul&gt;
&lt;li&gt;レイマーチングは魔法の道具ではなく、単なる衝突判定の手法&lt;/li&gt;
&lt;li&gt;数式（距離関数）によるプロシージャルなモデリング手法&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンピュータグラフィックスの基礎

&lt;ul&gt;
&lt;li&gt;レイマーチングが扱う範囲はあくまで衝突判定&lt;/li&gt;
&lt;li&gt;ライティングは通常のシェーダーとまったく同じように実装する必要がある&lt;/li&gt;
&lt;li&gt;Unityエンジンのシーンやライティング機能を利用せずに、グラフィックスを描画する一連の流れを学べるため、コンピュータグラッフィックスの学習教材としても有用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;執筆の裏話&#34;&gt;執筆の裏話&lt;/h2&gt;

&lt;p&gt;執筆の裏話としては作図にレイマーチングを利用しました。&lt;/p&gt;

&lt;p&gt;よくあるレイトレーシングの原理（スクリーン上のピクセルに対応する向きのレイを飛ばして交差判定）を解説するための図が欲しかったので、レイマーチングで作図しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;シェーダーは最強の作図ツールなので、&lt;br&gt;レイトレーシングの原理を説明するための図をUnityシェーダーだけで作りました。 &lt;a href=&#34;https://t.co/VuLBhoqEaY&#34;&gt;pic.twitter.com/VuLBhoqEaY&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1343070779961839617?ref_src=twsrc%5Etfw&#34;&gt;December 27, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ちゃんとアニメーションもできるように作り込んだのですが、書籍だと静止画になってしまうのが残念ですね。&lt;/p&gt;

&lt;h1 id=&#34;timelineによる映像制作&#34;&gt;Timelineによる映像制作&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/00_Top.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/00_Top.jpg&#34; alt=&#34;Timelineによる映像制作&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このセクションでは、Unityの&lt;a href=&#34;https://docs.unity3d.com/ja/2019.2/Manual/TimelineOverview.html&#34;&gt;Timeline&lt;/a&gt;を利用した映像作品の制作について解説しました。&lt;/p&gt;

&lt;p&gt;このセクションで学べる項目は、以下の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hecomi/uRaymarching&#34;&gt;uRaymarching&lt;/a&gt;を利用したレイマーチング&lt;/li&gt;
&lt;li&gt;Post-processing Stackの導入からビルトインエフェクトの利用、カスタムエフェクトの作成まで&lt;/li&gt;
&lt;li&gt;Timelineの基本からカスタムトラックの作成まで&lt;/li&gt;
&lt;li&gt;Cinemachineの基本的な使い方から、Post-processing Stackとの連携まで&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
このセクションのサンプルシーンは、以下の各バージョンで作成しています。

- Unity 2020.1.8f1
- uRaymarching: v2.1.1
- Post-processing Stack（v2）2.3.0
- Timeline 1.3.6
- Cinemachine 2.6.3
- TextMeshPro 3.0.3
- Unity Recorder 2.5.2
--&gt;

&lt;p&gt;映像の作成のためには、数多くのUnityの機能とAssetを組み合わせる必要があります。&lt;/p&gt;

&lt;p&gt;それぞれのUnityの機能とAssetにフォーカスを当てた合計12個のサンプルシーンを用意しました。
サンプルシーンはチュートリアル形式で、一歩ずつレベルアップしながら理解を深められるようになっています。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトは、筆者のGitHubで公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/UnityBible2-TimelineTutorial&#34;&gt;https://github.com/gam0022/UnityBible2-TimelineTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/12_BeatSync.gif&#34; alt=&#34;サンプル12 音楽と同期して演出をブラッシュアップ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;執筆の裏話-1&#34;&gt;執筆の裏話&lt;/h2&gt;

&lt;p&gt;これも執筆の裏話になりますが、&lt;strong&gt;デモのメイキングを書籍として出版する&lt;/strong&gt; という個人的な試みに今回はチャレンジしました。&lt;/p&gt;

&lt;p&gt;このツイートが伏線でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;RevisionのWriteup先には意外な &amp;quot;媒体&amp;quot; を予定しています&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1379103521409101826?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;サンプルの完成形のデモが『Secret stage BOSS』です。Revision2021のPC Demo Compoで初リリースしました。&lt;/p&gt;

&lt;p&gt;グラフィックスは私（&lt;a href=&#34;https://twitter.com/gam0022/&#34;&gt;@gam0022&lt;/a&gt;）、サウンドはさだきちさん（&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;）が担当しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Secret stage BOSS&amp;quot; by &lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/sadakkey?ref_src=twsrc%5Etfw&#34;&gt;@sadakkey&lt;/a&gt;&lt;br&gt;&lt;br&gt;Our new PC Demo for &lt;a href=&#34;https://twitter.com/hashtag/Revision2021?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Revision2021&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/revision_party?ref_src=twsrc%5Etfw&#34;&gt;@revision_party&lt;/a&gt;)&lt;br&gt;&lt;br&gt;It&amp;#39;s a Massive Greetings to &amp;quot;2nd stage BOSS&amp;quot; &lt;a href=&#34;https://t.co/vVWJJB4cyS&#34;&gt;pic.twitter.com/vVWJJB4cyS&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1378967812463501313?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;『Secret stage BOSS』は&lt;a href=&#34;https://youtu.be/SFoyJED5A4s&#34;&gt;『2nd stage BOSS by 0x4015&amp;amp;YET11』&lt;/a&gt;というデモシーン歴史に残る伝説級のデモのオマージュ作品です。&lt;/p&gt;

&lt;p&gt;自機やボスが登場するシューティングゲーム風のストーリーを、自分たちなりのビジュアルと音楽のスタイルで再現しました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/srO7IxNckZ8&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;GitHub上でUnityプロジェクトを丸ごと公開しているので、もし興味があれば参考にしてください。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;You can see the source code &amp;amp; Unity project on GitHub!&lt;br&gt;&lt;br&gt;ソースコードとUnityプロジェクトをGitHubで公開しました！&lt;a href=&#34;https://t.co/dQJV35DGKB&#34;&gt;https://t.co/dQJV35DGKB&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1378975301456130049?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;6年前にレイマーチングと出会ってから、レイマーチングの面白さに魅せられ続け、レイマーチングに関するさまざまな情報を発信してきました。
今回、Unityの一般ユーザー向けの書籍でレイマーチングについて解説をする機会をいただけたことをとても光栄に思います。
これまでシェーダーと縁がなかった方にもシェーダーに興味をもってもらえれば幸いです。&lt;/p&gt;

&lt;p&gt;日本語で書かれたレイマーチングの入門情報はかなり充実してきましたが、その次のステップの情報が不足しているように感じていました。
本書ではレイマーチングの中級者向けの情報として、距離関数によるモデリングや本格的なライティングまで解説しました。
レイマーチングで球体のレンダリングはできたけど、その次のステップが分からないという方にぜひ読んでいただきたいです。&lt;/p&gt;

&lt;p&gt;本書は定価8580円と気軽に購入しづらいかもしれませんが、&lt;strong&gt;フルカラーの1112ページ、扱うテーマの広さ、得られる情報の密度&lt;/strong&gt;を踏まえると妥当（むしろお買い得！）な値段だと思います。
初版部数はAmazonでの予約数をもとに決まるそうなので、ぜひ&lt;a href=&#34;https://amzn.to/3oe2agf&#34;&gt;Amazonから予約&lt;/a&gt;をお願いします！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;リアルタイムレンダリング 第4版よりもページ数が多いことに気がついて驚いています。 &lt;a href=&#34;https://t.co/zJGUYOm8XL&#34;&gt;https://t.co/zJGUYOm8XL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1393040315762634755?ref_src=twsrc%5Etfw&#34;&gt;May 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;追記-2021-08-21&#34;&gt;追記（2021-08-21）&lt;/h1&gt;

&lt;p&gt;7/29の「Unityゲーム プログラミング・バイブル 2nd Generation 出版記念トーク グラフィックス編」にゲスト出演しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://learning.unity3d.jp/7437/&#34;&gt;Unityゲーム プログラミング・バイブル 2nd Generation 出版記念トーク グラフィックス編&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>お名前.comからGoogleドメインに乗り換えました（2021版）</title>
      <link>https://gam0022.net/blog/2021/05/06/onamae-com-to-google-domain/</link>
      <pubDate>Thu, 06 May 2021 02:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/05/06/onamae-com-to-google-domain/</guid>
      <description>&lt;p&gt;当サイト（&lt;a href=&#34;http://gam0022.net/&#34;&gt;gam0022.net&lt;/a&gt;）のドメイン管理の事業者を&lt;a href=&#34;https://www.onamae.com/&#34;&gt;お名前.com&lt;/a&gt;から&lt;a href=&#34;https://domains.google/intl/ja_jp/&#34;&gt;Googleドメイン&lt;/a&gt;に移管しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-05-onamae-com-to-google-domain/transfer.png&#34; alt=&#34;お名前.comからGoogleドメインに移管&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ドメイン移管は思ったよりもずっと簡単で待ち時間を含めても1時間以内に完了しました。&lt;/p&gt;

&lt;p&gt;この程度の手間だったら、もっと早くやっておけば良かったです。&lt;/p&gt;

&lt;p&gt;移管するとドメインの更新日が1年延長されて、Googleドメインに1年分のドメイン費用を支払う形になります。&lt;/p&gt;

&lt;p&gt;つまり、&lt;strong&gt;お名前.comの更新日はずっと先の日付だろうと問題なく移管できます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当サイトのドメインの更新日は2028年で7年後くらいでした。&lt;/p&gt;

&lt;h1 id=&#34;移管手順&#34;&gt;移管手順&lt;/h1&gt;

&lt;p&gt;せっかくなので簡単に手順をメモしておきます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;お名前.comでドメインのロック解除

&lt;ul&gt;
&lt;li&gt;ドメイン設定 &amp;gt; その他の機能 &amp;gt; ドメイン移管ロック&lt;/li&gt;
&lt;li&gt;移管したいドメインのステータスが「OFF」になっていたら問題ありません&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お名前.comでAuthコードを入手

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.onamae.com/guide/p/80&#34;&gt;ドメイン詳細&lt;/a&gt;からAuthコードの[表示]ボタンを押すと表示されます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Googleドメインでドメイン移管手続き

&lt;ul&gt;
&lt;li&gt;必要な情報を入力して進めるだけでOKです。とくに悩む要素はないと思います

&lt;ul&gt;
&lt;li&gt;移管したいドメイン&lt;/li&gt;
&lt;li&gt;Authコード&lt;/li&gt;
&lt;li&gt;支払い用クレジットカード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お名前.comでドメイン移管を承認

&lt;ul&gt;
&lt;li&gt;私の場合、Googleドメイン上の操作から &lt;strong&gt;30分くらい経過してから&lt;/strong&gt; 「【重要】トランスファー申請に関する確認のご連絡 gam0022.net」というメールが来ました&lt;/li&gt;
&lt;li&gt;メールのURLから承認ボタンを押せば作業完了です&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;AレコードやAAAAレコードなどのDNS設定も自動で引き継がれていました。&lt;/p&gt;

&lt;p&gt;サブドメインの設定までは引き継がれなかったので手動で再設定する必要がありました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;お名前comからGoogleドメインに乗り換えた。&lt;br&gt;Aレコードなどの設定は自動で引き継がれており、有能だなぁ。 &lt;a href=&#34;https://t.co/utmwAwougz&#34;&gt;pic.twitter.com/utmwAwougz&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1387671139170754563?ref_src=twsrc%5Etfw&#34;&gt;April 29, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考記事&#34;&gt;参考記事&lt;/h2&gt;

&lt;p&gt;こちらの記事に画像つきで手順が書かれています。この記事が分かりにくかったら参考にすると良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/fnifni/items/0daca17e0750659f2866&#34;&gt;お名前comからgoogle domainsにドメイン移管する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;移管した理由&#34;&gt;移管した理由&lt;/h1&gt;

&lt;p&gt;GMO社員の方もこのブログを見ることがあるかもしれないので、お名前.comを解約した理由を記しておきます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;お名前.comからの迷惑メールが多すぎる&lt;/li&gt;
&lt;li&gt;UIが使いづらい&lt;/li&gt;
&lt;li&gt;経済的理由&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-お名前-comからの迷惑メールが多すぎる&#34;&gt;1. お名前.comからの迷惑メールが多すぎる&lt;/h2&gt;

&lt;p&gt;1.は業界では有名な評判ですね。お名前.comからの迷惑メールは本当に多すぎます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tk-create.com/domain/onamae-com-mail-stop/&#34;&gt;お知らせメールを受信しない設定&lt;/a&gt;でしたが、「gam0022.netの期限日を定期的にご確認ください。」というメールが来ました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新日は7年後の2028年でしたが、「お知らせメールの受信設定が無効となっている方にも配信されております。」とのことです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;温厚な私でも流石にイラッとしました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;お知らせメールの受信設定が無効となっている方にも配信されております。&lt;br&gt;&lt;br&gt;じゃあないんだよ &lt;a href=&#34;https://t.co/RgkauLvEtX&#34;&gt;pic.twitter.com/RgkauLvEtX&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1387313503879368705?ref_src=twsrc%5Etfw&#34;&gt;April 28, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-uiが使いづらい&#34;&gt;2. UIが使いづらい&lt;/h2&gt;

&lt;p&gt;2.もひどいと思います。使用頻度のもっとも高いであろうDNS設定がなぜかメニューの深い階層に埋もれていて使いづらいです。
対照的にGoogleドメインはメニューがシンプルで使いやすいと感じました。&lt;/p&gt;

&lt;h2 id=&#34;3-経済的理由&#34;&gt;3. 経済的理由&lt;/h2&gt;

&lt;p&gt;3.については誤差でしたが、1年間の.netのドメインの料金を比較すると、Googleドメインの方が88円だけ節約できました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;サービス名&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1年間の費用（税込）&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1年間の費用（税別）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;お名前.com&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1628円&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1480円&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Googldドメイン&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1540円&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1400円&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;補足すると、お名前.comでは初年度は安く、2年目以降に値上がりします。&lt;/p&gt;

&lt;p&gt;1年目は35円と激安なのですが、2年目以降は上記の更新料がかかります。詳細はこちらを見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.onamae.com/service/d-price/&#34;&gt;ドメインの料金・種類一覧｜ドメイン取るならお名前.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;お名前-comの初年度が激安な件&#34;&gt;お名前.comの初年度が激安な件&lt;/h3&gt;

&lt;p&gt;この手法はあまり推奨しないほうが良いと思いますが…&lt;/p&gt;

&lt;p&gt;ほとんどの&lt;a href=&#34;https://help.onamae.com/answer/8577&#34;&gt;ドメインの取得から60日経過すれば移管できる&lt;/a&gt;ようになります。&lt;/p&gt;

&lt;p&gt;お名前.comは初年度がありえないほど安いので、ドメインの取得だけお名前.comで行なって、60日経過後に他社に移管することでコストを最小化できそうな気がしています。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;冒頭で述べたとおり、1時間もあればドメインの移管はできました。
お名前.comの迷惑メールに困っている方は、Googleドメインに乗り換えてみてはいかがでしょうか？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

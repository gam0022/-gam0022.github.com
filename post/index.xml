<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on gam0022.net</title>
    <link>https://gam0022.net/post/index.xml</link>
    <description>Recent content in Post-rsses on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2021 gam0022</copyright>
    <lastBuildDate>Thu, 23 Dec 2021 10:00:00 +0900</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Unity][URP] Y軸ビルボードシェーダー</title>
      <link>https://gam0022.net/blog/2021/12/23/unity-urp-billboard-shader/</link>
      <pubDate>Thu, 23 Dec 2021 10:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/12/23/unity-urp-billboard-shader/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://qiita.com/advent-calendar/2021/unity&#34;&gt;Unity Advent Calendar 2021&lt;/a&gt;の23日目の記事です。&lt;/p&gt;

&lt;p&gt;前日は&lt;a href=&#34;https://twitter.com/UnagiHuman&#34;&gt;@UnagiHuman&lt;/a&gt;さんの&lt;a href=&#34;https://qiita.com/UnagiHuman/items/7db6c75adea0d5862acf&#34;&gt;「Unityの新MeshAPIでMeshColliderをリアルタイム変形させる」&lt;/a&gt;でした。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こんな感じのY軸のビルボードをC#スクリプトを使わずに、シェーダーだけで実装しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/Unity-URP-Billboard-trim.gif&#34; alt=&#34;Y軸ビルボード&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHubリポジトリ: &lt;a href=&#34;https://github.com/gam0022/unity-urp-shader&#34;&gt;gam0022/unity-urp-shader&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;要約&#34;&gt;要約&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;シェーダーだけでY軸ビルボードを実装&lt;/li&gt;
&lt;li&gt;UnityのURP対応&lt;/li&gt;
&lt;li&gt;回転行列を生成するアプローチなので、プラットフォーム間の違い（Zの方向やUVの上下など）による問題が起きない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;シェーダーで実装するメリット&#34;&gt;シェーダーで実装するメリット&lt;/h1&gt;

&lt;p&gt;シェーダーでビルボードを計算するメリットはたくさんあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C#スクリプトが不要でシェーダーだけで動作する

&lt;ul&gt;
&lt;li&gt;シェーダーのポータビリティは高い！&lt;/li&gt;
&lt;li&gt;かつてのVRCのようにユーザスクリプトが書けない環境でも使える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;シーンビュー上でも動作する&lt;/li&gt;
&lt;li&gt;GPU（頂点シェーダー）でビルボード計算ができる

&lt;ul&gt;
&lt;li&gt;ビルボード計算のためのCPU負荷が0&lt;/li&gt;
&lt;li&gt;板ポリの頂点数は4なので、頂点シェーダーで多少重い処理をしても、GPU負荷への影響はわずか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;シェーダーのコード-全体&#34;&gt;シェーダーのコード（全体）&lt;/h1&gt;

&lt;p&gt;最終的なシェーダーのコードはこちらです。&lt;/p&gt;

&lt;p&gt;単体で動作するので、コピペして使えます。MITライセンスです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// URP-Unlit-Billboard Shader by @gam0022 (MIT Licence)
// https://gam0022.net//blog/2021/12/23/unity-urp-billboard-shader/
Shader &amp;quot;Universal Render Pipeline/Unlit-Billboard&amp;quot;
{
    Properties
    {
        _BaseMap (&amp;quot;Base Map&amp;quot;, 2D) = &amp;quot;white&amp;quot; { }
        _BaseColor (&amp;quot;Base Color&amp;quot;, Color) = (1, 1, 1, 1)
        _Cutoff (&amp;quot;Alpha Cutoff&amp;quot;, Range(0, 1)) = 0.5
    }

    SubShader
    {
        Tags {
            &amp;quot;RenderPipeline&amp;quot; = &amp;quot;UniversalPipeline&amp;quot;
            &amp;quot;RenderType&amp;quot; = &amp;quot;TransparentCutout&amp;quot;
            &amp;quot;Queue&amp;quot; = &amp;quot;AlphaTest&amp;quot;
            &amp;quot;IgnoreProjector&amp;quot; = &amp;quot;True&amp;quot;
        }

        Pass
        {
            Tags { &amp;quot;LightMode&amp;quot; = &amp;quot;UniversalForward&amp;quot; }

            HLSLPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            #include &amp;quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl&amp;quot;

            struct Attributes
            {
                float4 positionOS: POSITION;
                float2 uv: TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionHCS: SV_POSITION;
                float2 uv: TEXCOORD0;
            };

            sampler2D _BaseMap;

            CBUFFER_START(UnityPerMaterial)
            float4 _BaseMap_ST;
            half4 _BaseColor;
            half _Cutoff;
            CBUFFER_END

            Varyings vert(Attributes IN)
            {
                Varyings OUT;

                // 回転行列を生成してビルボード処理をします
                float3 yup = float3(0.0, 1.0, 0.0);
                float3 up = mul((float3x3)unity_ObjectToWorld, yup);

                float3 worldPos = unity_ObjectToWorld._m03_m13_m23;
                float3 toCamera = _WorldSpaceCameraPos - worldPos;
                float3 right = normalize(cross(toCamera, up)) * length(unity_ObjectToWorld._m00_m10_m20);
                float3 forward = normalize(cross(up, right)) * length(unity_ObjectToWorld._m02_m12_m22);

                float4x4 mat = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1,
                };
                mat._m00_m10_m20 = right;
                mat._m01_m11_m21 = up;
                mat._m02_m12_m22 = forward;
                mat._m03_m13_m23 = worldPos;

                float4 vertex = float4(IN.positionOS.xyz, 1);
                vertex = mul(mat, vertex);
                OUT.positionHCS = mul(UNITY_MATRIX_VP, vertex);

                OUT.uv = TRANSFORM_TEX(IN.uv, _BaseMap);
                return OUT;
            }

            half4 frag(Varyings IN): SV_Target
            {
                half4 base = tex2D(_BaseMap, IN.uv);
                clip(base.a - _Cutoff);
                return base * _BaseColor;
            }
            ENDHLSL

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;解説&#34;&gt;解説&lt;/h1&gt;

&lt;h2 id=&#34;前回の記事との違い&#34;&gt;前回の記事との違い&lt;/h2&gt;

&lt;p&gt;この記事は&lt;a href=&#34;https://gam0022.net/blog/2019/07/23/unity-y-axis-billboard-shader/&#34;&gt;前回の記事（[Unity] Y軸ビルボードシェーダーの実装と解説）&lt;/a&gt;の改訂版です。以下のような違いがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URP（Universal Render Pipeline）に対応&lt;/li&gt;
&lt;li&gt;ビルボード処理のアプローチを改良（プラットフォーム依存をなくす）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;前回の記事-ビュー変換をスキップ-の欠点&#34;&gt;前回の記事（ビュー変換をスキップ）の欠点&lt;/h3&gt;

&lt;p&gt;以前の記事では、カメラのビュー行列の変換をスキップすることで、ビルボード処理を実装していました。&lt;/p&gt;

&lt;p&gt;Unityではプラットフォーム間の違い（Zの方向やUVの上下など）をビュー行列とプロジェクション行列でうまく吸収する設計になっており、ビュー行列の変換をスキップするとプラットフォームの対応を自力で行う必要が出てきて、かなり面倒でした。
面倒なだけならまだいいのですが、将来的に新しいプラットフォームが増えた時などにシェーダーの修正が必要になる可能性もあり、このアプローチは筋が良くないな、と記事の公開後に思っていました。&lt;/p&gt;

&lt;p&gt;この記事で紹介する &lt;strong&gt;回転行列を生成するアプローチ&lt;/strong&gt; では、そのような面倒な問題が起きません。&lt;/p&gt;

&lt;h2 id=&#34;回転行列を生成するアプローチ&#34;&gt;回転行列を生成するアプローチ&lt;/h2&gt;

&lt;p&gt;Unityが生成するモデル行列を使わずに、頂点シェーダーの中でうまく回転行列を生成することで、ビルボード処理を実現します。&lt;/p&gt;

&lt;p&gt;シェーダーからビルボード処理を抜き出して、できるだけコメントを入れました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 回転行列を生成してビルボード処理をします

// Y-UPベクトル
float3 yup = float3(0.0, 1.0, 0.0);

// up = Y軸の基底ベクトル
// オブジェクトのTransformの回転を考慮する
float3 up = mul((float3x3)unity_ObjectToWorld, yup);

// オブジェクトのワールド座標
float3 worldPos = unity_ObjectToWorld._m03_m13_m23;

// オブジェクトからカメラに向かうベクトル
float3 toCamera = _WorldSpaceCameraPos - worldPos;

// right = X軸の基底ベクトル
// 前半の項 : rightはtoCameraとupの両方に直交するので、crossから計算できる
// 後半の項 : オブジェクトのTransformのX方向のスケールを考慮
float3 right = normalize(cross(toCamera, up)) * length(unity_ObjectToWorld._m00_m10_m20);

// forward = Z軸の基底ベクトル
// 前半の項 : forwardはupとrightの両方に直交するので、crossから計算できる
// 後半の項 : オブジェクトのTransformのZ方向のスケールを考慮
float3 forward = normalize(cross(up, right)) * length(unity_ObjectToWorld._m02_m12_m22);

// 各基底ベクトルを並べてビルボード用の回転行列を生成
// （厳密には平行移動とスケールも含んだ変換行列）
float4x4 mat = {
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1,
};
mat._m00_m10_m20 = right;//     X軸の基底ベクトル
mat._m01_m11_m21 = up;//        Y軸の基底ベクトル
mat._m02_m12_m22 = forward;//   Z軸の基底ベクトル
mat._m03_m13_m23 = worldPos;//  平行移動のベクトル


// ローカル座標（平行移動のためにw=1）
float4 vertex = float4(IN.positionOS.xyz, 1);

// ビルボード用の回転行列を乗算してワールド空間に変換
vertex = mul(mat, vertex);

// ビュー行列とプロジェクション行列を乗算してクリップ空間に変換
OUT.positionHCS = mul(UNITY_MATRIX_VP, vertex);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは超重要情報ですが、 &lt;strong&gt;回転後の空間の基底ベクトルを並べた行列が回転行列になります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これだけ覚えておけば、回転だけでなく、拡大縮小やSkew（せん断）の行列は自然に導出できます。&lt;/p&gt;

&lt;p&gt;知らなかった人はぜひ覚えておきましょう。CEDECで同じ話を2回くらいしています（&lt;a href=&#34;https://www.klab.com/jp/blog/creative/2020/cedec2020.html&#34;&gt;2020&lt;/a&gt;と&lt;a href=&#34;https://www.klab.com/jp/blog/tech/2021/cedec-kyushu-2021-online-3d.html&#34;&gt;2021&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/kec2-1.png&#34; alt=&#34;基底ベクトルをイメージすればOK&#34; /&gt;
&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/kec2-2.png&#34; alt=&#34;回転ベクトル1&#34; /&gt;
&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/kec2-3.png&#34; alt=&#34;回転ベクトル2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;srp-batcher&#34;&gt;SRP Batcher&lt;/h2&gt;

&lt;p&gt;URP（SRP）からSRP Batcherというドローコールバッチング（厳密にはドローコールの数を減らすわけではなく、ドローコール間のGPUの設定コストを削減）の仕組みが導入されました。&lt;/p&gt;

&lt;p&gt;以前のビルドインレンダーパイプラインのドローコールバッチングではMeshが結合されるので、ビルボードのように特殊な頂点変換をするシェーダーでは考慮が必要で、けっこう面倒でした。&lt;/p&gt;

&lt;p&gt;SRP BatcherはMeshを結合しないので、頂点変換で特別な考慮をしなくてもシェーダーが動くようになりました！めでたい🎉&lt;/p&gt;

&lt;p&gt;今回のシェーダーをフレームデバッガーで確認すると、ちゃんとSRP Batcherで描画されているのが分かります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/frame-debugger.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-23-unity-urp-billboard-shader/frame-debugger.png&#34; alt=&#34;SRP Batcher&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SRP Batcherについては、以下の記事が詳しいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.unity.com/ja/technology/srp-batcher-speed-up-your-rendering&#34;&gt;SRP Batcher：レンダリングをスピードアップ | Unity Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;リンク&#34;&gt;リンク&lt;/h1&gt;

&lt;p&gt;参考にさせていただきました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URP対応（SRP Batcherも対応👍）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://light11.hatenadiary.com/entry/2021/07/29/194213&#34;&gt;【Unity】URP用のシェーダの書き方が旧パイプラインと微妙に違ってややこしいのでまとめた - LIGHT11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;利用したテクスチャ素材

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pngall.com/tree-png/download/23754&#34;&gt;Tree PNG Clipart Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.deviantart.com/fabooguy/art/Dirt-Ground-Texture-Tileable-2048x2048-441212191&#34;&gt;Dirt/Ground Texture [Tileable | 2048x2048]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tokyo Demo Fest 2021のGLSL Graphics Compo優勝作品の解説</title>
      <link>https://gam0022.net/blog/2021/12/20/tdf2021-glsl/</link>
      <pubDate>Mon, 20 Dec 2021 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/12/20/tdf2021-glsl/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;http://qiita.com/advent-calendar/2021/klab&#34;&gt;KLab Engineer Advent Calendar 2021&lt;/a&gt;の20日目の記事です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;12月11日～12日にオンラインで開催された&lt;a href=&#34;https://tokyodemofest.jp/&#34;&gt;Tokyo Demo Fest 2021&lt;/a&gt;（以下、TDF）に参加しました。&lt;/p&gt;

&lt;p&gt;TDFは、日本国内で唯一のデモパーティです。
リアルタイムに映像や音楽を生成するプログラムを「デモ」と言い、デモを鑑賞したり完成度を競ったりして楽しむイベントを「デモパーティ」と言います。
「デモシーン」はデモやデモパーティを中心としたコンピューターのサブカルチャーです。&lt;/p&gt;

&lt;p&gt;今年のTDFでは、『Alien Spaceship』という作品を発表しました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/_F0Pxq7TKqs&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Released &amp;quot;Alien Spaceship&amp;quot; at GLSL Graphics compo, &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021&lt;br&gt;&lt;br&gt;It&amp;#39;s running on &lt;a href=&#34;https://twitter.com/hashtag/GLSLSandbox?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSLSandbox&lt;/a&gt; &lt;br&gt;Only 1Pass Shader! No post-effects used&lt;a href=&#34;https://twitter.com/hashtag/GLSLSandbox?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSLSandbox&lt;/a&gt; で動作します。&lt;br&gt;1パスのシェーダーのみの制約で実装しており、ポストエフェクトは未使用です。 &lt;a href=&#34;https://t.co/lJBQQjjHMR&#34;&gt;pic.twitter.com/lJBQQjjHMR&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469977106612649985?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/_F0Pxq7TKqs&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/fl3SRB&#34;&gt;Shadertoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=90438&#34;&gt;Pouet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://glslsandbox.com/e#77788.0&#34;&gt;GLSL Sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TDFのGLSL Graphics Compoにて、&lt;a href=&#34;https://tokyodemofest.jp/tdf2021-results.txt&#34;&gt;本作品が1位&lt;/a&gt;に選ばれました！&lt;/p&gt;

&lt;p&gt;この記事では『Alien Spaceship』の利用技術と制作の裏側について解説します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;glsl-graphics-compoとは&#34;&gt;GLSL Graphics Compoとは？&lt;/h1&gt;

&lt;p&gt;デモシーンの文化に馴染みのない方に向けて、簡単にGLSL Graphics Compoの概要や制約について説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://glslsandbox.com/&#34;&gt;GLSL sandbox&lt;/a&gt;はWeb上でGLSLのフラグメントシェーダーを編集・実行できるWebGLで実装されたサービスです。作品を公開したり共有もできます。&lt;/p&gt;

&lt;p&gt;GLSL Graphics CompoはGLSL Sandbox上で動作するGLSLのシェーダーによるグラフィックスを競うコンポです。
コンポはコンペティションの意味で、参加者投票によって順位が決まります。&lt;/p&gt;

&lt;h2 id=&#34;glslシェーダーだけで映像をつくる&#34;&gt;GLSLシェーダーだけで映像をつくる&lt;/h2&gt;

&lt;p&gt;そもそもGLSLシェーダー、つまり &lt;strong&gt;プログラミングのソースコードだけで映像をつくる&lt;/strong&gt; 行程を一般的には想像しづらいかもしれません。&lt;/p&gt;

&lt;p&gt;まずは次の図を見ていただけると、具体的にイメージを掴めるかもしれません。
GLSLのコードからコメントや改行・空白文字を取り除き、処理の内容で色分けしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/minify-text.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/minify-text.png&#34; alt=&#34;GLSLのコードの処理&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この7756文字のGLSLのシェーダーに映像のすべてが実装されています。&lt;/p&gt;

&lt;p&gt;見てのとおり &lt;strong&gt;シーンのモデリング、ライティング、カメラワーク、演出のシーケンスがすべて含まれています。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;変数名や関数名を1文字に短縮したり、デバッグ用のコードの削除はしていないので、まだまだ文字数を削る余地はあります。
今回は文字数をそこまで意識してコーディングせずに、可読性を重視しました。&lt;/p&gt;

&lt;p&gt;GLSL sandboxでは音楽を再生できないので、YouTubeの音楽は後付けです。Shadertoy標準楽曲「Most Geometric Person」を使わせていただきました。&lt;/p&gt;

&lt;h2 id=&#34;レイマーチング&#34;&gt;レイマーチング&lt;/h2&gt;

&lt;p&gt;GLSL sandbox用のGLSLのフラグメントシェーダーで記述できるのは、フルスクリーンのMeshを描画する2D処理のみです。&lt;/p&gt;

&lt;p&gt;入力は描画対象のピクセルの座標、出力はピクセルの画素値の単純な2D処理です。
また、時間やマウス座標を入力にすることで、アニメーションもできます。&lt;/p&gt;

&lt;p&gt;3Dを描画するためには、GLSLコードの中に3Dのカメラや3Dのシーンの形状を定義する必要があります。&lt;/p&gt;

&lt;p&gt;2DのGLSLのシェーダーで3D空間を描画するためのテクニックとして、レイマーチングがよく使われます。&lt;/p&gt;

&lt;p&gt;レイマーチングは、距離関数の長さだけひたすらレイを進める処理をくり返し、距離関数が0になったら衝突したと判定する単純なアルゴリズムです。
つまり、レイトレーシングの交差判定のアルゴリズムのひとつです。
レイマーチングは、描画する形状を距離関数という数式によってプロシージャルに定義できるため、3Dのモデリングなしに3Dシーンを描画できます。&lt;/p&gt;

&lt;p&gt;レイマーチングの詳細については、過去に勉強会のスライドや書籍で紹介しています。&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/rS2j757JUrqeWL&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/shohosoda9/threejs-58238484&#34; title=&#34;シェーダだけで世界を創る！three.jsによるレイマーチング&#34; target=&#34;_blank&#34;&gt;シェーダだけで世界を創る！three.jsによるレイマーチング&lt;/a&gt; &lt;/strong&gt; de &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/shohosoda9&#34; target=&#34;_blank&#34;&gt;Sho Hosoda&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B097GBR2N3&amp;linkId=ad2164f51c3a4574701f9097c0eb7fde&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;alien-spaceshipの技術解説&#34;&gt;Alien Spaceshipの技術解説&lt;/h1&gt;

&lt;p&gt;前置きが長くなりましたが、ここからレイマーチング経験者に向けた技術解説をします。&lt;/p&gt;

&lt;p&gt;技術的なポイントとしては次の3点だと考えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;宇宙船の船内のような具体的な対象を目指したモデリング&lt;/li&gt;
&lt;li&gt;リアルタイムなグローバルイルミネーションのあるライティング&lt;/li&gt;
&lt;li&gt;長尺のタイムラインのシーケンス&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;モデリング&#34;&gt;モデリング&lt;/h2&gt;

&lt;p&gt;全編を通してプリミティブとしてはBoxとSphere（卵）の2種類しか使っていません。&lt;/p&gt;

&lt;h3 id=&#34;前半のhallwayシーン&#34;&gt;前半のHallwayシーン&lt;/h3&gt;

&lt;p&gt;壁の光る部分はBoxをSkewしたり、床はBoxにDisplacement Mapでディテールを加えています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1164.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1164.jpg&#34; alt=&#34;party1164.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;壁のskew&#34;&gt;壁のSkew&lt;/h4&gt;

&lt;p&gt;壁の &lt;strong&gt;く&lt;/strong&gt; の字の折り曲がった形状には、BoxをSkewで変形させています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;p.x -= W - 0.5 * abs(p.y);// Skewで変形
opUnion(m, sdBox(p, vec3(a * 1.7, H, 0.24)), SOL, roughness, 0.0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;床のdisplacement-map&#34;&gt;床のDisplacement Map&lt;/h4&gt;

&lt;p&gt;床のDisplacement Mapは次のような数式で実装しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// hをsdBoxの第2引数のサイズに加算すると、Displacement Mapになる
float h = 0.1 * floor(2. * sin(p.x)) + 0.2 * floor(sin(2. * p.z));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sinから滑らかなカーブを得て、それをfloorで階段状に離散化しているだけです。&lt;/p&gt;

&lt;p&gt;pは事前にabs(p.x)により左右ミラーしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/floor_graph.png&#34; alt=&#34;床の断面&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;扉の台形波&#34;&gt;扉の台形波&lt;/h4&gt;

&lt;p&gt;扉の台形のギザギザの関数は&lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;kaneta先生&lt;/a&gt;のコードをお借りしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/3dd3WB&#34;&gt;Energy Lab by kaneta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;float smoothPulse(float start, float end, float period, float smoothness, float t) {
    float h = abs(end - start) * 0.5;
    t = mod(t, period);
    return smoothstep(start, start + h * smoothness, t) - smoothstep(end - h * smoothness, end, t);
}

float y(float x) {
    return smoothPulse(0.0, 0.6, 1.0, 0.5, x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/smoothPulse.png&#34; alt=&#34;扉の台形波&#34; /&gt;&lt;/p&gt;

&lt;p&gt;床のEmissiveや扉を開けたときのEmissiveの模様のパターンもsmoothPulse関数を用いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party2085.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party2085.jpg&#34; alt=&#34;party2085.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/smoothPulsePattern.png&#34; alt=&#34;smoothPulsePattern.png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Floor Emissive Pattern
float py = smoothPulse(0.0, 0.6, 1.0, 0.5, 0.25 * p.y);
float emi = smoothPulse(0.2, 0.25, 1.0, 0.5, py + p.x / 2.0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shadertoyに簡単なサンプルを用意しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/7ttXWf&#34;&gt;smoothPulse Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hallwayシーンまとめ&#34;&gt;Hallwayシーンまとめ&lt;/h4&gt;

&lt;p&gt;天井についても、係数を調整しながら箱を並べることで、狙った形状をモデリングしていきました。
特殊なことは何もしていませんが、sdBoxの評価回数が増えると負荷が高くなるので、なるべくsdBoxの数を減らすように意識しました。
レイマーチングでは、座標をmodで繰り返すと特定の軸に対して無限にオブジェクトを配置できます（opRep）。
前述の左右のミラー化もsdBoxの評価回数を減らすための工夫のひとつです。&lt;/p&gt;

&lt;p&gt;ほぼopRepとSkewとDisplacement Mapのテクニックの繰り返しで地道にモデリングしているだけです。&lt;/p&gt;

&lt;p&gt;ライティングの問題とモデリングの問題を切り分けるためにシンプルなレイマーチングの描画モードも用意しました。&lt;/p&gt;

&lt;p&gt;よく見ると強引にSkewとDisplacement Mapをしたために、よく見るとアーティファクトが発生しています。
最終的なライティングでは暗い箇所となってほとんど目立たなかったので、今回はそのままにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/debug-scene.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/debug-scene.png&#34; alt=&#34;debug-scene.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;後半のalienの巣のシーン&#34;&gt;後半のAlienの巣のシーン&lt;/h3&gt;

&lt;p&gt;IFS（Iterated Function Systems）をつかっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party6370.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party6370.jpg&#34; alt=&#34;party6370.jpg&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party7186.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party7186.jpg&#34; alt=&#34;party7186.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IFSでは狙った形をモデリングすることは困難なので、パラメーターを延々と調整しながら、理想的な見た目になるまで試行錯誤を繰り返しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// IFSのパラメーター
vec4 ifs = vec4(875, 482, 197, 545) / vec2(1200, 675).xyxy;

// IFSでモデリング
p = pos;
p -= vec3(0, H, 16. * 3.5);

for (int i = 0; i &amp;lt; 5; i++) {
    p = abs(p) - ifs.w;
    rot(p.xz, -4. * ifs.x);
    p = abs(p) - ifs.z;
    rot(p.xy, -4. * ifs.y);
}

opUnion(m, sdEgg(p, 0.1), SOL, 0.0, 0.0);
opUnion(m, sdBox(p, vec2(1, 0.01).xyy), SOL, roughness, 0.0);
opUnion(m, sdBox(p - vec2(0.001, 0).yxy, vec2(1, 0.01).xyy), VOL, 2.4 * saturate(cos(beatTau / 2. + 10. * p.x)), 2.4);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ライティング-グローバルイルミネーション&#34;&gt;ライティング（グローバルイルミネーション）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1895.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1895.jpg&#34; alt=&#34;party1895.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全編を通してグローバルイルミネーション（GI）や、少しラフな反射（roughness = 0.05くらい）をしています。&lt;/p&gt;

&lt;p&gt;グラフィックスエンジニアなら性癖に刺さるポイントだと思います。&lt;/p&gt;

&lt;p&gt;GIをリアルタイムに計算するのは技術的にはとても難しい課題です。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://twitter.com/Virgill74&#34;&gt;Virgillさん&lt;/a&gt;が開発したMadtracingを用いてGIを計算しました。&lt;/p&gt;

&lt;p&gt;Madtracingは&lt;a href=&#34;https://www.pouet.net/prod.php?which=77102&#34;&gt;End of time by Alcatraz &amp;amp; Altair&lt;/a&gt;というデモで使われた手法です。&lt;/p&gt;

&lt;p&gt;Madtracing解説用のシェーダーがShadertoyに公開されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/Xt3cWS&#34;&gt;EOT - Grid scene by Virgill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パストレーシングと同じように表面のroughnessに応じてセカンダリレイを飛ばしてGIを計算します。&lt;/p&gt;

&lt;p&gt;通常のパストレーシングでは物体の表面にヒットしてからセカンダリレイを複数回飛ばすと思いますが、
Madtracingではレイマーチングのステップ中にセカンダリレイを近傍のオブジェクトのroughnessに応じて飛ばします。&lt;/p&gt;

&lt;p&gt;これによってボリューム感やBloom感のあるライティングを実現できます。その代償として、少々負荷が高い印象です。&lt;/p&gt;

&lt;p&gt;今回のデモでは、Madtracingを自分の使いやすい形に少しだけフォークして利用しました。&lt;/p&gt;

&lt;p&gt;まず、マテリアルのフォーマット（map関数の返り値）を以下のように定義しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec4 m = vec4(1, VOL, 0, 0);
// x: Distance
// y: MaterialType (VOL or SOL)
// z: Roughness in (0-1), Emissive when z&amp;gt;1
// w: ColorPalette
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MadtracingからAA処理を削除して、AA処理はプライマリレイの生成に移動しました。これで少し負荷削減とシンプル化ができました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Ref. EOT - Grid scene by Virgill
// https://www.shadertoy.com/view/Xt3cWS
void madtracer(vec3 ro1, vec3 rd1, float seed) {
    scol = vec3(0);
    float t = 0., t2 = 0.;
    vec4 m1, m2;
    vec3 rd2, ro2, nor2;
    for (int i = 0; i &amp;lt; 160; i++) {
        m1 = map(ro1 + rd1 * t);
        // t += m1.y == VOL ? 0.25 * abs(m1.x) + 0.0008 : 0.25 * m1.x;
        t += 0.25 * mix(abs(m1.x) + 0.0032, m1.x, m1.y);
        ro2 = ro1 + rd1 * t;
        nor2 = normal(ro2);
        rd2 = mix(reflect(rd1, nor2), hashHs(nor2, vec3(seed, i, iTime)), saturate(m1.z));
        m2 = map(ro2 + rd2 * t2);
        // t2 += m2.y == VOL ? 0.25 * abs(m2.x) : 0.25 * m2.x;
        t2 += 0.25 * mix(abs(m2.x), m2.x, m2.y);
        scol += .007 * (pal(m2) * step(1., m2.z) + pal(m1) * step(1., m1.z));

        // force disable unroll for WebGL 1.0
        if (t &amp;lt; -1.) break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;絶対に実行されないbreak-によるコンパイル時間削減&#34;&gt;「絶対に実行されないbreak」によるコンパイル時間削減&lt;/h3&gt;

&lt;p&gt;madtracer関数に、謎の &lt;code&gt;if (t &amp;lt; -1.) break;&lt;/code&gt; があることに気がついたでしょうか？&lt;/p&gt;

&lt;p&gt;tはレイの進んだ距離で、絶対にマイナス値にはなりません。つまり絶対に実行されないbreak処理です。
普通に考えれば不要な処理ですが、これはGLSLコンパイル時間削減のハックです。&lt;/p&gt;

&lt;p&gt;breakを追加することで、GLSLコンパイラによってforがunrollされずにloopとして処理されて、コンパイル時間を大きく削減できます。&lt;/p&gt;

&lt;p&gt;ChromeデフォルトのWebGLのANGLE有効時にはかなり効果的で、自分の環境ではコンパイル時間を32.9秒から1.7秒に削減できました。&lt;/p&gt;

&lt;p&gt;コンポ提出当日はずっとコンパイル時間の削減に工数を費やしていて、提出2.5時間前くらいに気がついたので、もっと早く気がついていればという気持ちです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; が終わったので、&lt;br&gt;コンパイル時間を32.9秒から1.7秒に削減する&lt;br&gt;「絶対に実行されないbreak」の実例を貼っておきます。&lt;br&gt;&lt;br&gt;breakを追加することで、GLSLコンパイラによってforがunrollされずにloopに処理されて、コンパイル時間を大きく削減できます。&lt;a href=&#34;https://t.co/SC7A9WAkll&#34;&gt;https://t.co/SC7A9WAkll&lt;/a&gt; &lt;a href=&#34;https://t.co/XRakPPq0TU&#34;&gt;pic.twitter.com/XRakPPq0TU&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1470408956866883584?ref_src=twsrc%5Etfw&#34;&gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;同様のテクニックとして、&lt;code&gt;N + min(0, iFrame)&lt;/code&gt; をループ回数にする手法があります。&lt;a href=&#34;https://twitter.com/AruGL&#34;&gt;Danilさん&lt;/a&gt;に教えていただきました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;maybe you know usual trick with loop N+min(0,iFrame) it also can speedup compiling&lt;a href=&#34;https://t.co/XPfP9CZms0&#34;&gt;https://t.co/XPfP9CZms0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Danil (@AruGL) &lt;a href=&#34;https://twitter.com/AruGL/status/1466751715038879755?ref_src=twsrc%5Etfw&#34;&gt;December 3, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;コードにすると、こういう感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;for(int i = 0; i &amp;lt; 160 + min(0, iFrame); i++) {
    // ループ中の処理
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ShadertoyなどのWebGL2.0環境であれば、この方法で同じコンパイル時間削減の効果を得られます。&lt;/p&gt;

&lt;p&gt;WebGL1.0の場合はダイナミックループをサポートしていないので、WebGL1.0で動くGLSLSandboxでは &lt;code&gt;N + min(0, iFrame)&lt;/code&gt; のハックは使えません。&lt;/p&gt;

&lt;p&gt;GLSLSandbox用なら、&lt;code&gt;絶対に実行されないbreak&lt;/code&gt; のハックを使うと良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;タイムラインのシーケンス&#34;&gt;タイムラインのシーケンス&lt;/h2&gt;

&lt;p&gt;タイムラインのシーケンス管理のために次の簡単なマクロを実装しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Timeline
float prevEndTime = 0., t = 0.;
#define TL(beat, end) if (t = beat - prevEndTime, beat &amp;lt; (prevEndTime = end))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方は簡単で、TLの引数に現在時刻と境界値（区間の終了タイミング）を指定します。
単位は区別していないので、時間単位でもビート単にでも統一されていてばOKです。&lt;/p&gt;

&lt;p&gt;グローバル変数tに現在区間の相対的な時間が自動的に設定されるため、処理をスッキリと書けます。&lt;/p&gt;

&lt;p&gt;ifの条件の中にカンマを複数の式を書けるのは今回はじめて知りました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// カメラワーク制御の実装例

// 0～ 4*8ビート目までの処理
TL(beat, 4. * 8.) setCamera(vec4(600, 250. + t * 3., 600, 243. - t * 6.), 3.);

// 4*8～4*10ビート目までの処理
else TL(beat, 4. * 10.) setCamera(vec4(600, 307, 600, 44. + t * 4.), 3.);

// 4*10～4*12ビート目までの処理
else TL(beat, 4. * 12.) setCamera(vec4(494, 322, 695, 216), 2.4 + 0.2 * t);

// 4*12～4*14ビート目までの処理
else TL(beat, 4. * 14.) setCamera(vec4(600, 481. + 10. * t, 600, 59), 3.);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はカットごとにカメラを完全に切り替えていたので、このような仕組みでうまくカメラワークを実装できました。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;kanetaさんのsmoothPulse関数や、VirgillさんのMadtracing以外にも、数え切れないほどたくさんの解説記事とシェーダーを参考にしたり、たくさんの作品に影響を受けました。
たくさんの方々に感謝します。ありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;ここからは技術的なこと以外のポエムをつらつらと書きます。&lt;/p&gt;

&lt;h2 id=&#34;glsl-graphics-compo初優勝&#34;&gt;GLSL Graphics Compo初優勝！&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/12/12/tdf2018/&#34;&gt;2018年のPC Demo Compo&lt;/a&gt;に引き続き、Tokyo Demo Festでのコンポ優勝は2回目です。&lt;/p&gt;

&lt;p&gt;これまでGLSL Graphics Compoはずっと3位で、なかなか優勝できなかったので、ようやく心残りを解消できました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;I won the GLSL Graphics compo at &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021!&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021 の GLSL Graphics compo で優勝しました！めちゃくちゃ嬉しいです！&lt;br&gt;&lt;br&gt;&amp;quot;Alien Spaceship&amp;quot; by &lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/KQaQo1NI0R&#34;&gt;pic.twitter.com/KQaQo1NI0R&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469994430950445057?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;GLSL Graphics compo 1位のトロフィーを受け取りました🏆&lt;br&gt;&lt;br&gt;今年のトロフィーは例年よりもずっと重厚感があります。&lt;br&gt;&lt;br&gt;副賞の光るキーボードもありがとうございました。&lt;br&gt;家にある光るキーボードは3台目ですが、大切にします🙏&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/vC3ce68i7S&#34;&gt;pic.twitter.com/vC3ce68i7S&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1472229449433481220?ref_src=twsrc%5Etfw&#34;&gt;December 18, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;トロフィーの素材や厚みが例年よりも高級感があって、個人的にもなんだか嬉しい気持ちです（笑）。&lt;/p&gt;

&lt;p&gt;GUNCY&amp;rsquo;Sさんによる副賞のRazer BlackWidow V3 Green Switchもありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;気軽にtdfにエントリーしてほしい&#34;&gt;気軽にTDFにエントリーしてほしい&lt;/h2&gt;

&lt;p&gt;GLSL Graphics CompoはTDF独自のコンポで、海外のパーティでは見たことのない形式ですが、個人的にはとても好きです。&lt;/p&gt;

&lt;p&gt;2016年のTDFに初参加したとき、一晩でGLSLSandboxのシェーダーを書いて、GLSL Graphics Compoにエントリーした記憶は今でも鮮明に覚えています。
自分のシェーダーが巨大なスクリーンに映し出されたとき、オーディエンスの歓声が聞こえて本当に嬉しかったです。
この体験がなければデモシーンやシェーダーを続けていないような気がします。勇気を出してエントリーして良かったと本当に思います。&lt;/p&gt;

&lt;p&gt;デモを1本完成させるのは本当に大変ですが、GLSL Graphics Compoなら気軽に参加できることがメリットだと思います。&lt;/p&gt;

&lt;p&gt;気軽に参加できる数少ないコンポですが、近年のGLSL Graphics Compoのレベルはインフレを続けて、上位勢はかなりガチな作品を出してくるなという印象があります。&lt;/p&gt;

&lt;p&gt;本来のGLSL Graphics Compoは数秒から10秒程度の短いグラフィックス作品の部門だと自分は認識しています。
&lt;a href=&#34;https://nanka.hateblo.jp/entry/2018/12/13/080322&#34;&gt;Traveler 2&lt;/a&gt;やAlien Spaceshipのような長尺のデモっぽい作品がGLSL Graphics Compoに増えることで、もし他の参加者が萎縮してしまったらとても不本意な気持ちです。&lt;/p&gt;

&lt;p&gt;GLSL Graphics Compoは順位や周りを気にせず、1晩クオリティの雑なシェーダーでも構わず気軽にエントリーできる雰囲気にして、新規参入者が増える未来を望んでいます。&lt;/p&gt;

&lt;h2 id=&#34;オンラインパーティの体験&#34;&gt;オンラインパーティの体験&lt;/h2&gt;

&lt;p&gt;今回のTDF初のオンライン開催でした。&lt;/p&gt;

&lt;p&gt;TDFのオーガナイザーの方々の努力のおかげで、実際のデモパーティにかなり近い体験を再現できていたのではないかと思います。&lt;/p&gt;

&lt;p&gt;Day2のYouTubeの視聴回数が3000回を超えているので、例年のオフラインパーティよりもたくさんの人に見てもらえたなど、オンラインのメリットも感じました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/2s9KfMn1J9M&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/bp37xTVNRrM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;ですが、やはり正直に言うと「オンラインだと物足りないなぁ…」というのが正直な感想でした。
とくにオーディエンスの反応や会場の熱気を直接感じられないのはとても寂しかったです。またオフラインでデモパーティできる日が本当に待ち遠しいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;またオフラインでデモパーティできる日が待ち遠しい… &lt;a href=&#34;https://t.co/WsyEHySE28&#34;&gt;https://t.co/WsyEHySE28&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1470764587834568715?ref_src=twsrc%5Etfw&#34;&gt;December 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;shader-showdown&#34;&gt;Shader Showdown&lt;/h2&gt;

&lt;p&gt;TDF初の試みであるShader Showdownは本当に激熱でした。&lt;/p&gt;

&lt;p&gt;とくに決勝戦の &lt;a href=&#34;https://twitter.com/phi16_&#34;&gt;phi16&lt;/a&gt; vs. &lt;a href=&#34;https://twitter.com/kamoshika_vrc&#34;&gt;Kamoshika&lt;/a&gt; の戦いは一生忘れないくらい印象に残りました。&lt;/p&gt;

&lt;p&gt;Shader Showdownについては、また別の記事で書きたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;TokyoDemoFestのShader Showdownは、世界的なDemoparty「Revision」と同じレギュレーションで開催します。&lt;br&gt;試合の放映はパーティー当日12/11-12となります。乞うご期待……！ &lt;a href=&#34;https://t.co/IlVue5npWz&#34;&gt;pic.twitter.com/IlVue5npWz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tokyo Demo Fest 2021 (2021/12/11-12) (@TokyoDemoFest) &lt;a href=&#34;https://twitter.com/TokyoDemoFest/status/1452275618997886976?ref_src=twsrc%5Etfw&#34;&gt;October 24, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;本編では言及しなかったけれども一応書いておきたいことを箇条書きでつらつら書きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今年のTDFでは、KLabはゴールドスポンサーとして協賛

&lt;ul&gt;
&lt;li&gt;協賛できて良かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜGLSL Graphics Compoに出したの？

&lt;ul&gt;
&lt;li&gt;音楽を作る能力と余裕があれば、IntroとしてPC Demo Compoに出したかったが、間に合わなかった&lt;/li&gt;
&lt;li&gt;sadakkeyさん多忙&lt;/li&gt;
&lt;li&gt;来年は音楽も勉強したい（毎年言っている気もする）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;計画的にデモを作りたい

&lt;ul&gt;
&lt;li&gt;TDF直後には、他の人や作品に感化されて、溢れるモチベーションとやる気があるはずなのに&lt;/li&gt;
&lt;li&gt;結局毎年締切ギリギリまで着手できない&lt;/li&gt;
&lt;li&gt;だんだん徹夜もつらくなってきた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;着想点

&lt;ul&gt;
&lt;li&gt;グローバルイルミネーションをやりたかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.magnum.graphics/guest-posts/area-lights-with-ltcs/&#34;&gt;Area Lights with LTCs&lt;/a&gt;も調査はした

&lt;ul&gt;
&lt;li&gt;BRDFなどに依存したルックアップテーブルが必要で、1Pass実装にフォールバックが不可能っぽいので諦めた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;作業日記&#34;&gt;作業日記&lt;/h1&gt;

&lt;p&gt;ネタ供養🙏です。&lt;/p&gt;

&lt;h2 id=&#34;2021-11-07&#34;&gt;2021-11-07&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-07-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-07-v1-1.png&#34; alt=&#34;2021-11-07-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-16&#34;&gt;2021-11-16&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-1.png&#34; alt=&#34;2021-11-16-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-2.png&#34; alt=&#34;2021-11-16-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-3.png&#34; alt=&#34;2021-11-16-v1-3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この頃はIFSを弄っていた。&lt;/p&gt;

&lt;h2 id=&#34;2021-11-17&#34;&gt;2021-11-17&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-1.png&#34; alt=&#34;2021-11-17-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-2.png&#34; alt=&#34;2021-11-17-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-18&#34;&gt;2021-11-18&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v1-1.png&#34; alt=&#34;2021-11-18-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v2-1.png&#34; alt=&#34;2021-11-18-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-19&#34;&gt;2021-11-19&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-1.png&#34; alt=&#34;2021-11-19-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ボロノイでザラザラとした床にする案&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-2.png&#34; alt=&#34;2021-11-19-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-3.png&#34; alt=&#34;2021-11-19-v1-3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-4.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-4.png&#34; alt=&#34;2021-11-19-v1-4.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-20&#34;&gt;2021-11-20&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-20-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-20-v1-1.png&#34; alt=&#34;2021-11-20-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-21&#34;&gt;2021-11-21&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-1.png&#34; alt=&#34;2021-11-21-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-2.png&#34; alt=&#34;2021-11-21-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v2-1.png&#34; alt=&#34;2021-11-21-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-22&#34;&gt;2021-11-22&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v1-1.png&#34; alt=&#34;2021-11-22-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v2-1.png&#34; alt=&#34;2021-11-22-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-12-02&#34;&gt;2021-12-02&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v1-1.png&#34; alt=&#34;2021-12-02-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v2-1.png&#34; alt=&#34;2021-12-02-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-12-03&#34;&gt;2021-12-03&lt;/h2&gt;

&lt;p&gt;締切当日はコンパイル時間の削減をがんばっていた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>リモートワーク「買って良かったモノ・買って失敗したモノ」</title>
      <link>https://gam0022.net/blog/2021/08/23/best-buy/</link>
      <pubDate>Mon, 23 Aug 2021 13:50:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/08/23/best-buy/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;リモートワークになってから1年半が経過しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/blog/2020/03/10/best-buy/&#34;&gt;去年&lt;/a&gt;も作業環境の紹介と商品レビューをしたのですが、1年半も経ったのでアップデートしようと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-08-23-best-buy/desk.jpg&#34; alt=&#34;机&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※これはアフィリエイト記事です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;買って良かったモノ&#34;&gt;買って良かったモノ&lt;/h1&gt;

&lt;p&gt;成功した買い物の振り返りです。&lt;/p&gt;

&lt;h2 id=&#34;無線メカニカルキーボード&#34;&gt;無線メカニカルキーボード&lt;/h2&gt;

&lt;p&gt;Logicoolの&lt;a href=&#34;https://amzn.to/3mkYYR3&#34;&gt;G913-TKL&lt;/a&gt;を使っています（2020/8～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B088BYC54C&amp;linkId=46888f2d7de2e24dfd62106c3e31fc5b&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;打鍵感が良い&lt;/li&gt;
&lt;li&gt;キースイッチは3種類から選べる

&lt;ul&gt;
&lt;li&gt;クリッキー（青軸）←自分はこれ&lt;/li&gt;
&lt;li&gt;リニア（赤軸）&lt;/li&gt;
&lt;li&gt;タクタイル（茶軸）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ライトを光らせないならバッテリーの持ちが良い

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/gam0022/status/1322617333425139712&#34;&gt;87日間、毎日使用してバッテリー残量37%&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テンキーレスで場所をとらない

&lt;ul&gt;
&lt;li&gt;テンキーは使わない派なので机のスペースを節約できてGOOD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キーボードレイアウトが無難

&lt;ul&gt;
&lt;li&gt;親指の位置に無変換・変換キーが配置されているのがGOOD

&lt;ul&gt;
&lt;li&gt;個人的に無変換・変換キーでIMEをON/OFFにしているため&lt;/li&gt;
&lt;li&gt;FILCOのキーボードもテンキーレスの無難なレイアウトだが、スペースキーが大きすぎるため選択肢から外した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;音量のダイヤルが便利

&lt;ul&gt;
&lt;li&gt;不要だろうと思っていたが、意外に便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全体的にデザインが良い

&lt;ul&gt;
&lt;li&gt;ライトをOFFにすると無刻印っぽくてカッコいい&lt;/li&gt;
&lt;li&gt;ボディはアルミ製&lt;/li&gt;
&lt;li&gt;ゴミが溜まりにくい構造&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;薄型なのでパームレストがなくても使える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3万円の光るオモチャです！&lt;br&gt;カッコいいし最高！😆 &lt;a href=&#34;https://t.co/RsdBEgZpn3&#34;&gt;pic.twitter.com/RsdBEgZpn3&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1292653375926894592?ref_src=twsrc%5Etfw&#34;&gt;August 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪いポイント&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PS5では認識しない

&lt;ul&gt;
&lt;li&gt;ちなみにELECOMの&lt;a href=&#34;https://amzn.to/3kiLzq3&#34;&gt;TK-FDM105TXBK&lt;/a&gt;という1500円くらいの安価な無線のメンブレンキーボードであれば認識する&lt;/li&gt;
&lt;li&gt;LIGHTSPEEDというLogicool独自のワイヤレス規格だからかもしれないと思い、Bluetoothで接続しても「PS5はこのBluetooth機器に対応していません」となる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;値段が高い

&lt;ul&gt;
&lt;li&gt;現時点のAmazon価格が25,360円&lt;/li&gt;
&lt;li&gt;大きな欠点はない商品なので、個人的には妥当な価格&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;充電ケーブルがmicro USB Type-B

&lt;ul&gt;
&lt;li&gt;USB Type-Cが良かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;誤解を生まないように補足すると、&lt;br&gt;G913 TKLは本当に素晴らしいキーボードです。&lt;br&gt;&lt;br&gt;でもなぜか PS4/PS5 未対応でした。念の為にbluetoothとUSBレシーバーの両方で試しましたが、どちらもダメでした。 &lt;a href=&#34;https://t.co/4uTnb5HibI&#34;&gt;pic.twitter.com/4uTnb5HibI&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1359745575743201289?ref_src=twsrc%5Etfw&#34;&gt;February 11, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;無線マウス&#34;&gt;無線マウス&lt;/h2&gt;

&lt;p&gt;LogicoolのG502WLという無線のマウスを使っています（2021/3～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3日ぶりにマウスを購入しました！（買い物が下手すぎる…🙄）&lt;br&gt;&lt;br&gt;今度はG502WLというクワガタみたいなやつです。&lt;br&gt;&lt;br&gt;G703h（3枚目の写真の奥）は全体的には良かったのですが、ホイールクリックが硬くて深すぎるのと、自分の手には少しサイズが大きすぎましたね😢 &lt;a href=&#34;https://t.co/O6NeYwnc2o&#34;&gt;pic.twitter.com/O6NeYwnc2o&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1373234586881122314?ref_src=twsrc%5Etfw&#34;&gt;March 20, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07RR94VQT&amp;linkId=0e8f91eb0af540ef2a5c961b9a460f9a&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-1&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;持ちやすい

&lt;ul&gt;
&lt;li&gt;高さが低め（4cm）&lt;/li&gt;
&lt;li&gt;「つまみ持ち・つかみ持ち」の人には最適な高さ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;カスタマイズ可能なボタンの位置が押しやすく、誤操作しずらい

&lt;ul&gt;
&lt;li&gt;親指と人差し指の位置に集約されている&lt;/li&gt;
&lt;li&gt;G HUBでアプリケーションごとにカスタマイズも可能&lt;/li&gt;
&lt;li&gt;ゲームだけでなくUnity Editorのショートカットに割り当ても可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-1&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;バッテリーの持ちが悪い

&lt;ul&gt;
&lt;li&gt;ライトをOFFにしても1週間くらいでバッテリーが切れる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amzn.to/3j5IQAI&#34;&gt;G-PMP-001 POWERPLAY&lt;/a&gt;という専用のマウスパッドを買えば充電しながら使える

&lt;ul&gt;
&lt;li&gt;Amazon価格で17,523円&lt;/li&gt;
&lt;li&gt;個人的にマウスパッドは不要なので未購入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;充電ケーブルがmicro USB Type-B

&lt;ul&gt;
&lt;li&gt;USB Type-Cが良かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;G HUBの使い勝手が悪い

&lt;ul&gt;
&lt;li&gt;設定に手間がかかる&lt;/li&gt;
&lt;li&gt;使い方を理解するのが難しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;echo-dot-nature-remo-mini-meross&#34;&gt;Echo Dot + Nature Remo mini + Meross&lt;/h2&gt;

&lt;p&gt;Echo Dot 第3世代とNature Remo miniのセットを買いました（2020/10～）。&lt;/p&gt;

&lt;p&gt;買う前は便利なのか半信半疑でしたが、エアコン等の家電の操作を音声できるため便利です。&lt;/p&gt;

&lt;p&gt;寝る時に「Alexa おやすみ」で家電を一括OFFにして、「Alexa おはよう」で家電を一括ONもできます。&lt;/p&gt;

&lt;p&gt;細かい設定は別記事にしようと思いますが、このような家電をAlexaで管理しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;照明&lt;/li&gt;
&lt;li&gt;エアコン&lt;/li&gt;
&lt;li&gt;PCの電源&lt;/li&gt;
&lt;li&gt;モニターの電源&lt;/li&gt;
&lt;li&gt;加湿器（冬場のみ）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;echo dot と Nature Remo mini が届いたのでセットアップした！ &lt;a href=&#34;https://t.co/04VoZShslL&#34;&gt;pic.twitter.com/04VoZShslL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1317044797601804288?ref_src=twsrc%5Etfw&#34;&gt;October 16, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07PFFMQ64&amp;linkId=20a74e386150dd6529d9622e885c1f2d&#34;&gt;&lt;/iframe&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07CWNLHJ8&amp;linkId=20656060e550fcb1afeac74887ba421f&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Nature Remoはリモコンの赤外線を再現することで家電を制御するので、リモコン制御のほとんどの家電を操作できます。&lt;/p&gt;

&lt;p&gt;リモコン制御できないものは、Merossというスマートプラグを利用しました。
こちらはコンセントの電流のON/OFFしかできないので、加湿器や照明のように単純な家電にしか使わないほうが良いと思います。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08BRX8BLZ&amp;linkId=7b71e4efd068fb20a331df1fe4b101e3&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;悪かった点-echo-dot-第3世代&#34;&gt;悪かった点（Echo Dot 第3世代）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PCのBluetoothスピーカーとして利用すると、一時停止しているブラウザの動画や音楽が勝手に再生される&lt;/li&gt;
&lt;li&gt;音質が悪い

&lt;ul&gt;
&lt;li&gt;音楽の再生用途としては厳しい音質&lt;/li&gt;
&lt;li&gt;スマートスピーカーとしては問題ない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;echo dotをPCのbluetoothスピーカーとして利用中。&lt;br&gt;&lt;br&gt;概ね快適だけど、困ったところが1つがある。&lt;br&gt;&lt;br&gt;一時停止しているブラウザの動画や音楽が勝手に再生される現象が発生する。&lt;br&gt;&lt;br&gt;設定などで解決できるならなんとかしたい…&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1320651494853496834?ref_src=twsrc%5Etfw&#34;&gt;October 26, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;ウェブカメラ&#34;&gt;ウェブカメラ&lt;/h2&gt;

&lt;p&gt;オンライン会議のときだけノートPCを利用していましたが、デスクトップPCがメインになったのでWebカメラを買いました（2021/2～）。&lt;/p&gt;

&lt;p&gt;ノートPCを机の上から撤去できてスッキリとしました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;AmazonのタイムセールだったのでWebカメラを買った。&lt;br&gt;これでWeb会議専用のノートPCを机から撤去できる！ &lt;a href=&#34;https://t.co/GVNGPE4PD9&#34;&gt;pic.twitter.com/GVNGPE4PD9&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356196732774715399?ref_src=twsrc%5Etfw&#34;&gt;February 1, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07QQR6G5N&amp;linkId=c3bebf8f73b1de0ed73be0721c504fff&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-2&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;画質や機能は必要十分&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-2&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;長時間（6時間以上）利用していると映像が止まることもある

&lt;ul&gt;
&lt;li&gt;ZoomやMeet上でカメラのON/OFFで治るので致命的ではない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画角（視野角）が78°は広すぎる

&lt;ul&gt;
&lt;li&gt;部屋全体が写りやすい&lt;/li&gt;
&lt;li&gt;ZoomやMeetのバーチャル背景が実装されてからはそこまで気にならない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;付属アプリのLogicool Captureの使い勝手は微妙

&lt;ul&gt;
&lt;li&gt;画角が広すぎる場合はトリミング等ができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;画角が広すぎワロタと思っていたが、Logicool Captureという専用アプリをインストールしたら、画角と中央位置を調整できた👍&lt;a href=&#34;https://t.co/NtxdPFxtyd&#34;&gt;https://t.co/NtxdPFxtyd&lt;/a&gt; &lt;a href=&#34;https://t.co/LlDo5W5M2Q&#34;&gt;pic.twitter.com/LlDo5W5M2Q&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356197321407569926?ref_src=twsrc%5Etfw&#34;&gt;February 1, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;無線ヘッドセット&#34;&gt;無線ヘッドセット&lt;/h2&gt;

&lt;p&gt;オンライン会議用にヘッドセット（&lt;a href=&#34;https://amzn.to/381p6Ig&#34;&gt;Logicool G733&lt;/a&gt;）を買いました（2021/2～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;またヘッドセットを買った🎧 &lt;a href=&#34;https://t.co/lgjaztw8Mk&#34;&gt;pic.twitter.com/lgjaztw8Mk&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356513514437795843?ref_src=twsrc%5Etfw&#34;&gt;February 2, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08FSYJ92M&amp;linkId=f2e4c3f1ba886551661d8e91f7883115&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-3&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;音質が良い・遅延がない

&lt;ul&gt;
&lt;li&gt;SONYのノイズキャンセリングヘッドホン&lt;a href=&#34;https://amzn.to/32NECE6&#34;&gt;WH-1000XM3&lt;/a&gt;の場合

&lt;ul&gt;
&lt;li&gt;体感できるレベルの遅延がある&lt;/li&gt;
&lt;li&gt;マイクを有効にすると顕著に音質が劣化する&lt;/li&gt;
&lt;li&gt;Bluetoothの仕様上、帯域が狭いので仕方がない可能性&lt;/li&gt;
&lt;li&gt;色んなBluetoothのレシバーを購入したが改善しなかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;これらの問題がすべて解決したので、初手でこれを買えばよかった…&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Bluetoothはトラブルが多いので、今後は避ける予定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マイクも問題ない

&lt;ul&gt;
&lt;li&gt;同僚から声が聞き取りやすくなったと評判だった（WH-1000XM3と比較して）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;再生・一時停止ボタンがある

&lt;ul&gt;
&lt;li&gt;初期設定だとマイクのON/OFFになっているが、G HUBでカスタマイズが可能&lt;/li&gt;
&lt;li&gt;家事をしながら音楽を再生しているときにポーズできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;音量調整のボタンがある&lt;/li&gt;
&lt;li&gt;PS5でも使用可能

&lt;ul&gt;
&lt;li&gt;ちなみにPS5ではBluetoothのヘッドセットは使用不可（WH-1000XM3で検証済み）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-3&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bluetooth未対応

&lt;ul&gt;
&lt;li&gt;iPhoneと接続できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;椅子&#34;&gt;椅子&lt;/h2&gt;

&lt;p&gt;AKRACINGのゲーミングチェアを使っています（2018/7～）。&lt;/p&gt;

&lt;p&gt;長時間集中して作業するためには、椅子は身体に負担のかからないちゃんとしたものを選ぶべきかと思います。&lt;/p&gt;

&lt;p&gt;ゲーミングチェアを買う以前は、無印良品の&lt;a href=&#34;https://www.muji.com/jp/ja/store/cmdty/section/S10305&#34;&gt;体にフィットするソファ&lt;/a&gt;へ座りながらコタツで作業していましたが、姿勢が安定しないせいで身体を痛めそうですし作業にも集中できませんでした…&lt;/p&gt;

&lt;p&gt;このゲーミングチェアは腰と首の位置にそれぞれサポートがあり、長時間座っていても疲労感が少ないです。&lt;/p&gt;

&lt;p&gt;それから、賃貸に住んでいるため、キャスターで床が傷つかないかどうか、わりと心配していました。&lt;/p&gt;

&lt;p&gt;このゲーミングチェアは床を傷つけにくいキャスターを採用していて、実際に床に直接置いてずっと使用していますが、まったく気にならないです！&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01G8E6NZW&amp;linkId=c4ebe4bcb67905f67849a9e72c1de0be&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-4&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;素材の硬さが絶妙で、長時間座っていてもお尻や腰が痛くならない&lt;/li&gt;
&lt;li&gt;腰の位置のランバーサポートがとても良くて、深く腰掛けても腰椎がサポートされて体が痛くならない&lt;/li&gt;
&lt;li&gt;フローリング床に傷をつけにくいPU（ポリウレタン）製キャスターを採用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-4&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;レザーのパーツが摩耗してきた（経年劣化の許容範囲）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;補足&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/32NiM3y&#34;&gt;最上位のモデル&lt;/a&gt;だと座面チルト機能があるので、リクライニングをよく使う人は、こっちを買ったほうがいいかもしれません。&lt;/p&gt;

&lt;p&gt;AKRACINGのゲーミングチェアはAmazonのセールで毎回セール対象になっているので、セールを狙って買うのが良いかもしれません。自分もセールのときに買いました。&lt;/p&gt;

&lt;h2 id=&#34;机&#34;&gt;机&lt;/h2&gt;

&lt;p&gt;LOWYAの&lt;a href=&#34;https://item.rakuten.co.jp/low-ya/f802-g1021-100/?s-id=ph_pc_itemname&#34;&gt;デスク&lt;/a&gt;を使っています（2018/1～）。&lt;/p&gt;

&lt;h3 id=&#34;良いポイント-5&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;140cm x 70cmの大きさなので、作業スペースに困らない

&lt;ul&gt;
&lt;li&gt;例: ノートパソコンとデスクトップPCを並行して使える&lt;/li&gt;
&lt;li&gt;個人的にL字型よりシンプルな形の方が好き&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;モニターアームを設置できるスペースが広い

&lt;ul&gt;
&lt;li&gt;引き出しのある手前側以外はどこでもモニターアームを取り付けられる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2年利用して、大きな問題なし&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;奥行きが 70cm あるため、ノートパソコンやA6サイズのキャンパスノートと併用しても十分な作業スペースが確保できます。&lt;/p&gt;

&lt;!--

![キャンパスノートと併用](/images/posts/2020-03-04-best-buy/mac-open2.jpg)

![Macを開いた状態](/images/posts/2020-03-04-best-buy/mac-open.jpg)

--&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/mac-close2.jpg&#34; alt=&#34;Macを閉じた状態&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪いポイント-5&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;角が角張っているので、腕などに擦れて塗装がハゲる。腕が痛い

&lt;ul&gt;
&lt;li&gt;姿勢によっては角が腕にあたって痛く感じるかもしれない&lt;/li&gt;
&lt;li&gt;欲を言えば角が丸く加工してあるタイプの方が良いかもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;角で腕が痛い問題&#34;&gt;角で腕が痛い問題&lt;/h3&gt;

&lt;p&gt;TRUSCO(トラスコ)の安心クッションを机の角に接着して解決しました（2020/9～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;机の角が当たって痛いのでL字型のクッションを装着した。&lt;br&gt;思ったより快適になった気がする！&lt;br&gt;厚さ（高さ）もいい感じ。&lt;a href=&#34;https://t.co/B5KKp36AJ5&#34;&gt;https://t.co/B5KKp36AJ5&lt;/a&gt;&lt;br&gt;&lt;br&gt;TRUSCO(トラスコ) 安心クッション L字型 大 1本入 ブラック TAC-08 &lt;a href=&#34;https://t.co/uXuOTEeXkx&#34;&gt;pic.twitter.com/uXuOTEeXkx&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1308303960793513984?ref_src=twsrc%5Etfw&#34;&gt;September 22, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00B4T9H78&amp;linkId=2a5612e0f7f8f735b6d55d0f932e3fb2&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;掃除がしずらいという問題もありますが、痛いよりは良いのでこれで運用しています。&lt;/p&gt;

&lt;h3 id=&#34;配線がカオス問題の解決&#34;&gt;配線がカオス問題の解決&lt;/h3&gt;

&lt;p&gt;配線を整理することで掃除機がけが非常に楽になりました。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00BP4S3D6&amp;linkId=740a76ea7dc29b96d1759610b75a4fc5&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;掃除機をかけやすくした☺️ &lt;a href=&#34;https://t.co/hMHo0C2Iwb&#34;&gt;pic.twitter.com/hMHo0C2Iwb&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1323846467191123976?ref_src=twsrc%5Etfw&#34;&gt;November 4, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;LOWYAのデスクだと高さがギリギリだったので、本当に設置できるか寸法は確認したほうが良いと思います。&lt;/p&gt;

&lt;h2 id=&#34;モニター&#34;&gt;モニター&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2IlWooI&#34;&gt;I-O DATAの31.5型 WQHDのモニター EX-LDQ322DB&lt;/a&gt;を使っています（2018/5～）。&lt;/p&gt;

&lt;p&gt;※私が購入したのは1つ前のEX-LDQ321DBというモデルでしたが、今買うなら後継機のEX-LDQ322DBでいい気がします。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0816PPCHZ&amp;linkId=89b2d4f31835374d62ee072f4c3d6bea&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-6&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WQHD（2560x1440）の解像度は使いやすい

&lt;ul&gt;
&lt;li&gt;Windows用の高DPI環境のスケーリングに対応したアプリが少ないので、現状では4K解像度は使いづらい（個人の意見）&lt;/li&gt;
&lt;li&gt;スケーリングなしに広すぎず狭すぎず、ちょうどよいくらいの解像度&lt;/li&gt;
&lt;li&gt;4K解像度でスケーリングなしだと文字が小さすぎて実用性が低い&lt;/li&gt;
&lt;li&gt;アスペクト比が16:9なので、全画面でゲームしたり動画鑑賞するときに無難&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;31.5インチだと、スケーリングなしで普通に文字が読めるくらいの大きさになる

&lt;ul&gt;
&lt;li&gt;WQHDや4Kの高解像度なら、30インチ未満はやめておいたほうがいいかも&lt;/li&gt;
&lt;li&gt;4Kで40インチ以上であれば、スケーリングは不要そうだが、置き場所に困る&lt;/li&gt;
&lt;li&gt;40インチだと視野が広くないと厳しそう（想像）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結論として、WQHDの31インチが作業用としては最適

&lt;ul&gt;
&lt;li&gt;Macがメインならスケーリングありで30インチ前後の4K解像度の方が快適かも&lt;/li&gt;
&lt;li&gt;最近はWindowsがメインの開発環境のため、WQHDを選択&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-6&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;リモコンで操作できない（悪いというほどではない）

&lt;ul&gt;
&lt;li&gt;Nature Remoで操作できれば完璧だった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;補足-1&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;なぜかWQHDの製品はほとんど発売されていないので、選択肢はI-O DATAくらいしかありません。もっと色んなメーカーから発売して欲しいです。&lt;/p&gt;

&lt;p&gt;机が大きすぎて、モニターのスケール感が伝わりにくいと思ったので、キーボードとティッシュ箱と並べた様子です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/display.jpg&#34; alt=&#34;ディスプレイ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;モニターアーム&#34;&gt;モニターアーム&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/39pDucj&#34;&gt;エルゴトロン LX デスクマウント モニターアーム&lt;/a&gt;を使っています（2019/7～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00689HXI4&amp;linkId=3a2e16eee065f517d43c3742428d038b&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-7&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンサイズ：34インチまで、荷重範囲：3.2㎏から11.3㎏までなので、前述のWQHDのモニターでも余裕でホールドできる

&lt;ul&gt;
&lt;li&gt;2年以上使っているが、自重で落ちることはない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;昇降範囲:33cmなので、高めの位置でもホールドできる

&lt;ul&gt;
&lt;li&gt;ノートPCと併用して利用するときに便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;机を壁ギリギリまで配置できて空間が無駄にならない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/monitor-arm.jpg&#34; alt=&#34;モニターアーム&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ノイズキャンセリングヘッドホン&#34;&gt;ノイズキャンセリングヘッドホン&lt;/h2&gt;

&lt;p&gt;SONYのノイズキャンセリングヘッドホン&lt;a href=&#34;https://amzn.to/32NECE6&#34;&gt;WH-1000XM3&lt;/a&gt;を使っています（2019/2～）。&lt;/p&gt;

&lt;p&gt;G733を買ってから使用頻度は減りましたが、外出時にiPhoneで音楽を聞きたいときや、部屋でノイズキャンセリングが欲しい場面では使っています。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07GZ8DZC8&amp;linkId=b56ce3f9b6fc28eb3b74dee541fddb33&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-8&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ノイズキャンセリング性能が神

&lt;ul&gt;
&lt;li&gt;外したときに雑音が気になりすぎて、ノイズキャンセリングのない状態に戻れなくなるレベル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バッテリーが30時間くらい持つので、1日中使える

&lt;ul&gt;
&lt;li&gt;毎日、寝る前に充電して、朝から夜まで利用可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワイヤレスが最高すぎる

&lt;ul&gt;
&lt;li&gt;もう有線には戻れない&lt;/li&gt;
&lt;li&gt;そもそも最近のiPhoneはイヤホンジャックがない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有線でも利用可能なので、飛行機で映画を見るときにも使える&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-7&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;長時間利用すると圧迫感や蒸れが気になる

&lt;ul&gt;
&lt;li&gt;この製品の問題というより、ヘッドフォン自体の特徴&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マイクの性能が悪い

&lt;ul&gt;
&lt;li&gt;Bluetoohのコーデック上の問題かもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;音の遅延がある

&lt;ul&gt;
&lt;li&gt;Bluetoohのコーデック上の問題かもしれない&lt;/li&gt;
&lt;li&gt;音ゲーなどをする人は影響がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;イヤークッションの蒸れる-雑菌が繁殖する問題の解決&#34;&gt;イヤークッションの蒸れる・雑菌が繁殖する問題の解決&lt;/h3&gt;

&lt;p&gt;イヤークッションを交換し、カバーをかけることで緩和しました。&lt;/p&gt;

&lt;p&gt;レザーはアルコール消毒で痛むため、皮脂などの汚れを落とすことが難しく、そもそも肌に触れないように使用すべきというのが個人的な結論です。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B082B4WPNS&amp;linkId=a3789b3da5ffd075781c51ec72b0be3d&#34;&gt;&lt;/iframe&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07QHD7S2L&amp;linkId=e3a29ddf7c8e907bf8d9230b1fabb928&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;pc&#34;&gt;PC&lt;/h2&gt;

&lt;p&gt;ドスパラのCore i7-9700K / RTX2070搭載のフルタワー型のPCを使っています。&lt;/p&gt;

&lt;h3 id=&#34;メモリを増設&#34;&gt;メモリを増設&lt;/h3&gt;

&lt;p&gt;メモリ32GBを追加し、合計48GBになりました（2021/3～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B093GNJS1T&amp;linkId=074f2b41d30705649bd2bb414c9c62df&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;メモリを48GBに増設！&lt;br&gt;&lt;br&gt;DDR4 3200Mhzのメモリだったが、&lt;br&gt;何も設定せずに2666Mhzで動作して良かった👍&lt;br&gt;&lt;br&gt;メモリの外装は深い赤色🧧&lt;br&gt;Amazonの写真よりかっこいい⭐️ &lt;a href=&#34;https://t.co/oVZsP7PS4x&#34;&gt;pic.twitter.com/oVZsP7PS4x&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1374223664846053378?ref_src=twsrc%5Etfw&#34;&gt;March 23, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;購入する前に互換性のチェックをしておくと買い物に失敗しません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マザーボードの型番を調べる&lt;/li&gt;
&lt;li&gt;メーカーページのメモリのサポート一覧（&lt;a href=&#34;https://www.asus.com/jp/Motherboards-Components/Motherboards/All-series/PRIME-B365-PLUS/HelpDesk_QVL/&#34;&gt;例&lt;/a&gt;）を参照し、購入予定のメモリがリストアップされていることを確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インターネット回線&#34;&gt;インターネット回線&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nuro.jp/hikari/&#34;&gt;NURO光&lt;/a&gt;は安くて速いので、3年以上引っ越す予定がなければ、個人的にはオススメできます。&lt;/p&gt;

&lt;p&gt;NURO光 for マンションに加入できる物件なら、月2500円程度なのでかなりコスパが良いです。
戸建てプランだと月5000円程度になってしまいます。&lt;/p&gt;

&lt;p&gt;月額料金とは別に4万円の工事費が30か月の分割払いになりますが、&lt;a href=&#34;https://www.hikari-au.net/nuro/install/fee&#34;&gt;途中解約しなければ実質無料&lt;/a&gt;になります。&lt;/p&gt;

&lt;p&gt;3年未満で解約してしまうと、残りの工事費用を一括で支払う必要があるので、割高になってしまう可能性があります。&lt;/p&gt;

&lt;p&gt;※この記事を鵜呑みにせず最新の情報を各自で調べてください。加入できるプランや条件は申し込み時期や物件ごとに変わりますし、料金プランが非常に複雑なのでこの記事では説明しません。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;NURO 光 for マンション開通記念🎉&lt;br&gt;この速度で月額税別2500円なのは強い😉 &lt;a href=&#34;https://t.co/ompihOEwY5&#34;&gt;pic.twitter.com/ompihOEwY5&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1228952083698569216?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;ファイアウォール機能-ipv6のspi機能の有効化&#34;&gt;ファイアウォール機能・IPv6のSPI機能の有効化&lt;/h3&gt;

&lt;p&gt;NURO光の契約時にレンタルできるZTE製ONU（F660A）のデフォルト設定にはセキュリティ上の問題があるため、ファイアウォール機能・IPv6のSPI機能を有効にして利用しています。詳しくは次の記事を参考にしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yukimomiji.net/nuro-onu-f660a-firewall-setting/&#34;&gt;NURO光のONUのファイアウォール機能を有効にしたメモ | ゆきろぐ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lanケーブルをcat6aに変更&#34;&gt;LANケーブルをCat6Aに変更&lt;/h3&gt;

&lt;p&gt;PCとPS5用のLANケーブルをCat6Aに変更しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;LANケーブルを選ぶための有益情報です。&lt;br&gt;&lt;br&gt;・カテゴリ6A UTPを買いましょう。&lt;br&gt;・RJ-45のカテゴリ7は規格不適合品&lt;br&gt;・一般家庭でSTPケーブルが使えるようなアースを準備するのは非常に難しい&lt;br&gt;・カテゴリ7以上はSTPケーブルが必須&lt;br&gt;・カテゴリ7は家庭用には適しておらず非推奨&lt;a href=&#34;https://t.co/KnZqRiwdvG&#34;&gt;https://t.co/KnZqRiwdvG&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1360555713156640770?ref_src=twsrc%5Etfw&#34;&gt;February 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;買って失敗したモノ&#34;&gt;買って失敗したモノ&lt;/h1&gt;

&lt;p&gt;無駄な買い物の振り返りです。&lt;/p&gt;

&lt;h3 id=&#34;有線ヘッドセット&#34;&gt;有線ヘッドセット&lt;/h3&gt;

&lt;p&gt;個人的に有線は邪魔でした。&lt;/p&gt;

&lt;p&gt;G733（無線）を購入したので、G433（有線）は倉庫番になってしまいました。買い物を失敗したと思います。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B071GBFYT4&amp;linkId=2069d47e7e06263faacf71a9fda9568c&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;買い物が下手すぎる人の写真です。&lt;br&gt;&lt;br&gt;左から順に、&lt;br&gt;・SONY WH-1000XM3（bluetooth）&lt;br&gt;・Logicool G433（有線）&lt;br&gt;・Logicool G733（無線） &lt;a href=&#34;https://t.co/uapx5cXnKg&#34;&gt;pic.twitter.com/uapx5cXnKg&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1356514427550400518?ref_src=twsrc%5Etfw&#34;&gt;February 2, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;無線マウス-1&#34;&gt;無線マウス&lt;/h3&gt;

&lt;p&gt;G703hは評判が良い製品でしたが、自分には合わなかったので3時間くらいで使わなくなりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マウスのホイールクリックが硬すぎる&lt;/li&gt;
&lt;li&gt;高さが大きすぎる（4.3cm）

&lt;ul&gt;
&lt;li&gt;「つまみ持ち・つかみ持ち」にはNG&lt;/li&gt;
&lt;li&gt;おそらく「かぶせ持ち」にはOK&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07SYKKP47&amp;linkId=d0aad011c54de02b7fac25b3a9bc447f&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;G703hという無線のマウスを購入しました！&lt;br&gt;&lt;br&gt;これまで使用していたマウスは壊れました… &lt;a href=&#34;https://t.co/Ayu9UCYjNj&#34;&gt;pic.twitter.com/Ayu9UCYjNj&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1372101400570732545?ref_src=twsrc%5Etfw&#34;&gt;March 17, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;キーボード&#34;&gt;キーボード&lt;/h3&gt;

&lt;p&gt;PC用のG913-TKLとPS5用のTK-FDM105TXBKしか使っていません。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;買い物が下手そう🤣 &lt;a href=&#34;https://t.co/szr0QZ0mPN&#34;&gt;pic.twitter.com/szr0QZ0mPN&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1401029798017654788?ref_src=twsrc%5Etfw&#34;&gt;June 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;番外編&#34;&gt;番外編&lt;/h1&gt;

&lt;p&gt;デスク周りではないですが、リモートワークの健康管理と生活、ステイホームに関連して買ってよかったモノの振り返りです。&lt;/p&gt;

&lt;h2 id=&#34;oculus-quest-2&#34;&gt;Oculus Quest 2&lt;/h2&gt;

&lt;p&gt;VRヘッドセットのOculus Quest 2を買いました（2020/10～）。&lt;/p&gt;

&lt;p&gt;HTC Viveからの乗り換えです。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B09B9F7439&amp;linkId=c81b9e4085271b5f91acbafd67a44d6e&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Oculus Quest 2、届きました！&lt;br&gt;予定より1日早いので嬉しい😆 &lt;a href=&#34;https://t.co/etooBjyPIn&#34;&gt;pic.twitter.com/etooBjyPIn&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1321634309778808833?ref_src=twsrc%5Etfw&#34;&gt;October 29, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Linkケーブル（USB-C to USB-A 3.0 ケーブル）は買ったけどまったく使わなかったので、買い物に失敗しました。&lt;/p&gt;

&lt;h3 id=&#34;良いポイント-9&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;完全ワイヤレスでPC VRが使える（Virtual Desktopを利用）

&lt;ul&gt;
&lt;li&gt;遅延なども感じない&lt;/li&gt;
&lt;li&gt;現在はAir Link（Oculus公式機能）で無線化できるらしいが未検証&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スタンドアローンでも動作する

&lt;ul&gt;
&lt;li&gt;運動不足解消のために毎日のBeat Saberが日課&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HTC Viveと比較

&lt;ul&gt;
&lt;li&gt;解像度が高い&lt;/li&gt;
&lt;li&gt;ベースステーションが不要

&lt;ul&gt;
&lt;li&gt;Nature RemoとHTC Viveのベースステーションが干渉していたので、個人的には大きなメリット&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;値段が安い

&lt;ul&gt;
&lt;li&gt;圧倒的コストパフォーマンス&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-8&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Facebookアカウントが必須

&lt;ul&gt;
&lt;li&gt;発売当初はFacebookアカウントがBANされて文鎮化した人が続出。大きな話題に&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.moguravr.com/oculus-quest-2-facebook-account-problem/&#34;&gt;Oculus Quest 2のアカウント凍結問題 Facebook側の回答は？【10月15日追記】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Quest 2 Eliteストラップは通常使用でヒビが入った

&lt;ul&gt;
&lt;li&gt;完全には壊れていないのでテープで補強して利用中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;裸眼で遊ぶためのレンズ&#34;&gt;裸眼で遊ぶためのレンズ&lt;/h3&gt;

&lt;p&gt;Quest2に限ったことではありませんが、VRヘッドセットは裸眼だと見えない問題があります。&lt;/p&gt;

&lt;p&gt;リーフツアラーの水中マスク用のレンズを買うことで完全に解決しました。レンズは左右で2枚購入する必要があるので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Oculus Quest2にリーフツアラーの水中マスクをぴったり装着できた！&lt;br&gt;&lt;br&gt;レンズ同士もぶつからないし、良さげな気がする。 &lt;a href=&#34;https://t.co/22yXqdBZZZ&#34;&gt;pic.twitter.com/22yXqdBZZZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1323188481930096640?ref_src=twsrc%5Etfw&#34;&gt;November 2, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01AJDQB6E&amp;linkId=afae8593e42afa3260c144f6bbe0fe3c&#34;&gt;&lt;/iframe&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01AJDQ84O&amp;linkId=e95e5fce8486be9ef3e034cfeb75b192&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;注意点としては、レザー製のクッションは素材が柔らかすぎるので、リーフツアラーの度付きレンズの固定ができませんでした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Quest2の接顔パーツのリコール手続きをしたら、&lt;br&gt;VR Coverのフェイスクッションが無料で送られてきました！&lt;br&gt;&lt;br&gt;Quest2付属品はウレタン製で硬かったのですが、こちらはレザー製で柔らかいですね☺️&lt;br&gt;&lt;br&gt;ただし、素材が柔らかすぎるので、リーフツアラーの度付きレンズの固定に工夫が必要かもしれません。 &lt;a href=&#34;https://t.co/WorRPtwW0c&#34;&gt;pic.twitter.com/WorRPtwW0c&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1367712944545361920?ref_src=twsrc%5Etfw&#34;&gt;March 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;ps5&#34;&gt;PS5&lt;/h2&gt;

&lt;p&gt;運良くPS5をAmazonで定価購入できました（2021/2～）。&lt;/p&gt;

&lt;p&gt;PS4所持者でもPS5を買って良かったと思いました。&lt;/p&gt;

&lt;h3 id=&#34;良かった点&#34;&gt;良かった点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;☓ボタンで決定に統一された&lt;/li&gt;
&lt;li&gt;ほとんどのPS4のソフトがそのまま遊べる

&lt;ul&gt;
&lt;li&gt;自分の購入ソフトでは『P.T.』以外は遊べた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PS4からのスペックアップを実感できる

&lt;ul&gt;
&lt;li&gt;PS4だとファンが唸るような高負荷なゲームでもPS5なら静かのケースが多い&lt;/li&gt;
&lt;li&gt;ゲームのロードが高速化される&lt;/li&gt;
&lt;li&gt;Marvel&amp;rsquo;s Spider-Man Remasteredのレイトレによる反射が綺麗&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;My new gear😍&lt;br&gt;&lt;br&gt;左から PS3/PS4/PS5 を並べたけど、PS5の存在感が強い😲 &lt;a href=&#34;https://t.co/d3ptsGWdtN&#34;&gt;pic.twitter.com/d3ptsGWdtN&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1359708607487430657?ref_src=twsrc%5Etfw&#34;&gt;February 11, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08JH72RMK&amp;linkId=2e308c3df692aaa581a1e82fd429fc8d&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;フォトモードのテスト &lt;a href=&#34;https://twitter.com/hashtag/PS5Share?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#PS5Share&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hashtag/MarvelsSpiderManRemastered?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#MarvelsSpiderManRemastered&lt;/a&gt; &lt;a href=&#34;https://t.co/zGS5HC0G6s&#34;&gt;pic.twitter.com/zGS5HC0G6s&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1426635820530683904?ref_src=twsrc%5Etfw&#34;&gt;August 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;マーベルスパイダーマンのリマスター版、完全トロコンしました！&lt;br&gt;あまり理不尽なトロフィーは無かったので楽しみながら取れました。 &lt;a href=&#34;https://twitter.com/hashtag/PS5Share?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#PS5Share&lt;/a&gt; &lt;a href=&#34;https://t.co/Ga26Cy4dZm&#34;&gt;pic.twitter.com/Ga26Cy4dZm&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1426635192094003200?ref_src=twsrc%5Etfw&#34;&gt;August 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪かった点&#34;&gt;悪かった点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PS5専用のソフトが現段階では少ない

&lt;ul&gt;
&lt;li&gt;実質的に高スペックなPS4という印象は拭えない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wifi体重計&#34;&gt;Wifi体重計&lt;/h2&gt;

&lt;p&gt;健康管理のために体重の自動記録ができるWifi体重計を買いました（2020/6～）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Withings Body + 届きました。&lt;br&gt;&lt;br&gt;Withings Health Mateというアプリをインストールして指示に従って操作したら簡単に連携できました。&lt;br&gt;&lt;br&gt;リモートワークが長期化しているので、健康管理をやっていきます。 &lt;a href=&#34;https://t.co/b1DWIbHQir&#34;&gt;pic.twitter.com/b1DWIbHQir&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1409498054491721737?ref_src=twsrc%5Etfw&#34;&gt;June 28, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;!--
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B071LNJTVH&amp;linkId=24cfac29c3bae313168e3137860c8cd5&#34;&gt;&lt;/iframe&gt;
--&gt;

&lt;h3 id=&#34;良いポイント-10&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wifiで自動的に体重を記録できる

&lt;ul&gt;
&lt;li&gt;スマートフォンアプリと&lt;a href=&#34;https://healthmate.withings.com/&#34;&gt;Webサイト&lt;/a&gt;で時系列の確認ができる&lt;/li&gt;
&lt;li&gt;Bluetooth/NFCタイプの体重計は自動的に記録できないので、Wifiタイプが絶対に良い

&lt;ul&gt;
&lt;li&gt;以前はBluetooth/NFCタイプのオムロンの体重体組成計 HBF-254C『カラダスキャン』を使っていたが、アプリとの通信の手間が必要で面倒だった…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デザインが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;上位機種のwithings-body-cardio&#34;&gt;上位機種のWithings Body Cardio&lt;/h3&gt;

&lt;p&gt;上位機種の&lt;a href=&#34;https://amzn.to/3kcpuJz&#34;&gt;Withings Body Cardio&lt;/a&gt;はデザインが個人的に好みではなかったので、このWithings Body +にしました。基本的な機能はWithings Body +で揃っているので満足しています。&lt;/p&gt;

&lt;h2 id=&#34;冷凍庫&#34;&gt;冷凍庫&lt;/h2&gt;

&lt;p&gt;自炊はしない独身男性なので冷凍食品が主食です。&lt;/p&gt;

&lt;p&gt;冷凍食品をまとめ買いするため、冷凍庫が73Lの&lt;a href=&#34;https://amzn.to/3y6kv21&#34;&gt;ツインバード ハーフ＆ハーフ&lt;/a&gt;を買いました（2021/6～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B076Y4LS14&amp;linkId=55a42452ce98f4e480ba1501034ed97a&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;都内在住なので東京ゼロエミポイントとして11,000円相当のギフト券も受け取れました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;細かい注意点としては家電リサイクル券が必要ということくらいですかね。&lt;br&gt;&lt;br&gt;新規購入は対象外（買い替えが対象）のと、家電リサイクル法に従ってリサイクルする必要があります。&lt;br&gt;&lt;br&gt;きちんとリサイクル回収してくれるお店で家電を購入すれば問題ないと思います。&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1418440143245955073?ref_src=twsrc%5Etfw&#34;&gt;July 23, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;※Amazonのマーケットプレイスでは設置やリサイクル回収をしてくれない場合があるので、大手の家電量販店（オンラインサイトも含む）での購入を推奨します。&lt;/p&gt;

&lt;p&gt;※東京ゼロエミポイントの申請には「家電リサイクル券（排出者控え）」が必須なので、古い冷蔵庫を家電リサイクル法に基づいて正しくリサイクルする必要があります。注意しましょう。&lt;/p&gt;

&lt;p&gt;私は楽天市場のJoshin webで注文し、古い冷蔵庫のリサイクル回収を依頼しました。&lt;/p&gt;

&lt;h3 id=&#34;良いポイント-11&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;省エネ基準達成率:101%

&lt;ul&gt;
&lt;li&gt;前述の東京ゼロエミポイントの対象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;冷凍庫が広いので、冷凍食品を買いだめるという目的は達成

&lt;ul&gt;
&lt;li&gt;冷蔵室:73L&lt;/li&gt;
&lt;li&gt;冷凍室:73L&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自動霜取り機能がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;優先度&#34;&gt;優先度&lt;/h1&gt;

&lt;p&gt;予算が限られているなら、この順番で買うと費用対効果が高そうというランキングです（完全に個人の主観）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;椅子&lt;/li&gt;
&lt;li&gt;モニター&lt;/li&gt;
&lt;li&gt;ヘッドセット&lt;/li&gt;
&lt;li&gt;机&lt;/li&gt;
&lt;li&gt;キーボード&lt;/li&gt;
&lt;li&gt;マウス&lt;/li&gt;
&lt;li&gt;Webカメラ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;椅子とモニターは作業効率に大きく影響しそうなので、この2つだけはしっかりしたものを選ぶといいのではないかと思います。&lt;/p&gt;

&lt;p&gt;ヘッドセットもマイクの調子が悪いとオンライン会議の相手にストレスを与えてしまうので、なるべく良いものが好ましそうですね。&lt;/p&gt;

&lt;h1 id=&#34;さいごに&#34;&gt;さいごに&lt;/h1&gt;

&lt;p&gt;気がつくと異常にLogicool製品が増えました。Logicool信者ではないですが、製品の質に安定感があり、幅広いラインナップを取り揃えているので、PC機器のブランド統一するなら有力な選択肢かなと思います。&lt;/p&gt;

&lt;p&gt;G HUBの使い勝手が微妙だったり、稀にフリーズすることがあるので、今後のソフトウェアアップデートに期待しています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>『Unityゲーム プログラミング・バイブル 2nd Generation』のレイマーチングとTimelineの章を執筆しました</title>
      <link>https://gam0022.net/blog/2021/06/08/unity-bible2/</link>
      <pubDate>Tue, 08 Jun 2021 10:30:19 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/06/08/unity-bible2/</guid>
      <description>&lt;p&gt;6/29発売の&lt;a href=&#34;https://amzn.to/3oe2agf&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』&lt;/a&gt;を執筆しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/Collage_Fotor.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/Collage_Fotor.jpg&#34; alt=&#34;『Unityゲーム プログラミング・バイブル 2nd Generation』&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』について、公式ページから紹介文を引用します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unityのゲーム開発現場で最も使われた決定版書籍が、大幅バージョンアップして登場!&lt;/strong&gt;
&lt;strong&gt;ゲームの開発現場で即実践できるスキルが身につく!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本書は、ゲーム開発で最も使われている「Unity」の入門や初級レベルを卒業した方向けの書籍です。ゲームの開発現場で、即実践できるスキルが身につくように、&lt;strong&gt;「37」の最新のトピックを網羅&lt;/strong&gt;しました。&lt;/p&gt;

&lt;p&gt;本書には、第一線の現場で活躍している23名の著者陣が参加しており、ゲーム開発のノウハウやTipsが満載されています。またほとんどのトピックでは、サンプルゲームがダウンロードでき、実際に動かしながら、実践的に学んでいくことが可能です。&lt;/p&gt;

&lt;p&gt;Unityでのゲーム開発のさまざまな場面で、すぐに役立つ1冊となっています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--
![Unityゲーム プログラミング・バイブル 2nd Generation](/images/posts/2021-05-27-unity-bible2/Collage_Fotor.jpg)
--&gt;

&lt;p&gt;37のトピックのうち、私は次の2つを担当しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチング：基礎から応用まで&lt;/li&gt;
&lt;li&gt;Timelineによる映像制作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事では私の担当した内容を簡単に紹介します。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation 』を執筆しました！&lt;br&gt;6/29発売です！&lt;br&gt;&lt;br&gt;・レイマーチング：基礎から応用まで&lt;br&gt;・Timelineによる映像制作&lt;br&gt;&lt;br&gt;の2本を担当しました。&lt;a href=&#34;https://t.co/lYWIxseCON&#34;&gt;https://t.co/lYWIxseCON&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1392725305526161411?ref_src=twsrc%5Etfw&#34;&gt;May 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;レイマーチング-基礎から応用まで&#34;&gt;レイマーチング：基礎から応用まで&lt;/h1&gt;

&lt;div style=&#34;display: flex;&#34;&gt;
    &lt;div style=&#34;width: 50%;&#34;&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg&#34; alt=&#34;サンプル11 距離関数の応用：無限複製編&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style=&#34;width: 50%;&#34;&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg&#34; alt=&#34;サンプル13 距離関数の応用：無限複製とブーリアン演算の合せ技&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;!--
![サンプル11 距離関数の応用：無限複製編](/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg)
![サンプル13 距離関数の応用：無限複製とブーリアン演算の合せ技](/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg)
--&gt;

&lt;p&gt;このセクションでは「レイマーチング」という手法により、グラフィックスを描画する仕組みを紹介しました。&lt;/p&gt;

&lt;p&gt;レイマーチングと似た名前の手法にレイトレーシングがありますが、どちらもレイ、つまり光線をプログラムでシミュレーションしてカメラに映る画像を生成する手法です。&lt;/p&gt;

&lt;p&gt;レイマーチングでは、距離関数という数式で定義した形状に対して、レイとの交差判定を行うことで照明や反射などの計算を行います。
そのため、通常のUnityの描画パイプラインではできないような表現が可能になるということが特徴です。&lt;/p&gt;

&lt;p&gt;このセクションでは、Unityのシェーダーのコードを記述してレイマーチングを実装します。
レイマーチングの基礎から応用まで解説するために、合計13個のサンプルシーンを用意しました。
少しずつ処理を加えることで、一歩ずつレベルアップしながら理解を深められるチュートリアル形式のサンプルシーンになっています。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトは、筆者のGitHubにて公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/UnityBible2-RaymarchingTutorial&#34;&gt;https://github.com/gam0022/UnityBible2-RaymarchingTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このセクションで学べることとそのポイントを、以下にまとめておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチングのアルゴリズムと本質

&lt;ul&gt;
&lt;li&gt;レイマーチングは魔法の道具ではなく、単なる衝突判定の手法&lt;/li&gt;
&lt;li&gt;数式（距離関数）によるプロシージャルなモデリング手法&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンピュータグラフィックスの基礎

&lt;ul&gt;
&lt;li&gt;レイマーチングが扱う範囲はあくまで衝突判定&lt;/li&gt;
&lt;li&gt;ライティングは通常のシェーダーとまったく同じように実装する必要がある&lt;/li&gt;
&lt;li&gt;Unityエンジンのシーンやライティング機能を利用せずに、グラフィックスを描画する一連の流れを学べるため、コンピュータグラッフィックスの学習教材としても有用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;執筆の裏話&#34;&gt;執筆の裏話&lt;/h2&gt;

&lt;p&gt;執筆の裏話としては作図にレイマーチングを利用しました。&lt;/p&gt;

&lt;p&gt;よくあるレイトレーシングの原理（スクリーン上のピクセルに対応する向きのレイを飛ばして交差判定）を解説するための図が欲しかったので、レイマーチングで作図しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;シェーダーは最強の作図ツールなので、&lt;br&gt;レイトレーシングの原理を説明するための図をUnityシェーダーだけで作りました。 &lt;a href=&#34;https://t.co/VuLBhoqEaY&#34;&gt;pic.twitter.com/VuLBhoqEaY&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1343070779961839617?ref_src=twsrc%5Etfw&#34;&gt;December 27, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ちゃんとアニメーションもできるように作り込んだのですが、書籍だと静止画になってしまうのが残念ですね。&lt;/p&gt;

&lt;h1 id=&#34;timelineによる映像制作&#34;&gt;Timelineによる映像制作&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/00_Top.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/00_Top.jpg&#34; alt=&#34;Timelineによる映像制作&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このセクションでは、Unityの&lt;a href=&#34;https://docs.unity3d.com/ja/2019.2/Manual/TimelineOverview.html&#34;&gt;Timeline&lt;/a&gt;を利用した映像作品の制作について解説しました。&lt;/p&gt;

&lt;p&gt;このセクションで学べる項目は、以下の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hecomi/uRaymarching&#34;&gt;uRaymarching&lt;/a&gt;を利用したレイマーチング&lt;/li&gt;
&lt;li&gt;Post-processing Stackの導入からビルトインエフェクトの利用、カスタムエフェクトの作成まで&lt;/li&gt;
&lt;li&gt;Timelineの基本からカスタムトラックの作成まで&lt;/li&gt;
&lt;li&gt;Cinemachineの基本的な使い方から、Post-processing Stackとの連携まで&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
このセクションのサンプルシーンは、以下の各バージョンで作成しています。

- Unity 2020.1.8f1
- uRaymarching: v2.1.1
- Post-processing Stack（v2）2.3.0
- Timeline 1.3.6
- Cinemachine 2.6.3
- TextMeshPro 3.0.3
- Unity Recorder 2.5.2
--&gt;

&lt;p&gt;映像の作成のためには、数多くのUnityの機能とAssetを組み合わせる必要があります。&lt;/p&gt;

&lt;p&gt;それぞれのUnityの機能とAssetにフォーカスを当てた合計12個のサンプルシーンを用意しました。
サンプルシーンはチュートリアル形式で、一歩ずつレベルアップしながら理解を深められるようになっています。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトは、筆者のGitHubで公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/UnityBible2-TimelineTutorial&#34;&gt;https://github.com/gam0022/UnityBible2-TimelineTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/12_BeatSync.gif&#34; alt=&#34;サンプル12 音楽と同期して演出をブラッシュアップ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;執筆の裏話-1&#34;&gt;執筆の裏話&lt;/h2&gt;

&lt;p&gt;これも執筆の裏話になりますが、&lt;strong&gt;デモのメイキングを書籍として出版する&lt;/strong&gt; という個人的な試みに今回はチャレンジしました。&lt;/p&gt;

&lt;p&gt;このツイートが伏線でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;RevisionのWriteup先には意外な &amp;quot;媒体&amp;quot; を予定しています&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1379103521409101826?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;サンプルの完成形のデモが『Secret stage BOSS』です。Revision2021のPC Demo Compoで初リリースしました。&lt;/p&gt;

&lt;p&gt;グラフィックスは私（&lt;a href=&#34;https://twitter.com/gam0022/&#34;&gt;@gam0022&lt;/a&gt;）、サウンドはさだきちさん（&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;）が担当しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Secret stage BOSS&amp;quot; by &lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/sadakkey?ref_src=twsrc%5Etfw&#34;&gt;@sadakkey&lt;/a&gt;&lt;br&gt;&lt;br&gt;Our new PC Demo for &lt;a href=&#34;https://twitter.com/hashtag/Revision2021?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Revision2021&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/revision_party?ref_src=twsrc%5Etfw&#34;&gt;@revision_party&lt;/a&gt;)&lt;br&gt;&lt;br&gt;It&amp;#39;s a Massive Greetings to &amp;quot;2nd stage BOSS&amp;quot; &lt;a href=&#34;https://t.co/vVWJJB4cyS&#34;&gt;pic.twitter.com/vVWJJB4cyS&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1378967812463501313?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;『Secret stage BOSS』は&lt;a href=&#34;https://youtu.be/SFoyJED5A4s&#34;&gt;『2nd stage BOSS by 0x4015&amp;amp;YET11』&lt;/a&gt;というデモシーン歴史に残る伝説級のデモのオマージュ作品です。&lt;/p&gt;

&lt;p&gt;自機やボスが登場するシューティングゲーム風のストーリーを、自分たちなりのビジュアルと音楽のスタイルで再現しました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/srO7IxNckZ8&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;GitHub上でUnityプロジェクトを丸ごと公開しているので、もし興味があれば参考にしてください。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;You can see the source code &amp;amp; Unity project on GitHub!&lt;br&gt;&lt;br&gt;ソースコードとUnityプロジェクトをGitHubで公開しました！&lt;a href=&#34;https://t.co/dQJV35DGKB&#34;&gt;https://t.co/dQJV35DGKB&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1378975301456130049?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;6年前にレイマーチングと出会ってから、レイマーチングの面白さに魅せられ続け、レイマーチングに関するさまざまな情報を発信してきました。
今回、Unityの一般ユーザー向けの書籍でレイマーチングについて解説をする機会をいただけたことをとても光栄に思います。
これまでシェーダーと縁がなかった方にもシェーダーに興味をもってもらえれば幸いです。&lt;/p&gt;

&lt;p&gt;日本語で書かれたレイマーチングの入門情報はかなり充実してきましたが、その次のステップの情報が不足しているように感じていました。
本書ではレイマーチングの中級者向けの情報として、距離関数によるモデリングや本格的なライティングまで解説しました。
レイマーチングで球体のレンダリングはできたけど、その次のステップが分からないという方にぜひ読んでいただきたいです。&lt;/p&gt;

&lt;p&gt;本書は定価8580円と気軽に購入しづらいかもしれませんが、&lt;strong&gt;フルカラーの1112ページ、扱うテーマの広さ、得られる情報の密度&lt;/strong&gt;を踏まえると妥当（むしろお買い得！）な値段だと思います。
初版部数はAmazonでの予約数をもとに決まるそうなので、ぜひ&lt;a href=&#34;https://amzn.to/3oe2agf&#34;&gt;Amazonから予約&lt;/a&gt;をお願いします！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;リアルタイムレンダリング 第4版よりもページ数が多いことに気がついて驚いています。 &lt;a href=&#34;https://t.co/zJGUYOm8XL&#34;&gt;https://t.co/zJGUYOm8XL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1393040315762634755?ref_src=twsrc%5Etfw&#34;&gt;May 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;追記-2021-08-21&#34;&gt;追記（2021-08-21）&lt;/h1&gt;

&lt;p&gt;7/29の「Unityゲーム プログラミング・バイブル 2nd Generation 出版記念トーク グラフィックス編」にゲスト出演しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://learning.unity3d.jp/7437/&#34;&gt;Unityゲーム プログラミング・バイブル 2nd Generation 出版記念トーク グラフィックス編&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>お名前.comからGoogleドメインに乗り換えました（2021版）</title>
      <link>https://gam0022.net/blog/2021/05/06/onamae-com-to-google-domain/</link>
      <pubDate>Thu, 06 May 2021 02:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/05/06/onamae-com-to-google-domain/</guid>
      <description>&lt;p&gt;当サイト（&lt;a href=&#34;http://gam0022.net/&#34;&gt;gam0022.net&lt;/a&gt;）のドメイン管理の事業者を&lt;a href=&#34;https://www.onamae.com/&#34;&gt;お名前.com&lt;/a&gt;から&lt;a href=&#34;https://domains.google/intl/ja_jp/&#34;&gt;Googleドメイン&lt;/a&gt;に移管しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-05-onamae-com-to-google-domain/transfer.png&#34; alt=&#34;お名前.comからGoogleドメインに移管&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ドメイン移管は思ったよりもずっと簡単で待ち時間を含めても1時間以内に完了しました。&lt;/p&gt;

&lt;p&gt;この程度の手間だったら、もっと早くやっておけば良かったです。&lt;/p&gt;

&lt;p&gt;移管するとドメインの更新日が1年延長されて、Googleドメインに1年分のドメイン費用を支払う形になります。&lt;/p&gt;

&lt;p&gt;つまり、&lt;strong&gt;お名前.comの更新日はずっと先の日付だろうと問題なく移管できます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当サイトのドメインの更新日は2028年で7年後くらいでした。&lt;/p&gt;

&lt;h1 id=&#34;移管手順&#34;&gt;移管手順&lt;/h1&gt;

&lt;p&gt;せっかくなので簡単に手順をメモしておきます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;お名前.comでドメインのロック解除

&lt;ul&gt;
&lt;li&gt;ドメイン設定 &amp;gt; その他の機能 &amp;gt; ドメイン移管ロック&lt;/li&gt;
&lt;li&gt;移管したいドメインのステータスが「OFF」になっていたら問題ありません&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お名前.comでAuthコードを入手

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.onamae.com/guide/p/80&#34;&gt;ドメイン詳細&lt;/a&gt;からAuthコードの[表示]ボタンを押すと表示されます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Googleドメインでドメイン移管手続き

&lt;ul&gt;
&lt;li&gt;必要な情報を入力して進めるだけでOKです。とくに悩む要素はないと思います

&lt;ul&gt;
&lt;li&gt;移管したいドメイン&lt;/li&gt;
&lt;li&gt;Authコード&lt;/li&gt;
&lt;li&gt;支払い用クレジットカード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お名前.comでドメイン移管を承認

&lt;ul&gt;
&lt;li&gt;私の場合、Googleドメイン上の操作から &lt;strong&gt;30分くらい経過してから&lt;/strong&gt; 「【重要】トランスファー申請に関する確認のご連絡 gam0022.net」というメールが来ました&lt;/li&gt;
&lt;li&gt;メールのURLから承認ボタンを押せば作業完了です&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;AレコードやAAAAレコードなどのDNS設定も自動で引き継がれていました。&lt;/p&gt;

&lt;p&gt;サブドメインの設定までは引き継がれなかったので手動で再設定する必要がありました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;お名前comからGoogleドメインに乗り換えた。&lt;br&gt;Aレコードなどの設定は自動で引き継がれており、有能だなぁ。 &lt;a href=&#34;https://t.co/utmwAwougz&#34;&gt;pic.twitter.com/utmwAwougz&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1387671139170754563?ref_src=twsrc%5Etfw&#34;&gt;April 29, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考記事&#34;&gt;参考記事&lt;/h2&gt;

&lt;p&gt;こちらの記事に画像つきで手順が書かれています。この記事が分かりにくかったら参考にすると良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/fnifni/items/0daca17e0750659f2866&#34;&gt;お名前comからgoogle domainsにドメイン移管する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;移管した理由&#34;&gt;移管した理由&lt;/h1&gt;

&lt;p&gt;GMO社員の方もこのブログを見ることがあるかもしれないので、お名前.comを解約した理由を記しておきます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;お名前.comからの迷惑メールが多すぎる&lt;/li&gt;
&lt;li&gt;UIが使いづらい&lt;/li&gt;
&lt;li&gt;経済的理由&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-お名前-comからの迷惑メールが多すぎる&#34;&gt;1. お名前.comからの迷惑メールが多すぎる&lt;/h2&gt;

&lt;p&gt;1.は業界では有名な評判ですね。お名前.comからの迷惑メールは本当に多すぎます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tk-create.com/domain/onamae-com-mail-stop/&#34;&gt;お知らせメールを受信しない設定&lt;/a&gt;でしたが、「gam0022.netの期限日を定期的にご確認ください。」というメールが来ました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新日は7年後の2028年でしたが、「お知らせメールの受信設定が無効となっている方にも配信されております。」とのことです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;温厚な私でも流石にイラッとしました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;お知らせメールの受信設定が無効となっている方にも配信されております。&lt;br&gt;&lt;br&gt;じゃあないんだよ &lt;a href=&#34;https://t.co/RgkauLvEtX&#34;&gt;pic.twitter.com/RgkauLvEtX&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1387313503879368705?ref_src=twsrc%5Etfw&#34;&gt;April 28, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-uiが使いづらい&#34;&gt;2. UIが使いづらい&lt;/h2&gt;

&lt;p&gt;2.もひどいと思います。使用頻度のもっとも高いであろうDNS設定がなぜかメニューの深い階層に埋もれていて使いづらいです。
対照的にGoogleドメインはメニューがシンプルで使いやすいと感じました。&lt;/p&gt;

&lt;h2 id=&#34;3-経済的理由&#34;&gt;3. 経済的理由&lt;/h2&gt;

&lt;p&gt;3.については誤差でしたが、1年間の.netのドメインの料金を比較すると、Googleドメインの方が88円だけ節約できました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;サービス名&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1年間の費用（税込）&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1年間の費用（税別）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;お名前.com&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1628円&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1480円&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Googldドメイン&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1540円&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1400円&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;補足すると、お名前.comでは初年度は安く、2年目以降に値上がりします。&lt;/p&gt;

&lt;p&gt;1年目は35円と激安なのですが、2年目以降は上記の更新料がかかります。詳細はこちらを見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.onamae.com/service/d-price/&#34;&gt;ドメインの料金・種類一覧｜ドメイン取るならお名前.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;お名前-comの初年度が激安な件&#34;&gt;お名前.comの初年度が激安な件&lt;/h3&gt;

&lt;p&gt;この手法はあまり推奨しないほうが良いと思いますが…&lt;/p&gt;

&lt;p&gt;ほとんどの&lt;a href=&#34;https://help.onamae.com/answer/8577&#34;&gt;ドメインの取得から60日経過すれば移管できる&lt;/a&gt;ようになります。&lt;/p&gt;

&lt;p&gt;お名前.comは初年度がありえないほど安いので、ドメインの取得だけお名前.comで行なって、60日経過後に他社に移管することでコストを最小化できそうな気がしています。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;冒頭で述べたとおり、1時間もあればドメインの移管はできました。
お名前.comの迷惑メールに困っている方は、Googleドメインに乗り換えてみてはいかがでしょうか？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows Terminalの背景でレイマーチング</title>
      <link>https://gam0022.net/blog/2021/03/08/raymarching-in-windows-terminal/</link>
      <pubDate>Mon, 08 Mar 2021 01:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/03/08/raymarching-in-windows-terminal/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-02-26-raymarching-in-windows-terminal/raymarching-in-windows-terminal.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-02-26-raymarching-in-windows-terminal/raymarching-in-windows-terminal.jpg&#34; alt=&#34;Raymarching in Windows Terminal&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windows Terminal 1.6から任意のHLSLのPixel Shadersを実行できるようになったので、Windows Terminalの背景でレイマーチングを実行してみました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Raymarching in Windows Terminal&lt;br&gt;&lt;br&gt;Windows Terminal 1.6 から任意の Pixel Shaders を実行できるようになったので、Windows Terminal の背景でレイマーチングを実行してみた🎉 これは楽しすぎる🤣 &lt;a href=&#34;https://t.co/WX2JqUZtuL&#34;&gt;pic.twitter.com/WX2JqUZtuL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1361485111473045505?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;2021-02-16のツイート時点では、Windows Terminal 1.6はまだPreview版なので、GitHubのReleasesページから入手する必要がありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/releases/tag/v1.6.10412.0&#34;&gt;https://github.com/microsoft/terminal/releases/tag/v1.6.10412.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2021-03-07現在では、Windows Terminal 1.6からPreviewが外れてMicrosoft Storeから入手できるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/ja-jp/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab&#34;&gt;Windows Terminal を入手 - Microsoft Store ja-JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows TerminalのPixel Shaders機能の詳細については、公式ドキュメントをご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/tree/main/samples/PixelShaders&#34;&gt;https://github.com/microsoft/terminal/tree/main/samples/PixelShaders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;任意のHLSLのシェーダーのファイルを作成して、Windows Terminalのsettings.jsonの &lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; からHLSLファイルのパスを設定するだけで、気軽に任意のシェーダーを実行できます。素晴らしい！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;profiles&amp;quot;:
  {
    &amp;quot;defaults&amp;quot;:
    {
      &amp;quot;experimental.pixelShaderPath&amp;quot;: &amp;quot;C:\\Users\\gam0022\\Dropbox\\windows-terminal\\terminal\\samples\\PixelShaders\\Raymarching.hlsl&amp;quot;
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レイマーチング用のシェーダーはUnityで下書きしたものをWindows Terminal用に移植して実装しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Raymarching in Windows Terminal のシェーダーを公開しました。&lt;br&gt;&lt;br&gt;（シェーダー初心者にも優しい）日本語コメントつき！&lt;a href=&#34;https://t.co/GPEpIlHOyD&#34;&gt;https://t.co/GPEpIlHOyD&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1361495940356476929?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;HLSLのエラーの行番号が表示されないので、複雑なシェーダーを書くのはちょっと苦労しました。&lt;/p&gt;

&lt;p&gt;基本的にはUnityのShaderLab用のプロパティや &lt;code&gt;_LightColor0&lt;/code&gt; などのビルドインのシェーダー変数を定数（static const）として宣言する修正だけで移植できました。&lt;/p&gt;

&lt;p&gt;Windows Terminal用のPixel Shadersでは、以下のテクスチャのサンプラーや定数が定義されていました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// The terminal graphics as a texture
// ターミナルの文字などを含んだターミナルのレンダリング結果のサンプラー
Texture2D shaderTexture;
SamplerState samplerState;

// Terminal settings such as the resolution of the texture
cbuffer PixelShaderSettings {
  // The number of seconds since the pixel shader was enabled
  // 秒単位の時間
  float Time;

  // UI Scale
  // UIのスケール
  float Scale;
  
  // Resolution of the shaderTexture
  // ピクセル単位の背景の解像度
  float2 Resolution;
  
  // Background color as rgba
  // 背景の色
  float4 Background;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;shaderTexture&lt;/code&gt; はターミナルの文字などを含んだターミナルのレンダリング結果のサンプラーになるので、今回は背景に加算合成する形でシェーダーを実装しました（加算合成なので後からレイマーチングを加算しても結果は同じになるため、描画順を気にしなてくて良い）。&lt;/p&gt;

&lt;h1 id=&#34;hlslのホットリロードでシェーダーライブコーディング環境を実現&#34;&gt;HLSLのホットリロードでシェーダーライブコーディング環境を実現&lt;/h1&gt;

&lt;p&gt;Windows Terminal 1.6の挙動では、シェーダーを再コンパイルして結果を更新するために以下の手順が必要だったので、ライブコーディングには不向きでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; で指定したHLSLシェーダーに差分を出してファイル保存&lt;/li&gt;
&lt;li&gt;Windows Terminalの &lt;code&gt;settings.json&lt;/code&gt; の &lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; の値に差分を出してファイル保存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初の動画ではシェーダーの描画結果をリアルタイムで更新するために、Vimで2つのファイルを同時編集することで、リアルタイムにライブコーディングっぽいことをしていましたが、かなり操作が忙しいので非実用的でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vimの左側ペイン: HLSLのシェーダー&lt;/li&gt;
&lt;li&gt;Vimの右側ペイン: Windows Terminalのsettings.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、HLSLの更新を検知して、Windows Terminalの &lt;code&gt;settings.json&lt;/code&gt; を書き換えることで、HLSLのホットリロードを実現するスクリプトをnode.jsで実装しました。&lt;/p&gt;

&lt;p&gt;これによって、Windows Terminalの背景でHLSLシェーダーライブコーディングを実現できるようになりました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Windows Terminal 上のHLSLシェーダーライブコーディング環境を実現するスクリプトをGitHubに公開しました！&lt;br&gt;&lt;br&gt;&amp;gt; HLSLの変更を監視して、settings.json を書き換え&lt;a href=&#34;https://t.co/hjB2MqgsSx&#34;&gt;https://t.co/hjB2MqgsSx&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1361706800282656769?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Windows Terminalの &lt;code&gt;settings.json&lt;/code&gt; に毎回差分を出すために、HLSLファイルをコピーした一時ファイルを作成して、元のファイルのパスと一時ファイルのパスを交互に切り替えて &lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; に設定するような実装としました。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;Windows TerminalというMicrosoft公式のアプリ上でHLSLシェーダーライブコーディング環境を実現できるのは熱いですね！楽しい！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>メガデモ勉強会2021で発表しました</title>
      <link>https://gam0022.net/blog/2021/02/15/demoscene-study-session/</link>
      <pubDate>Mon, 15 Feb 2021 13:26:18 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/02/15/demoscene-study-session/</guid>
      <description>&lt;p&gt;昨日の2/14（バレンタインデー）に開催された&lt;a href=&#34;https://connpass.com/event/200294/&#34;&gt;The Tokyo Demo Fest team presents: メガデモ勉強会2021&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;私は「64KBのWebGLデモを実装する技術とデモ制作から得た『学びと発見』」というタイトルで発表を行いました。&lt;/p&gt;

&lt;p&gt;発表スライドはこちらです。&lt;/p&gt;

&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vRd-L7WcWWzcoE9zNpBsJdeMjJf9HelDg1Pto8cFGJTjinejpjZ1mGmzWCZPANJZ0QOCObuVOIdPuy-/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%A1%E3%82%AC%E3%83%87%E3%83%A2%E5%8B%89%E5%BC%B7%E4%BC%9A?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#メガデモ勉強会&lt;/a&gt; の発表資料です！&lt;br&gt;&lt;br&gt;Revision2020のPC 64K Introで優勝したデモ作品『RE: SIMULATED』を題材にして、効率的なデモ制作に必要なエディタ機能やWebGLのプロジェクトの構成、制作中に直面した問題と解決について解説しました。&lt;br&gt;&lt;br&gt;レイマーチングはいいぞ！&lt;a href=&#34;https://t.co/QWHOXHmZqu&#34;&gt;https://t.co/QWHOXHmZqu&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1360889255669633024?ref_src=twsrc%5Etfw&#34;&gt;February 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Revision2020のPC 64K Introで優勝したデモ作品『RE: SIMULATED』を題材にして、効率的なデモ制作に必要なエディタ機能やWebGLのプロジェクトの構成、制作中に直面した問題と解決方法について解説しました。&lt;/p&gt;

&lt;p&gt;発表の締めとして「CGを学ぶことで世界の解像度を上げるのが楽しい」「レイマーチングはCG入門に最適」という持論について語りました。&lt;/p&gt;

&lt;h1 id=&#34;質疑応答と補足&#34;&gt;質疑応答と補足&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;質問1: シェーダーを分割することで容量がどのくらい増えるか？

&lt;ul&gt;
&lt;li&gt;マルチパスを前提のエンジン設計にしたので、シェーダー分割してもTypeScriptのコード量は増えない&lt;/li&gt;
&lt;li&gt;重複コードはzlib（pnginator.rb）で圧縮されるため、シェーダーの圧縮後のコードもほとんど増えない&lt;/li&gt;
&lt;li&gt;前半と後半で2分割したときは45byteだけ増えた（&lt;a href=&#34;https://github.com/gam0022/resimulated/pull/112&#34;&gt;PR&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;質問2: シェーダーの数と行数について

&lt;ul&gt;
&lt;li&gt;サウンドシェーダーは1ファイル。グラフィックス用のシェーダーは合計10ファイル&lt;/li&gt;
&lt;li&gt;サウンドシェーダーは行数が1800行ほどだが、zlibで効率よく圧縮できるので、最終的なファイル容量にはあまり影響しなかった&lt;/li&gt;
&lt;li&gt;グラフィックス用のシェーダーは最大（宇宙空間のレイマーチング）で700行、最小（Bloomのポストエフェクト）で10行ほど&lt;/li&gt;
&lt;li&gt;用途によって幅があるが、レイマーチング用のシェーダーだと平均して400行くらい&lt;/li&gt;
&lt;li&gt;Shadertoyと同じようにCommonのシェーダーの仕組みも用意したが、重複したシェーダーはzlibで圧縮されるため、容量削減の効果は低かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;質問3: ディレクションについて

&lt;ul&gt;
&lt;li&gt;制作前に打ち合わせをしてBPMは決めていた

&lt;ul&gt;
&lt;li&gt;音楽と絵の同期はBPMで行っているので重要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方向性は絵が先行&lt;/li&gt;
&lt;li&gt;尺については音楽が先行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;補足1: Bloomのポストエフェクトはエンジンのビルトイン機能にした

&lt;ul&gt;
&lt;li&gt;縮小バッファーを利用するマルチパスのBloomにしたので、ビルトインにしたほうがサイズを小さく効率よく実装できそうだったから&lt;/li&gt;
&lt;li&gt;フォント描画用のテクスチャ生成機能などShadertoyにはない仕様も何個か実装した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;補足2: OpenGLよりWebGLの方がGLSLのコンパイル時間が長い

&lt;ul&gt;
&lt;li&gt;WebGLのデモではなく、OpenGLのexeによるデモにすれば、GLSLのコンパイル時間を短縮できる&lt;/li&gt;
&lt;li&gt;Windows版のChromeおよびFirefoxでは、ANGLEを経由してDirect3D上でWebGLを実現しているため、ANGLEを経由する分だけGLSLコンパイルに時間のかかるケースが多い（&lt;a href=&#34;https://twitter.com/gaziya5/status/1361134297315348482&#34;&gt;Twitter&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome.exe --use-angle=gl&lt;/code&gt; というオプション付きでChromeを起動すると、ANGLEを経由せずにWebGLを利用できる（&lt;a href=&#34;https://twitter.com/gaziya5/status/1350418640093413377&#34;&gt;Twitter&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;かなり久しぶりに日本のデモシーンの人たちとワイワイできて楽しかったです！&lt;/p&gt;

&lt;p&gt;最後のTokyoDemoFestは2018年の12月なので、もう2年以上も前なんですよね。時間が経つのは早いです。&lt;/p&gt;

&lt;p&gt;discord上の懇親会では「どうすればライブコーディングを普及できるのか？一般人でも理解できるような実況が必要という仮説」「物理的な会場のクラブの体験とVRの違い」など興味深いお話を聞けて面白かったです。&lt;/p&gt;

&lt;p&gt;素晴らしいイベントを企画・開催してくださったTDFのオーガナイザーのみなさん、本当にありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;関連記事&#34;&gt;関連記事&lt;/h1&gt;

&lt;p&gt;過去の関連登壇や記事のリンクです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2020/04/30/revision2020/&#34;&gt;Revision2020 PC 64K Intro 優勝作品『RE: SIMULATED』の技術解説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/03/16/demoscene-study-session/&#34;&gt;メガデモ勉強会!2018で発表しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2016/02/16/glsl-tech/&#34;&gt;GLSL シェーダテクニック勉強会 #GLSLTechで登壇しました&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;この勉強会も5年前のバレンタインデーだったので何かの運命を感じました&lt;/li&gt;
&lt;li&gt;私がレイマーチングを始めてから5年以上も経過しているのもちょっと驚きでした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>第2回 KLab Expert Camp「テーマ：シェーダー」のメンターをしました</title>
      <link>https://gam0022.net/blog/2020/09/17/kec2/</link>
      <pubDate>Thu, 17 Sep 2020 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/09/17/kec2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-09-14-kec2/name-card-original.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-09-14-kec2/name-card.jpg&#34; alt=&#34;ネームカード&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9/8～9/12に開催されたKLab Expert Camp（KEC）の第2回にメンターとして参加しました。&lt;/p&gt;

&lt;p&gt;今回のKLab Expert Campは「シェーダー」がテーマでした。&lt;/p&gt;

&lt;p&gt;5日間（平日4日間＋土曜日に成果発表＆懇親会）の日程でひたすらシェーダーを書き続けるという、エクストリームかつ珍しい内容の技術系インターンです。&lt;/p&gt;

&lt;p&gt;当日の様子はハッシュタグ &lt;a href=&#34;https://twitter.com/search?q=%23KLabExpertCamp%20since%3A2020-01-01_00%3A00%3A00_JST%20until%3A2020-12-31_00%3A00%3A00_JST&amp;amp;src=typed_query&#34;&gt;#KLabExpertCamp&lt;/a&gt; から確認できます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;開催の経緯&#34;&gt;開催の経緯&lt;/h1&gt;

&lt;p&gt;メンターとして、私（&lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt;）とかねたさん（&lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;@kanetaaaaa&lt;/a&gt;）、運営スタッフとして人事のKの27乗さん（&lt;a href=&#34;https://twitter.com/oktillion27&#34;&gt;@oktillion27&lt;/a&gt;）の3名で今回のイベントを企画・運営しました。&lt;/p&gt;

&lt;p&gt;私はデモパーティ（デモを鑑賞したり完成度を競ったりして楽しむイベント）が好きなので、デモパーティを意識して企画を考えました。&lt;/p&gt;

&lt;p&gt;大画面で自分たちの作品を上映して、参加者でワイワイするのがすごく楽しいので、そのような雰囲気をデモパーティに参加したことのない学生にも感じて欲しいという思いがありました。&lt;/p&gt;

&lt;p&gt;そして、優秀な若人にもデモシーンに参入してもらい、国内のデモシーンをもっと盛り上げたいと思っていました。&lt;/p&gt;

&lt;p&gt;当初は3月にオフラインで開催する予定だったのですが、昨今の感染症に関する状況を鑑み、オンラインでの開催となりました。&lt;/p&gt;

&lt;p&gt;オンライン開催だったので、大画面で上映はできませんでしたが、デモパーティの楽しさを少しでも参加者に感じ取ってもらえたのならば、とても嬉しいです。&lt;/p&gt;

&lt;p&gt;昨今の感染症の影響もあって、残念ながら国内のデモパーティは開催の見通しが立たない状況になってしまったので、参加者にとって代替イベントのひとつになっていれば幸いです。&lt;/p&gt;

&lt;p&gt;開催の経緯については、かねたさんの参加レポートを合わせて読むことで、内容を補完できると思います。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; でメンターをした感想などを書きました。&lt;br&gt;参加者の皆様ありがとうございました。そしてお疲れ様でした。&lt;a href=&#34;https://t.co/0pOSbv5xJN&#34;&gt;https://t.co/0pOSbv5xJN&lt;/a&gt;&lt;/p&gt;&amp;mdash; かねた (@kanetaaaaa) &lt;a href=&#34;https://twitter.com/kanetaaaaa/status/1306044957556273154?ref_src=twsrc%5Etfw&#34;&gt;September 16, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;インターンの内容について&#34;&gt;インターンの内容について&lt;/h1&gt;

&lt;p&gt;オンライン開催ということで、Google MeetとSlackを利用しました。&lt;/p&gt;

&lt;p&gt;メンター2人で約1時間の講義を合計4つ行い、講義のない残りの時間はひたすら参加者の制作時間としました。&lt;/p&gt;

&lt;p&gt;参加した学生は13名でした。全国からシェーダーに強い優秀な学生が集まりました。&lt;/p&gt;

&lt;p&gt;少なくともメンターの1人は常時Google Meetに待機して、Slackでも随時質問を受け付ける体制にしました。&lt;/p&gt;

&lt;p&gt;そして、最終日には成果発表＆懇親会を行いました。&lt;/p&gt;

&lt;p&gt;オンライン開催となってしまった分、少しでも参加者に楽しんでいただけるような工夫として、5日分のノベルティやお菓子を郵送しました（Kの27乗さんのアイデアで、郵送などの準備も全部してもらった）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;4日目の箱の中には、こんなものをご用意しました！&lt;br&gt;&lt;br&gt;（お菓子とノベルティグッズ（モバイルバッテリー）のセットです。開発に集中しすぎて、もしスマホの充電を忘れてしまったときにぜひ使ってくださいね！）&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;a href=&#34;https://t.co/7ssZogITE4&#34;&gt;pic.twitter.com/7ssZogITE4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kの27乗 (@oktillion27) &lt;a href=&#34;https://twitter.com/oktillion27/status/1304247375393816576?ref_src=twsrc%5Etfw&#34;&gt;September 11, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;講義&#34;&gt;講義&lt;/h1&gt;

&lt;p&gt;運営内で協議した結果、講義の資料の公開については、参加者のみにしました。&lt;/p&gt;

&lt;p&gt;この記事では、講義の内容について可能な範囲で概要を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;担当講義1-シェーダー芸のプロダクション利用&#34;&gt;担当講義1「シェーダー芸のプロダクション利用」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;2日目の本日は、この後2つ目の講義を実施予定です。&lt;br&gt;&lt;br&gt;外部非公開の内容の為、このツイートで詳細をご紹介できません…！参加者のみなさんに、本日の講義もワクワクしてもらえるような内容だと嬉しい限りです！&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kの27乗 (@oktillion27) &lt;a href=&#34;https://twitter.com/oktillion27/status/1303591474601144321?ref_src=twsrc%5Etfw&#34;&gt;September 9, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;KLabはモバイルゲームを開発・運用している会社です。&lt;/p&gt;

&lt;p&gt;そこで、「シェーダーがモバイルゲームにどのように活用されているか？」について、実践的な内容を紹介しました。&lt;/p&gt;

&lt;p&gt;モバイル端末の性能はかなり幅広く、性能が低いGPUの端末もたくさん存在します。&lt;/p&gt;

&lt;p&gt;レイマーチングのようなフラグメントシェーダーを酷使する高負荷なシェーダーの利用は難しいため、一般的にはシェーダー芸を活用するイメージは沸かないかもしれません。&lt;/p&gt;

&lt;p&gt;しかし、シェーダー芸をうまく活用すれば、むしろレンダリングの負荷を削減できます！&lt;/p&gt;

&lt;p&gt;たとえば、頂点シェーダーでアニメーション計算やスキニング計算をCPU計算からGPU計算に置き換えば、アプリの負荷がCPUバウンドの場合は性能向上ができます。&lt;/p&gt;

&lt;p&gt;また、商業用のタイトルでどんなシェーダーが利用されているのかについて、具体的な事例を紹介しました。&lt;/p&gt;

&lt;h2 id=&#34;担当講義2-シェーダー芸で役立ちそうな知識の詰め合わせ&#34;&gt;担当講義2「シェーダー芸で役立ちそうな知識の詰め合わせ」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3DCGのための行列（導出方法や重要な特徴）、ノイズ、イージング関数など、個人的に「これだけは知っておきたい」という知識をピックアップして紹介しました。&lt;br&gt;おまけとして、便利なツールの紹介もしました。&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;a href=&#34;https://t.co/VOoRInqMtO&#34;&gt;https://t.co/VOoRInqMtO&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ CGWORLD 10月号に寄稿 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1304007251795914754?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;3DCGのための行列（導出方法や重要な特徴）、ノイズ、イージング関数など、個人的に「これだけは知っておきたい」という知識をピックアップして紹介しました。おまけとして、便利なツールの紹介もしました。&lt;/p&gt;

&lt;p&gt;行列は3DCGにおいては必須科目ですが、3DCGに特化した分かりやすい資料や説明が少ないと以前から感じていました。&lt;/p&gt;

&lt;p&gt;そこで、行列について「3DCGに特化」した直感的で分かりやすい説明を目指して講義を行いました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基底ベクトル&lt;/strong&gt;から&lt;strong&gt;視覚的かつ直感的&lt;/strong&gt;に、「回転行列、拡大縮小の行列、せん断」などの線形変換の行列を生成できることを示して、よくある変換行列の定義は覚える必要がないことを説明したり、
回転行列の転置が逆行列となる直交行列の性質を説明したりしました。また、線形変換やアフィン変換などの用語についても説明しました。&lt;/p&gt;

&lt;p&gt;さらに、ノイズやイージング関数で映像作品の品質を向上するテクニックを具体例を踏まえながら紹介しました。&lt;/p&gt;

&lt;p&gt;最後に、Shadertoyの再生時間をシークしたり、連番でPNG保存するChromeの拡張機能、連番画像からffmpegでmp4に変換する方法、YouTubeにアップロードするための最適なビットレート調整のパラメーターなど秘伝のタレ的な知識も公開しました。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;参加者の方々、5日間お疲れさまでした！&lt;br&gt;&lt;br&gt;レベルの高い作品だらけで驚かされました😍&lt;br&gt;この調子でデモパーティにもエントリーして欲しいです！&lt;br&gt;&lt;br&gt;メンターという立場で参加しましたが、参加者のみなさんに刺激をたくさん貰いました！&lt;br&gt;とても楽しかったです！ありがとうございました！&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ CGWORLD 10月号に寄稿 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1304769327380406272?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;まず、参加者のレベルが非常に高いことに驚かされました。&lt;/p&gt;

&lt;p&gt;インターンの選考をしている時点で、技術力の高い優秀な学生ばかり集まっていることは分かっていたので「どうしたら満足してもらえる講義になるか？」とメンターとしてはかなりプレッシャーを感じていました。
たとえば、レイマーチングの基礎などを説明をしたとしても、知っていることばかりで何も持ち帰ってもらえずに終わってしまう可能性が高いと考えました。
紆余曲折があって、最終的に上記のような講義内容になりました。
アンケート結果によると、いずれの講義も参加者の満足度がとても高かったので、講義の難易度や内容のバランス調整は概ね成功だったと思っています。
また、どの講義もとても真剣に聞いていただけて、質疑応答でも本質を突くような鋭い質問が多かったので、メンターとしてもやりやすくて大満足でした！&lt;/p&gt;

&lt;p&gt;さらに、最終日の成果発表では、メンターたちの予想を遥かに上回るレベルの高い作品が次々に発表されて、驚きと興奮の連続でした！！&lt;/p&gt;

&lt;p&gt;講義やオリエンテーションの時間を含めると、実質3日弱の期間だったので、かなり厳しいスケジュールだったと思うのですが、参加者のみなさんは本当にすごいと思いました。&lt;/p&gt;

&lt;p&gt;また、インターン期間中はGoogle MeetやSlackでシェーダーに関する雑談や疑問について参加者と語り合うことができ、参加者からも刺激をたくさんもらって、メンターという立場を忘れそうになるくらいに楽しかったです！&lt;/p&gt;

&lt;p&gt;今回はメンターという立場で参加しましたが、これからもシェーダーが好きな仲間として参加者の方々と交流していきたいと思いました！&lt;/p&gt;

&lt;p&gt;参加者の方々、本当にお疲れさまでした！そして、ありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;参加レポートのリンク&#34;&gt;参加レポートのリンク&lt;/h1&gt;

&lt;p&gt;大変ありがたいことに参加レポートを書いてくださった参加者がいるので、こちらにリンクを貼ります。&lt;/p&gt;

&lt;p&gt;発見したら、随時更新します。&lt;/p&gt;

&lt;p&gt;※投稿時間順&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;はてなブログに投稿しました &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#はてなブログ&lt;/a&gt;&lt;br&gt;KLabExpertCampに参加して作ったembraceの解説を語る - 覚え書き&lt;a href=&#34;https://t.co/wl3MHcxtQr&#34;&gt;https://t.co/wl3MHcxtQr&lt;/a&gt;&lt;/p&gt;&amp;mdash; tonoshake🍶 (@TonoShake) &lt;a href=&#34;https://twitter.com/TonoShake/status/1304970930783887361?ref_src=twsrc%5Etfw&#34;&gt;September 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; の話を書きました～&lt;br&gt;はてなブログに投稿しました &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#はてなブログ&lt;/a&gt;&lt;br&gt;KLab Expert Campに参加してきました - Butadiene Works &lt;a href=&#34;https://t.co/zBV5bcEkZt&#34;&gt;https://t.co/zBV5bcEkZt&lt;/a&gt;&lt;/p&gt;&amp;mdash; ブタジエン (@butadiene121) &lt;a href=&#34;https://twitter.com/butadiene121/status/1305001646301220864?ref_src=twsrc%5Etfw&#34;&gt;September 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;成果発表の作品リンク&#34;&gt;成果発表の作品リンク&lt;/h1&gt;

&lt;p&gt;成果発表の作品のリンクを貼ります。とてもクオリティの高い作品ばかりです！&lt;/p&gt;

&lt;p&gt;発見したら、随時更新します。&lt;/p&gt;

&lt;p&gt;※投稿時間順&lt;/p&gt;

&lt;!--blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;br&gt;「embrace」です&lt;a href=&#34;https://t.co/8DMSc7ItvZ&#34;&gt;https://t.co/8DMSc7ItvZ&lt;/a&gt;&lt;br&gt;shadertoyなど関連リンクはツリーにつなげます&lt;/p&gt;&amp;mdash; tonoshake🍶 (@TonoShake) &lt;a href=&#34;https://twitter.com/TonoShake/status/1304704452788498433?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script--&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;br&gt;&amp;quot;metaball and hexagon ver.1.0&amp;quot; by &amp;quot;Santa&amp;quot; &lt;a href=&#34;https://t.co/3UlZzelxro&#34;&gt;https://t.co/3UlZzelxro&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/NEORT?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#NEORT&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝙎𝙖𝙣𝙩𝙖 (@santa_sukitoku) &lt;a href=&#34;https://twitter.com/santa_sukitoku/status/1304704651749539840?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で流体シミュレーション作りました！&lt;br&gt;leapmotion使って自分の手で混ぜ混ぜできます😆&lt;a href=&#34;https://twitter.com/hashtag/madewithunity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#madewithunity&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/unity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#unity&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/geometry?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#geometry&lt;/a&gt; &lt;a href=&#34;https://t.co/iEfugMgbCD&#34;&gt;pic.twitter.com/iEfugMgbCD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fᴇʏʀɪs💤VRC民 (@Feyris77) &lt;a href=&#34;https://twitter.com/Feyris77/status/1304712464789942273?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; でLayered Materialを制作しました。&lt;br&gt;動画提出が規定なのでフレーク塗装/カーボンファイバー塗装の車にセットアップして、vaperwaveっぽい背景で走らせました。（音楽はvaperwaveっぽくはない？よね？） &lt;a href=&#34;https://t.co/0gTMFhH0fo&#34;&gt;pic.twitter.com/0gTMFhH0fo&lt;/a&gt;&lt;/p&gt;&amp;mdash; Haruka Kjt (@kajitaj63b3) &lt;a href=&#34;https://twitter.com/kajitaj63b3/status/1304714516177981440?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で初めてパストレーシングを勉強してそれを用いて動画作品を作りました！！　見ていってください！&lt;a href=&#34;https://t.co/h31s5hK0YT&#34;&gt;https://t.co/h31s5hK0YT&lt;/a&gt;&lt;/p&gt;&amp;mdash; ブタジエン (@butadiene121) &lt;a href=&#34;https://twitter.com/butadiene121/status/1304715353528778752?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; でglslを使ってデモっぽいものを作成しました。良かったら見てね！&lt;a href=&#34;https://t.co/3gmJkDlGJC&#34;&gt;https://t.co/3gmJkDlGJC&lt;/a&gt; &lt;a href=&#34;https://t.co/eV0CPbvdtB&#34;&gt;pic.twitter.com/eV0CPbvdtB&lt;/a&gt;&lt;/p&gt;&amp;mdash; 避雷 (@lucknknock) &lt;a href=&#34;https://twitter.com/lucknknock/status/1304721446216675328?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;FlashBack&lt;a href=&#34;https://twitter.com/hashtag/klabexpertcamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klabexpertcamp&lt;/a&gt; での最終成果です！&lt;br&gt;レイマーチングとWebGLを混ぜ合わせました。&lt;a href=&#34;https://t.co/kv3O0VksYe&#34;&gt;https://t.co/kv3O0VksYe&lt;/a&gt; &lt;a href=&#34;https://t.co/PJQk8rn9K8&#34;&gt;https://t.co/PJQk8rn9K8&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/threejs?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#threejs&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/webgl?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#webgl&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/glsl?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#glsl&lt;/a&gt; &lt;a href=&#34;https://t.co/O60mnFeGYZ&#34;&gt;pic.twitter.com/O60mnFeGYZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; ukonpower (@UkskSan) &lt;a href=&#34;https://twitter.com/UkskSan/status/1304721668158308352?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;br&gt;投稿作品です！　GLSLでフラクタル書きました！&lt;a href=&#34;https://t.co/olmvCDfB7V&#34;&gt;https://t.co/olmvCDfB7V&lt;/a&gt;&lt;/p&gt;&amp;mdash; hibit (@hibit_at) &lt;a href=&#34;https://twitter.com/hibit_at/status/1304727106132176897?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で作りました～ &lt;a href=&#34;https://t.co/ckqwJojqlX&#34;&gt;https://t.co/ckqwJojqlX&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/glsl?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#glsl&lt;/a&gt; &lt;a href=&#34;https://t.co/GEm63mdUEd&#34;&gt;pic.twitter.com/GEm63mdUEd&lt;/a&gt;&lt;/p&gt;&amp;mdash; 寝る前 (@nerumae3) &lt;a href=&#34;https://twitter.com/nerumae3/status/1304736190134775808?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で制作しました！&lt;br&gt;凄い人ばかりでめちゃくちゃ良い経験になりました！&lt;a href=&#34;https://t.co/astTdcYc79&#34;&gt;https://t.co/astTdcYc79&lt;/a&gt;&lt;/p&gt;&amp;mdash; 3yen (@3yen_CG) &lt;a href=&#34;https://twitter.com/3yen_CG/status/1304754989412134912?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;メンター賞を頂いたあの「embrace」がツイッター投稿版になりました！&lt;br&gt;ツイッター限定で、映画と同じフレームレートで書き出したバージョンになります&lt;br&gt;フレームレートを下げることで雰囲気も変わりました&lt;br&gt;ぜひ見てください！&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;a href=&#34;https://t.co/XE6wsLfws4&#34;&gt;https://t.co/XE6wsLfws4&lt;/a&gt; &lt;a href=&#34;https://t.co/47sXyr8FtL&#34;&gt;pic.twitter.com/47sXyr8FtL&lt;/a&gt;&lt;/p&gt;&amp;mdash; tonoshake🍶 (@TonoShake) &lt;a href=&#34;https://twitter.com/TonoShake/status/1304933850754068480?ref_src=twsrc%5Etfw&#34;&gt;September 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました</title>
      <link>https://gam0022.net/blog/2020/09/13/cgworld-vol266/</link>
      <pubDate>Sun, 13 Sep 2020 20:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/09/13/cgworld-vol266/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-09-13-cgworld-vol266/Collage_Fotor.jpg&#34; alt=&#34;CGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9/10（木）発売のCGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました。&lt;/p&gt;

&lt;p&gt;デモシーンの魅力や、64KB制限で映像作品を創るための3Dモデルやテクスチャのプロシージャル生成について解説しています。&lt;/p&gt;

&lt;p&gt;この記事をきっかけにCGWORLD読者の方々にもデモシーンに興味をもっていただき、国内のデモシーンが盛り上がっていくことを願っています。&lt;/p&gt;

&lt;p&gt;もちろん自分の活動を知っている方々もお手に取っていただければとても嬉しいです！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;9/10（木）発売のCGWORLD vol.266（2020年10月号）に「デモシーンを支えるプロシージャル技術」という記事を寄稿しました。&lt;br&gt;&lt;br&gt;デモシーンの魅力や、64KB制限で映像作品を創るための3Dモデルやテクスチャのプロシージャル生成について解説しています。&lt;a href=&#34;https://t.co/BPf1txlSxU&#34;&gt;https://t.co/BPf1txlSxU&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/CGWjp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CGWjp&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/demoscene?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#demoscene&lt;/a&gt; &lt;a href=&#34;https://t.co/XXpCh1xiFw&#34;&gt;pic.twitter.com/XXpCh1xiFw&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ #CEDEC2020 9/4登壇, CGWORLD 10月号 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1301514617588518915?ref_src=twsrc%5Etfw&#34;&gt;September 3, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;購入方法&#34;&gt;購入方法&lt;/h1&gt;

&lt;p&gt;Amazonのアフェリエイトリンクを貼っておきます。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B08FP5NM5P&amp;linkId=8ed32da93c5253b64ba074583462b34a&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;Twitter上の反響を認知している範囲でメモしておきます。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;すごい、、表紙に「デモシーン」の文字があるぅ、、！&lt;a href=&#34;https://twitter.com/hashtag/CGWjp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CGWjp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Setsuko (@setsuko_h) &lt;a href=&#34;https://twitter.com/setsuko_h/status/1303997649582874625?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;CGWORLD vol.266「デモシーンを支えるプロシージャル技術」を買ってきて読んだ。ディファードレンダリングか。まさに俺が手を付けようとしてるとこだね。これとエフェクトを何とかしないと勝負にはならないな。&lt;/p&gt;&amp;mdash; gaziya (@gaziya5) &lt;a href=&#34;https://twitter.com/gaziya5/status/1303907439134220288?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;がむさん…！ &lt;a href=&#34;https://t.co/0SV02Jq91M&#34;&gt;pic.twitter.com/0SV02Jq91M&lt;/a&gt;&lt;/p&gt;&amp;mdash; さだきち : sadakkey (@sadakkey) &lt;a href=&#34;https://twitter.com/sadakkey/status/1304006171674640386?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;余談&#34;&gt;余談&lt;/h1&gt;

&lt;p&gt;ついに商業誌デビュー！と思ったら、よく考えたら2007年にWindows100%のフリーゲーム紹介コーナーに自作ゲームがちょっとだけ掲載されたのを思い出しました（当時は中学生）。&lt;/p&gt;

&lt;p&gt;今回は4ページしっかりと担当できましたし、CGWORLDという映像業界において圧倒的な知名度のある雑誌に寄稿する機会をいただけて、本当に嬉しいです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Revision2020 PC 64K Intro 優勝作品『RE: SIMULATED』の技術解説</title>
      <link>https://gam0022.net/blog/2020/04/30/revision2020/</link>
      <pubDate>Thu, 30 Apr 2020 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/04/30/revision2020/</guid>
      <description>&lt;p&gt;4月10日～4月13日に世界最大のデモパーティ&lt;a href=&#34;https://2020.revision-party.net/start&#34;&gt;Revision 2020&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;Revision 2020内で開催されたコンペのうち、&lt;a href=&#34;https://2020.revision-party.net/competitions/pc-competitions&#34;&gt;PC 64K Intro&lt;/a&gt;という64KBの容量制約のある部門で『RE: SIMULATED by gam0022 &amp;amp; sadakkey』という作品を発表しました。&lt;/p&gt;

&lt;p&gt;Tokyo Demo Fest 2018に続き、私（&lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt;）が映像を、さだきちさん（&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;）が音楽を制作しました。&lt;/p&gt;

&lt;p&gt;……なんと、本作品が参加者投票により1位に選ばれました！
日本人のチームがPC 64K Intro部門で優勝するのは Revision 史上初です。とても嬉しいです！&lt;/p&gt;

&lt;p&gt;本記事では、技術解説をメインに、『RE: SIMULATED by gam0022 &amp;amp; sadakkey』を紹介したいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/resimulated-collage.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/resimulated-collage.jpg&#34; alt=&#34;resimulated-collage&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;作品へのリンク&#34;&gt;作品へのリンク&lt;/h1&gt;

&lt;p&gt;WebGLとWebAudioによる64K Introなので、最新のChromeと高性能なGPUがあれば、ブラウザ上で動作します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/webgl/64k-intro_resimulated.html&#34;&gt;64KB HTML version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://neort.io/art/bqa4pgs3p9f6qoqnmujg&#34;&gt;NEORT version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;高スペックのPCを持っていない方は、YouTubeの動画をご覧ください。&lt;/p&gt;

&lt;p&gt;フラクタルをつかった映像のビットレートの高い作品ですが、4K解像度を選ぶことである程度は綺麗な状態で見れます。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/tirAdWbceak&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;こちらはpouet（デモシーンのコミュニティサイト）のリンクです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=85260&#34;&gt;RE: SIMULATED by Gam0022 &amp;amp; Sadakkey :: pouët.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;技術解説&#34;&gt;技術解説&lt;/h1&gt;

&lt;p&gt;ソースコードはすべてGitHubに公開しているので、興味がある方はぜひ見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/resimulated&#34;&gt;gam0022/resimulated: 1st place at Revision 2020 (PC 64K Intro)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サウンド編についてはさだきちさんが解説されています。あわせてご覧ください！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.klab.com/jp/blog/creative/2020/revision-2020-pc-64k-intro.html&#34;&gt;Revision 2020 のPC 64K INTRO 優勝作品のサウンドについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キーワードとしては、以下の技術が使われています。&lt;/p&gt;

&lt;p&gt;TypeScript, WebGL, WebAudio, webpack, pnginator.rb, Raymarching, GLSL Sound&lt;/p&gt;

&lt;h2 id=&#34;シンプルなwebglエンジン-chromatiq&#34;&gt;シンプルなWebGLエンジン『Chromatiq』&lt;/h2&gt;

&lt;p&gt;64KBの容量制約があるため、Unityやthree.jsといった既存のゲームエンジンやフレームワークを利用せずに、描画用のWebGLエンジンと制作用のツール（エディタ機能）を自作する必要がありました。&lt;/p&gt;

&lt;p&gt;OpenGLやDirectXを使わずに、WebGLを選択した理由は以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebGLでブラウザ上で動かせれば、手元のPCで動かしてもらえる可能性が高いと考えた

&lt;ul&gt;
&lt;li&gt;自分の作品は映像のビットレートが高く、動画だと綺麗にならない&lt;/li&gt;
&lt;li&gt;手元のPCで実行して綺麗な状態で見てもらいたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Webフロントエンドの技術をキャッチアップしたかった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、64K Intro向けに&lt;strong&gt;ファイルサイズの最小化を目指したシンプルなWebGLエンジン『Chromatiq』&lt;/strong&gt;を開発しました。&lt;/p&gt;

&lt;p&gt;WebGLエンジンとは言うものの、本当にシンプルで最小限な機能しか &amp;ldquo;現段階では&amp;rdquo; 実装していません。&lt;/p&gt;

&lt;p&gt;なるべく作品に依存した機能は用意したくなかったので、汎用的な設計になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マルチパスのImageShaderによるレンダリング（viewport square）&lt;/li&gt;
&lt;li&gt;ビルドインのBloomのポストエフェクト

&lt;ul&gt;
&lt;li&gt;どんな作品でも利用できそうなので、これだけビルドインにした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TypeScriptからuniformをアニメーションするためのインターフェース&lt;/li&gt;
&lt;li&gt;Shadertoyと互換性のあるGLSL Sound&lt;/li&gt;
&lt;li&gt;オーディオファイルの再生（mp3 / ogg）

&lt;ul&gt;
&lt;li&gt;DAWによる音楽の再生用の機能&lt;/li&gt;
&lt;li&gt;今回は先にDAWで作曲し、後からGLSLに移植する作戦にした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォントをレンダリングするためのcanvasからのテクスチャ生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イメージとしてはGLSLエディタを排除したスタンドアローンなShadertoyが近いかもしれません。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/gam0022/resimulated/blob/master/src/chromatiq.ts&#34;&gt;こちら&lt;/a&gt;です。単一ファイルのTypeScriptで実装しました。&lt;/p&gt;

&lt;p&gt;圧縮後のコードサイズを気にして、変な感じの実装になっているので、微妙に読みづらいかもしれません。&lt;/p&gt;

&lt;p&gt;例えば、フィールド参照の this を頭につけるとコードサイズが増えるため、コンストラクタの中で動的にインスタンスメソッドを定義することで、this の利用を最小限にしたり、
クラス外から値を参照・設定する必要があるデータのみ、フィールドとして定義する方針とています。enumもコードサイズが増えるので禁止にしました。&lt;/p&gt;

&lt;p&gt;製作の終盤から容量が余裕そうなことが判明したので、途中からファイルサイズを考慮するのを止め、mini化の中途半端感は否めないです。
このあたりは、次のデモに向けて改良していきたいと考えています。&lt;/p&gt;

&lt;p&gt;uniform名は基本的にはShadertoyと一致させているのですが、テクスチャのサンプラーはShadertoyを踏襲せずに、直前のパスを参照する &lt;code&gt;iPrevPass&lt;/code&gt; を定義しました。
これによってGLSLを書き換えずにエフェクトの順番を入れ替えたり、気軽にパスを増やしてエフェクトをチェインしやすくしました。
このあたりの仕様も、作品の需要に応じて変更していく可能性は高いです。&lt;/p&gt;

&lt;h2 id=&#34;ファイル圧縮のためのビルドプロセス&#34;&gt;ファイル圧縮のためのビルドプロセス&lt;/h2&gt;

&lt;p&gt;圧縮には&lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;と&lt;a href=&#34;https://gist.github.com/gasman/2560551&#34;&gt;pnginator.rb&lt;/a&gt;を利用しています。&lt;/p&gt;

&lt;p&gt;ビルドプロセスを図にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/build-process.svg&#34; alt=&#34;build-process&#34; /&gt;&lt;/p&gt;

&lt;p&gt;webpackですべてのファイルをbundle.jsという単一のJavaScriptに固めてから、pnginator.rbで自己解凍形式のPNGにしています。&lt;/p&gt;

&lt;p&gt;TypeScriptのminifyは完全にwebpack任せです。&lt;/p&gt;

&lt;p&gt;PNGでは画像データをzlib圧縮するため、画像データではなくても、例えば今回のようなプログラムのソースコードでちゃんと圧縮できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://qiita.com/gam0022/items/364c7f76f2787e385161&#34;&gt;GLSLのminifyも検証&lt;/a&gt;はしていて、webpackのLoaderを開発する予定もあったのですが、容量が余裕だったのでGLSLの圧縮はPNG（zlib）だけになりました。&lt;/p&gt;

&lt;p&gt;また、開発用にしか必要ないコードの削除もwebpackの&lt;a href=&#34;https://webpack.js.org/plugins/define-plugin/&#34;&gt;define-plugin&lt;/a&gt;で実現できました。&lt;/p&gt;

&lt;p&gt;webpackとpnginator.rbを組み合わせる手法は、&lt;a href=&#34;https://twitter.com/FMS_Cat&#34;&gt;FMS_Catさん&lt;/a&gt;の&lt;a href=&#34;https://github.com/FMS-Cat/until/&#34;&gt;Until&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;p&gt;当初はnode.jsでGLSLのホットリロード機能付きのWebサーバを開発しようと技術検証していたのですが、
要件は&lt;a href=&#34;https://github.com/webpack/webpack-dev-server&#34;&gt;webpack-dev-server&lt;/a&gt;ですべて実現可能だったので、webpackを採用しました。&lt;/p&gt;

&lt;p&gt;PRごとに圧縮後のファイルサイズを確認するようにしたら、圧縮後のファイルサイズについて知見が貯まりました（例）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コードの自動フォーマットをかけると、圧縮効率が上がってファイルサイズが減る&lt;/li&gt;
&lt;li&gt;コードをコピペすると圧縮効率が高くなるので、実は無理にコードを共通化する意味は実は薄い&lt;/li&gt;
&lt;li&gt;似たよな構造になるようにコードを意識すると圧縮効率が良くなる&lt;/li&gt;
&lt;li&gt;関数の順番を入れ替えただけで微妙にサイズが減ったりと謎が多い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;制作用のエディタ機能の紹介&#34;&gt;制作用のエディタ機能の紹介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor.png&#34; alt=&#34;chromatiq-editor&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;製作のイテレーションを高速化するため、必要なエディタ機能は一通り実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;再生位置のシーク機能

&lt;ul&gt;
&lt;li&gt;再生・一時停止・停止・フレームのコマ送り・時間の表示単位の秒とビートの切り替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GLSLやTypeScriptのホットリロード機能&lt;/li&gt;
&lt;li&gt;uniformのパラメータのインスペクタ&lt;/li&gt;
&lt;li&gt;カメラの自由移動&lt;/li&gt;
&lt;li&gt;デバッグ用に特定のパスの表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エディタ機能は容量制約に影響しないので、既存のライブラリを積極的に利用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ボタン用のアイコンのために、&lt;a href=&#34;https://fontawesome.com/&#34;&gt;fontawesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;uniformのパラメータのインスペクタのために、&lt;a href=&#34;https://github.com/dataarts/dat.gui&#34;&gt;dat.gui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;カメラの自由移動のために、&lt;a href=&#34;https://threejs.org/&#34;&gt;three.js&lt;/a&gt;の&lt;a href=&#34;https://threejs.org/docs/#examples/en/controls/OrbitControls&#34;&gt;OrbitControls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/resimulated#1-get-started&#34;&gt;リポジトリ&lt;/a&gt;をcloneして、 &lt;code&gt;npm run start&lt;/code&gt; すれば、エディタ機能が使えますので、興味がある人はお試しください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:gam0022/resimulated.git
cd resimulated
npm install

# 制作用のエディタを起動
npm run start

# 提出用のビルド（dist\resimulated.html）を生成
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uniformのパラメータのインスペクタ&#34;&gt;uniformのパラメータのインスペクタ&lt;/h3&gt;

&lt;p&gt;GLSL上で以下のようなuniformを宣言するだけで、そのままインスペクタに表示されるような仕組みを実装しました。&lt;/p&gt;

&lt;p&gt;コメントでは左から順に &lt;code&gt;初期値 min max カテゴリー名&lt;/code&gt; を指定しています。初期値は必須ですが、それ以外は省略可能としました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;uniform float gEmissiveIntensity;     // 6.0 0 20 emissive
uniform float gEmissiveSpeed;         // 1 0 2
uniform float gEmissiveHue;           // 0.33947042613522904 0 1
uniform float gEmissiveHueShiftBeat;  // 0 0 1
uniform float gEmissiveHueShiftZ;     // 0 0 1
uniform float gEmissiveHueShiftXY;    // 0 0 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uniform宣言をすると、自動的にインスペクタにパラメータが追加されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor-emissive.png&#34; alt=&#34;chromatiq-editor-emissive&#34; /&gt;&lt;/p&gt;

&lt;p&gt;私の作品では、フラクタルやIFSといったパラメータの細かな調整が重要になる表現を多用しているため、気軽にパラメータを増やして、気軽に値を調整できるようにしました。&lt;/p&gt;

&lt;p&gt;値の当たりをつけた後に、パラメータのアニメーションを&lt;a href=&#34;https://github.com/gam0022/resimulated/blob/master/src/index.common.ts#L142-L569&#34;&gt;TypeScriptのコード&lt;/a&gt;に落とし込むワークフローにしました。&lt;/p&gt;

&lt;p&gt;これは、インスペクタを動かしている様子の動画です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;三谷先生に便乗して、MengerSponge をカットしてみました。&lt;br&gt;断面が星みたいになって面白いですね⭐️ &lt;a href=&#34;https://t.co/mCqFnfbjBF&#34;&gt;https://t.co/mCqFnfbjBF&lt;/a&gt; &lt;a href=&#34;https://t.co/QF73xfFL1y&#34;&gt;pic.twitter.com/QF73xfFL1y&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ / encoder killer (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1253296266424930304?ref_src=twsrc%5Etfw&#34;&gt;April 23, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;動画の保存機能&#34;&gt;動画の保存機能&lt;/h3&gt;

&lt;p&gt;処理落ちなしに4K解像度で動画を出力したかったので、以下の機能を実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;映像の連番PNG保存機能&lt;/li&gt;
&lt;li&gt;サウンドの wav 保存機能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.png と .wav を ffmpeg で .mp4 に変換してYouTubeにアップロードしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ffmpeg.exe -r 60 -i chromatiq%04d.png -i chromatiq.wav -c:v libx264 -preset slow -profile:v high -coder 1 -pix_fmt yuv420p -movflags +faststart -g 30 -bf 2 -c:a aac -b:a 384k -profile:a aac_low -b:v 68M chromatiq_68M.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;YouTube用のffmpegのエンコード設定については、以下を参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/youtube/answer/1722171?hl=ja&#34;&gt;アップロードする動画におすすめのエンコード設定&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;映像ビットレート 2160p（4k）53～68 Mbps&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/mikoim/27e4e0dc64e384adbcb91ff10a2d3678&#34;&gt;YouTube recommended encoding settings on ffmpeg (+ libx264)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/sasaki_0222/status/1248910333835530241&#34;&gt;解像度とビットレードについて by sasaki_0222&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;映像について&#34;&gt;映像について&lt;/h2&gt;

&lt;p&gt;映像の3D描画は基本的に全部レイマーチングです。&lt;/p&gt;

&lt;p&gt;前半のサイバーなシーンはMandelboxをベースにしました。&lt;/p&gt;

&lt;p&gt;後半の宇宙空間とグリーティングのシーンでは、宇宙空間はレイマーチング、惑星の上のグリーティングの文字はAABBとして解析的に衝突判定をするハイブリッドなレイトレをしています。&lt;/p&gt;

&lt;p&gt;パスの構成は、最終的にこうなりました。&lt;/p&gt;

&lt;p&gt;1パス目と2パス目を分離したのは、シェーダーのコンパイル時間の短縮のためです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1パス目: 前半のシーンのレイマーチング&lt;/li&gt;
&lt;li&gt;2パス目: 後半のシーンのレイマーチング&lt;/li&gt;
&lt;li&gt;3パス目: テキストの描画&lt;/li&gt;
&lt;li&gt;4～13パス目: Bloomのポストエフェクト&lt;/li&gt;
&lt;li&gt;14パス目: ポストエフェクトとトーンマッピング&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;惑星のバリエーション生成の仕組み&#34;&gt;惑星のバリエーション生成の仕組み&lt;/h3&gt;

&lt;p&gt;後半のグリーティングでは、自分が特に尊敬しているデモグループをイメージした惑星が合計14パターン登場します。&lt;/p&gt;

&lt;p&gt;様々なバリエーションの惑星を効率的に生成するための仕組みを実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;地形の高さマップの自動生成&lt;/li&gt;
&lt;li&gt;テクスチャの色のグラデーションの自動生成&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;地形の高さマップの自動生成&#34;&gt;地形の高さマップの自動生成&lt;/h4&gt;

&lt;p&gt;2DのValue Noiseを重ね合わせたfbm（Fractal Brownian Motion）で地形の高さマップを生成しました。&lt;/p&gt;

&lt;p&gt;さらに、fbm関数をネストして（fbmのUV計算にfbmをつかって）、歪んだような不思議な雰囲気の地形も生成できるようにしました。&lt;/p&gt;

&lt;p&gt;左がfbmのネストよる歪みなしで、右がfbmのネストによる歪みありです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/fbm-shift.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/fbm-shift.jpg&#34; alt=&#34;fbm-shift&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fbmの各種パラメーター（振幅や周波数、Y方向のスケール、歪み用のfbmの強度）は、乱数ではなく、配列で直接指定することで、イメージ通りの結果に調整できるようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// fbmAmp, fbmFreq, fbmYScale, fbmShift
vec4[PLANETS_PAT_MAX * PLANETS_NUM_MAX] planetFbmParams = vec4[](
    // MIX_A
    vec4(0.3, 17.0, 1.0, 0.01), vec4(0.05, 10.0, 1.05, 0.0), vec4(0.05, 10.0, 1.05, 0.01),
    vec4(0.05, 10.0, 4.05, 0.02), vec4(0.05, 10.0, 2.05, 00.1), vec4(0.0),
    // MIX_B
    vec4(0.0, 10.0, 1.0, 0.2), vec4(0.0, 10.0, 1.0, 0.01), vec4(0.0, 10.0, 1.0, 0.03),
    vec4(0.05, 10.0, 1.0, 00.2), vec4(0.06, 10.0, 1.0, 0.03), vec4(0.05, 10.0, 1.0, 0.03));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなfbmをネストしたシンプルな関数で高さマップを生成しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 惑星の高さマップ（height map）を生成する関数
// pは球体のUV, id は惑星のID
float hPlanetsMix(vec2 p, int id) {
    p.y *= planetFbmParams[id].z;
    return fbm(p + 
        planetFbmParams[id].w * fbm(p, 4.0 * planetFbmParams[id].y), planetFbmParams[id].y);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;テクスチャの色のグラデーションの自動生成&#34;&gt;テクスチャの色のグラデーションの自動生成&lt;/h4&gt;

&lt;p&gt;iqのColor Palettesを使いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iquilezles.org/www/articles/palettes/palettes.htm&#34;&gt;Color Palettes - Inigo Quilez :: fractals, computer graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {
    return a + b * cos(TAU * (c * t + d));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pal 関数の使い方は簡単で、&lt;code&gt;a, b, c, d&lt;/code&gt; を任意に指定すれば、&lt;code&gt;t&lt;/code&gt; を変化することでグラデーションを生成できます。&lt;/p&gt;

&lt;p&gt;今回は &lt;code&gt;a, b, c&lt;/code&gt; は定数、&lt;code&gt;d&lt;/code&gt; は惑星ごとに乱数で決定しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a, b, c&lt;/code&gt; や乱数のseed値はインスペクタで値を調整しながら、イメージ通りのグラデーションが生成されるまで試行錯誤しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;t&lt;/code&gt; は地形の高さマップにマッピングしました。&lt;/p&gt;

&lt;h3 id=&#34;無数の小惑星のランダムな配置&#34;&gt;無数の小惑星のランダムな配置&lt;/h3&gt;

&lt;p&gt;宇宙空間がスカスカすぎて寂しかったので、無数の小惑星をランダムに配置しようとしたら、予想外に苦戦しました。&lt;/p&gt;

&lt;p&gt;レイマーチングだと空間をmodすることで物体を無限に複製することは簡単なのですが、それでは規則的な配置にしかならず、かなり不自然になってしまいます。&lt;/p&gt;

&lt;p&gt;gazさんのシェーダーを参考にして、空間をgridに分割して、gridごとに乱数を生成して、乱数で確率的に物体を間引く手法を採用しました。&lt;/p&gt;

&lt;p&gt;また、アーティファクトの回避するために、rayの長さを制限する工夫も必要でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;もう忘れてるよ。自分で読み解いてしまったじゃないか。xy平面を通常のmod()で分割。z軸の奥行のみgridをseedに乱数を使い間引きしてる。z軸だけ空間移動のスピード、回転を変えてる。アーティファクト対策で、min(map(p), 1.0)を使いrayの長さを制限。effectにビルボードを使い発光を演出。&lt;/p&gt;&amp;mdash; gaz (@gaziya5) &lt;a href=&#34;https://twitter.com/gaziya5/status/1247671912521596928?ref_src=twsrc%5Etfw&#34;&gt;April 7, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;最終的に、ランダムな位置と大きさをもつ小惑星の距離関数はこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;float dGomi(vec3 p) {
    // アーティファクト対策のための固定長の距離
    float d = 1.0;

    // グリット（4m四方の立方体）の計算
    vec3 g = vec3(floor(p / 4.0));

    // 座標の繰り返し
    p = mod(p, 4.0) - 2.0;

    // 確率 rate に応じて球体を配置
    vec3 rand = hash33(g);
    float rate = (gPlanetsId != PLANETS_EARTH) ? 0.08 : 0.01;
    if (rand.x &amp;lt; rate) {
        p -= (rand - 0.5);
        d = sdSphere(p, 0.1 * rand.y);
    }

    // fbmで表面の凹凸のディテールを加える
    // レイが接近したときだけに計算するのは、LODによる負荷対策
    // fbmの計算はかなり高負荷なので、LODをしないと激重になる
    if (d &amp;lt; 0.5) {
        vec2 uv = uvSphere(normalize(p));
        uv.x += dot(rand, vec3(1.0));
        d -= remapTo(rand.z, 0.01, 0.08) * fbm(uv, 5.0);
    }

    return d;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;音楽について&#34;&gt;音楽について&lt;/h2&gt;

&lt;p&gt;基盤となるGLSLサウンド用のシーケンサーの実装は私が、それ以外のオシレーターの関数やメロディの実装はさだきちさんが担当しました。&lt;/p&gt;

&lt;p&gt;音楽もやはり容量制約のためにGLSLで実装する必要があり、さだきちさんにはコーディングによる作曲をお願いしました。
さだきちさんはプログラミングもGLSLも未経験だったので、それらの習得から始まりました。
かなり無茶なお願いだったにも関わらず、かっこいいトランスミュージックを提供してくれたさだきちさんには感謝しかありません。ありがとうございます！&lt;/p&gt;

&lt;p&gt;私が担当したGLSLサウンド用のシーケンサーはGLSLサウンド上で実装されており、GLSLサウンドを鳴らす仕組みについては、AMAGIさん（&lt;a href=&#34;https://twitter.com/amagitakayosi&#34;&gt;@amagitakayosi&lt;/a&gt;）の記事を参考に、Shadertoy互換のGLSLサウンドの再生機能を実装しました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.amagi.dev/entry/veda-sound&#34;&gt;VEDA 2.4: GLSLで音楽を演奏できるようになったぞ！！！ - マルシテイア&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;サウンド用のシーケンサーの利用例&#34;&gt;サウンド用のシーケンサーの利用例&lt;/h3&gt;

&lt;p&gt;これはベースのパートの波形を生成するGLSLの関数です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec2 bass1(float beat, float time) {
// 1つのパターンのビート数
#define BASS1_BEAT_LEN 8

// パターンの種類
#define BASS1_DEV_PAT 10

// 楽曲全体の長さのパターン数
#define BASS1_DEV_LEN 32

    // パターンの定義
    int[BASS1_BEAT_LEN * NOTE_DIV * BASS1_DEV_PAT] notes = int[](
        // パターン0
        F(0), F(33), E(0, 33), S(0, 33, 0, 33),
        F(0), F(33), E(0, 33), S(0, 33, 0, 33),

        // パターン1
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),

        // パターン2
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(48, 47, 43, 40),

        // パターン3
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34),

        // パターン4
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 36, 36, 36),

        // パターン5
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34), S(0, 36, 36, 36),

        // パターン6
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 43, 43, 43), S(0, 55, 57, 69),

        // パターン7
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45),
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31),

        // パターン8
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 43, 45, 57),

        // パターン9
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45),
        E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(0, 31, 31, 31));

    // パターンの進行
    int[BASS1_DEV_LEN / DEV_PACK] development = int[](
        D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 3, 4, 5, 6),
        D(7, 0, 7, 8, 7, 0, 9, 0), D(0, 0, 0, 0, 0, 0, 0, 0));

    SEQUENCER(beat, time, BASS1_BEAT_LEN, BASS1_DEV_PAT, BASS1_DEV_LEN,
        notes, development, bass)

    return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パターン（2小節分のノートナンバーの並び）の定義と進行は、それぞれ配列で指定できるようにしています。&lt;/p&gt;

&lt;p&gt;音の長さは下記の4種類に対応しました。
ノートナンバーに0を指定すれば、同じ長さの休符になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O: 全音符&lt;/li&gt;
&lt;li&gt;F: 4分音符&lt;/li&gt;
&lt;li&gt;E: 8分音符&lt;/li&gt;
&lt;li&gt;S: 16分音符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GLSLのコンスタントバッファのサイズには上限があり、サウンド用のシェーダー全体で要素数が4096個まででしか配列を宣言できません。&lt;/p&gt;

&lt;p&gt;そこで、&lt;code&gt;O, F, E, S&lt;/code&gt; を関数マクロとし、16分音符を最小単位として各音符を16bit（うち、ノートナンバーが8bit、音の長さが8bit）ずつパッキングしています。
GLSLのintは32bitなので、int配列の1要素に16分音符なら2つ、8分音符なら1つ入るような設計です。&lt;/p&gt;

&lt;p&gt;また、パターン進行の &lt;code&gt;D&lt;/code&gt; もマクロにしていて、要素数の節約のために4bitずつパッキングをしています。&lt;/p&gt;

&lt;p&gt;続いて、&lt;code&gt;bass&lt;/code&gt; は時間とノートナンバーを入力として、波形を出力するオシレーターのGLSL関数です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SEQUENCER&lt;/code&gt; は、時間、パターンの定義の配列、パターンの進行の配列、オシレーターの関数を指定することで、パートごとの波形を生成して &lt;code&gt;vec2 ret&lt;/code&gt; に代入する関数マクロです。
GLSLでは関数を引数とするような高階関数は実現できませんが、関数マクロで擬似的に実現しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define SEQUENCER(beat, time, beatLen, devPat, devLen, notes, development, toneFunc)  \
    int indexOffset = development[int(                                                \
        mod(beat / float(beatLen * DEV_PACK), float(devLen / DEV_PACK)))];            \
    indexOffset =                                                                     \
        (indexOffset &amp;gt;&amp;gt; (4 * int(mod(beat / float(beatLen), float(DEV_PACK))))) &amp;amp; 15; \
    indexOffset *= beatLen * NOTE_VDIV;                                               \
                                                                                      \
    for (int i = 0; i &amp;lt; beatLen * NOTE_VDIV;) {                                       \
        int index = i + indexOffset;                                                  \
        int shift = (index % 2 == 1) ? 16 : 0;                                        \
        int div = ((notes[index &amp;gt;&amp;gt; 1] &amp;gt;&amp;gt; shift) &amp;gt;&amp;gt; 8) &amp;amp; 255;                          \
        int len = NOTE_VDIV * NOTE_VDIV / div;                                        \
        for (int j = 0; j &amp;lt; len; j++) {                                               \
            tmpIndexes[i + j] = i;                                                    \
        }                                                                             \
        i += len;                                                                     \
    }                                                                                 \
                                                                                      \
    float indexFloat = mod(beat * float(NOTE_VDIV), float(beatLen * NOTE_VDIV));      \
    int index = int(indexFloat);                                                      \
    int shift = (index % 2 == 1) ? 16 : 0;                                            \
    int note = (notes[(index + indexOffset) &amp;gt;&amp;gt; 1] &amp;gt;&amp;gt; shift) &amp;amp; 255;                    \
    float localTime =                                                                 \
        beatToTime((indexFloat - float(tmpIndexes[index])) / float(NOTE_VDIV));       \
    float amp = (note == 0) ? 0.0 : 1.0;                                              \
    vec2 ret = vec2(toneFunc(float(note), localTime) * amp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パターンの定義・進行のマクロはこちらです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 1ビートを最大何分割するか。16分音符に対応するなら4
#define NOTE_VDIV 4

// 1ビートのpackingを考慮した分割数。32bitのintに16bitずつ詰めているので
// 4 / (32 / 16) = 2
#define NOTE_DIV 2

// 展開用の配列のpacking数。32bitのintに4bitずつ詰めているので
// 32 / 4 = 8
#define DEV_PACK 8

#define MAX_BEAT_LEN 8
int[MAX_BEAT_LEN * NOTE_VDIV] tmpIndexes;

#define O(a)                                                                      \
    (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16),     \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define F(a) (a | 4 &amp;lt;&amp;lt; 8) | ((a | 4 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 4 &amp;lt;&amp;lt; 8) | ((a | 4 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define E(a, b) (a | 8 &amp;lt;&amp;lt; 8) | ((a | 8 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (b | 8 &amp;lt;&amp;lt; 8) | ((b | 8 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define S(a, b, c, d) \
    (a | 16 &amp;lt;&amp;lt; 8) | ((b | 16 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (c | 16 &amp;lt;&amp;lt; 8) | ((d | 16 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define D(a, b, c, d, e, f, g, h) \
    (a) | (b &amp;lt;&amp;lt; 4) | (c &amp;lt;&amp;lt; 8) | (d &amp;lt;&amp;lt; 12) | (e &amp;lt;&amp;lt; 16) | (f &amp;lt;&amp;lt; 20) | (g &amp;lt;&amp;lt; 24) | (h &amp;lt;&amp;lt; 28)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;re-simulated-の意味&#34;&gt;『RE: SIMULATED』の意味&lt;/h1&gt;

&lt;p&gt;タイトルの『RE: SIMULATED』には2つの意味を込めました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前作『WORMHOLE』の64K Introとしての「再現」&lt;/li&gt;
&lt;li&gt;SIMULATED REALITY&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-前作-wormhole-の64k-introとしての-再現&#34;&gt;1. 前作『WORMHOLE』の64K Introとしての「再現」&lt;/h2&gt;

&lt;p&gt;一昨年のTokyo Demo Fest 2018のCombined Demo Compoでも、さだきちさんとチームを組んで『WORMHOLE』という作品を制作しました（&lt;a href=&#34;https://gam0022.net/blog/2018/12/12/tdf2018/&#34;&gt;記事&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;前半のシーンが顕著ですが、『WORMHOLE』と表現や演出が酷似していると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フラクタルの形状変化&lt;/li&gt;
&lt;li&gt;光の色の変化&lt;/li&gt;
&lt;li&gt;シーン転換前の激しい点滅&lt;/li&gt;
&lt;li&gt;シーン転換後のホワイトイン&lt;/li&gt;
&lt;li&gt;パーティのロゴの登場&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;『WORMHOLE』はUnityで制作したので、60.7 MB（zip圧縮で 23.18MB）というファイルサイズでした。&lt;/p&gt;

&lt;p&gt;前作では、Unityを利用したことで賛否両論があったので、ツールに頼らなくても同様のビジュアルを再現できることを証明する意図がありました。&lt;/p&gt;

&lt;p&gt;また、64K Introなどの容量制限のある部門への参加が個人的にも憧れだったという理由もあります。&lt;/p&gt;

&lt;p&gt;今回は自作のシステムで作品を制作することでファイルサイズは26KBになりました。&lt;/p&gt;

&lt;p&gt;同じ表現を「再現」しつつも、容量を &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2334&lt;/sub&gt; まで圧縮する試みのコンセプトは達成できました。&lt;/p&gt;

&lt;p&gt;まさか、コンポで優勝するという結果まで「再現」してしまうのは予想外でした（笑）&lt;/p&gt;

&lt;h2 id=&#34;2-simulated-reality&#34;&gt;2. SIMULATED REALITY&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%83%86%E3%83%83%E3%83%89%E3%83%BB%E3%83%AA%E3%82%A2%E3%83%AA%E3%83%86%E3%82%A3&#34;&gt;Simulated Reality&lt;/a&gt;という裏設定もありました。&lt;/p&gt;

&lt;p&gt;作品の最後に「RE: SIMULATED」の文字が&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RE: SIMULATED&lt;/code&gt; → &lt;code&gt;RE&lt;/code&gt; → &lt;code&gt;REALITY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と変化して、REALITYに変化するタイミングで「地球」がフラッシュバックするのは、Simulated Realityの暗喩です。&lt;/p&gt;

&lt;p&gt;前半のサイバーなシーンは電子的な仮想空間という設定で、シーン転換時に球体を中心に空間が歪んで圧縮するのは、宇宙誕生の爆発であるビッグバンの暗喩です。&lt;/p&gt;

&lt;p&gt;この世界は上位存在によって電子的にシミュレーションされた仮想現実で、最後に自分たちが住む地球を見つけるというストーリーでした（あくまで裏設定だったので、見た人に通じなくても良い）。&lt;/p&gt;

&lt;p&gt;できれば現実と見分けがつかないようなリアルなグラフィックで表現できたら良かったのですが、力量不足でした……。&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;Webフロントエンドは久しぶりで、node.jsとwebpackは初めてだったので、新しい技術を学ぶ良い機会となりました。&lt;/p&gt;

&lt;p&gt;昔はjQueryが必要だったDOMのセレクターやHTTPアクセスが、標準のAPI（&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/Document/querySelector&#34;&gt;querySelector&lt;/a&gt;や&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/Fetch_API/Using_Fetch&#34;&gt;Fetch&lt;/a&gt;）になっていて驚きました。&lt;/p&gt;

&lt;p&gt;TypeScript（ECMascript）に苦手意識がありましたが、最近はかなり使いやすい言語になったなぁと認識を改めました。
演算子オーバーロードがないのだけは、3Dプログラミングには必須のベクトル計算の実装の可読性が落ちて苦しい気持ちになったので、早くサポートして欲しいと感じました。&lt;/p&gt;

&lt;p&gt;また、64K Introのエントリーは今回が初めてということで、どのくらいのコンテンツが詰め込めるか感覚がつかめず、容量を半分以上も余らせてしまいました。
次の機会には64KBギリギリまで使って、もっと映像としても洗練させて、さらにCoolな作品を発表したいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;実は26KBしか使いきれなかったので、次回は64KBギリギリまで使えるように精進します💪 &lt;a href=&#34;https://t.co/uxF2M5DZmg&#34;&gt;pic.twitter.com/uxF2M5DZmg&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ / encoder killer (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1249677712815321088?ref_src=twsrc%5Etfw&#34;&gt;April 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;例年のRevisionの64K Introの作品と比較すると、かなり未熟なので、もっと精進して最高のデモを作りたいという気持ちです。&lt;/p&gt;

&lt;p&gt;ともあれ、このたびは優勝作品に選んでいただき、とても光栄に思います。&lt;/p&gt;

&lt;p&gt;世界中の尊敬するデモチームの方々からいただいたお祝いのコメントも嬉しかったです。わーい！&lt;/p&gt;

&lt;p&gt;最後に、世界的に大変な状況の中、オンラインでの開催のためにご尽力いただいた皆様に、心より感謝申し上げます。
とても楽しく充実した3日間を過ごせました。来年はドイツでお会いしましょう！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最強の作業環境でリモートワークを乗り切る</title>
      <link>https://gam0022.net/blog/2020/03/10/best-buy/</link>
      <pubDate>Tue, 10 Mar 2020 10:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/03/10/best-buy/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;コロナウイルスの影響でリモートワークを実施する企業が増えましたね。&lt;/p&gt;

&lt;p&gt;普段あまり自宅でコーディングをしないという方にとっては、自宅の作業環境を見直すきっかけになったのではないでしょうか？&lt;/p&gt;

&lt;p&gt;今回は私の作業環境を紹介したいと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/overall.jpg&#34; alt=&#34;全体図&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※これはアフィリエイト記事です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;自宅勤務が &amp;quot;最高&amp;quot; なので、一生自宅勤務したい。&lt;br&gt;・ディスプレイが大きくて最高！&lt;br&gt;・椅子が体にフィットしていて最高！&lt;br&gt;・人間に話しかけられなくて最高！&lt;br&gt;・トイレの待ち時間が0秒で最高！&lt;br&gt;・通勤時間が0秒で最高！&lt;br&gt;・目的が不明瞭な会議がなくて最高！&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1230485148530958336?ref_src=twsrc%5Etfw&#34;&gt;February 20, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;作業環境&#34;&gt;作業環境&lt;/h1&gt;

&lt;h2 id=&#34;椅子&#34;&gt;椅子&lt;/h2&gt;

&lt;p&gt;AKRACINGのゲーミングチェアを使っています（2018/7～）。&lt;/p&gt;

&lt;p&gt;長時間集中して作業するためには、椅子は身体に負担のかからないちゃんとしたものを選ぶべきかと思います。&lt;/p&gt;

&lt;p&gt;ゲーミングチェアを買う以前は、無印良品の&lt;a href=&#34;https://www.muji.com/jp/ja/store/cmdty/section/S10305&#34;&gt;体にフィットするソファ&lt;/a&gt;に座りながらコタツで作業していましたが、姿勢が安定しないせいで身体を痛めそうになった上に作業にも集中できませんでした……。&lt;/p&gt;

&lt;p&gt;このゲーミングチェアは腰と首の位置にそれぞれサポートがあり、長時間座っていても疲労感が少ないです。&lt;/p&gt;

&lt;p&gt;それから、賃貸に住んでいるため、キャスターで床が傷つかないかどうか、わりと心配していました。&lt;/p&gt;

&lt;p&gt;このゲーミングチェアは床を傷つけにくいキャスターを採用していて、実際に床に直接置いてずっと使用していますが、まったく気にならないです！&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01G8E6NZW&amp;linkId=c4ebe4bcb67905f67849a9e72c1de0be&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;素材の硬さが絶妙で、長時間座っていてもお尻や腰が痛くならない&lt;/li&gt;
&lt;li&gt;腰の位置のランバーサポートがとても良くて、深く腰掛けても腰椎がサポートされて体が痛くならない&lt;/li&gt;
&lt;li&gt;フローリング床に傷をつけにくいPU(ポリウレタン)製キャスターを採用&lt;/li&gt;
&lt;li&gt;フルフラットリクライニングで寝ようと思えば寝れる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;特になし&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;補足&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/32NiM3y&#34;&gt;最上位のモデル&lt;/a&gt;だと座面チルト機能があるので、リクライニングをよく使う人は、こっちを買ったほうがいいかもしれません。&lt;/p&gt;

&lt;p&gt;AKRACINGのゲーミングチェアはAmazonのセールで毎回セール対象になっているので、セールを狙って買うのが良いかもしれません。自分もセールのときに買いました。&lt;/p&gt;

&lt;h2 id=&#34;机&#34;&gt;机&lt;/h2&gt;

&lt;p&gt;LOWYAの&lt;a href=&#34;https://item.rakuten.co.jp/low-ya/f802-g1021-100/?s-id=ph_pc_itemname&#34;&gt;デスク&lt;/a&gt;を使っています（2018/1～）。&lt;/p&gt;

&lt;h3 id=&#34;良いポイント-1&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;140cm x 70cmの大きさなので、作業スペースに困らない

&lt;ul&gt;
&lt;li&gt;例: ノートパソコンとデスクトップPCを並行して使える&lt;/li&gt;
&lt;li&gt;個人的にL字型よりシンプルな形の方が好き&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;モニターアームを設置できるスペースが広い

&lt;ul&gt;
&lt;li&gt;引き出しのある手前側以外はどこでもモニターアームを取り付けられる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2年利用して、大きな問題なし&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;奥行きが 70cm あるため、ノートパソコンやA6サイズのキャンパスノートと併用しても十分な作業スペースが確保できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/mac-open2.jpg&#34; alt=&#34;キャンパスノートと併用&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/mac-open.jpg&#34; alt=&#34;Macを開いた状態&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/mac-close2.jpg&#34; alt=&#34;Macを閉じた状態&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪いポイント-1&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;角が角張っているので、腕などに擦れて塗装がハゲてきた（致命的な問題ではない）

&lt;ul&gt;
&lt;li&gt;姿勢によっては角が腕にあたって痛く感じるかもしれない&lt;/li&gt;
&lt;li&gt;欲を言えば角が丸く加工してあるタイプの方が良いかもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;楽天というプラットフォームに抵抗感があった&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;モニター&#34;&gt;モニター&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2IlWooI&#34;&gt;I-O DATAの31.5型 WQHDのモニター EX-LDQ322DB&lt;/a&gt;を使っています（2018/5～）。&lt;/p&gt;

&lt;p&gt;※厳密には、自分が買ったのは1つ前のEX-LDQ321DBというモデルでしたが、今買うなら後継機のEX-LDQ322DBでいい気がします。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0816PPCHZ&amp;linkId=89b2d4f31835374d62ee072f4c3d6bea&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-2&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WQHD（2560x1440）の解像度は使いやすい

&lt;ul&gt;
&lt;li&gt;Windows用の高DPI環境のスケーリングに対応したアプリが少ないので、現状では4K解像度は使いづらい（個人の意見）&lt;/li&gt;
&lt;li&gt;スケーリングなしに広すぎず狭すぎず、ちょうどよいくらいの解像度&lt;/li&gt;
&lt;li&gt;4K解像度でスケーリングなしだと文字が小さすぎて実用性が低い&lt;/li&gt;
&lt;li&gt;アスペクト比が16:9なので、全画面でゲームしたり動画鑑賞するときに無難&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;31.5インチだと、スケーリングなしで普通に文字が読めるくらいの大きさになる

&lt;ul&gt;
&lt;li&gt;WQHDや4Kの高解像度なら、30インチ未満はやめておいたほうがいいかも&lt;/li&gt;
&lt;li&gt;4Kで40インチ以上であれば、スケーリングは不要そうだが、置き場所に困る&lt;/li&gt;
&lt;li&gt;40インチだと視野が広くないと厳しそう（想像）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結論として、WQHDの31インチが作業用としては最適

&lt;ul&gt;
&lt;li&gt;Macがメインならスケーリングありで30インチ前後の4K解像度の方が快適かも&lt;/li&gt;
&lt;li&gt;最近はWindowsがメインの開発環境のため、WQHDを選択&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-2&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;音はそんなに良くないが、後述のヘッドフォンによって解消できる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;補足-1&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;なぜかWQHDの製品はほとんど発売されていないので、選択肢はI-O DATAくらいしかありません。もっと色んなメーカーから発売して欲しいです。&lt;/p&gt;

&lt;p&gt;机が大きすぎて、モニターのスケール感が伝わりにくいと思ったので、キーボードとティッシュ箱と並べた様子です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/display.jpg&#34; alt=&#34;ディスプレイ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;モニターアーム&#34;&gt;モニターアーム&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/39pDucj&#34;&gt;エルゴトロン LX デスクマウント モニターアーム&lt;/a&gt;を使っています（2019/7～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00689HXI4&amp;linkId=3a2e16eee065f517d43c3742428d038b&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-3&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンサイズ：34インチまで、荷重範囲：3.2㎏から11.3㎏までなので、前述のWQHDのモニターでも余裕でホールドできる

&lt;ul&gt;
&lt;li&gt;半年以上使っているが、自重で落ちることは今の所なし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;昇降範囲:33cmなので、高めの位置でもホールドできる

&lt;ul&gt;
&lt;li&gt;ノートPCと併用して利用するときに便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;机を壁ギリギリまで配置できて空間が無駄にならない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-03-04-best-buy/monitor-arm.jpg&#34; alt=&#34;モニターアーム&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;悪いポイント-3&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;特になし&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ノイズキャンセリングヘッドホン&#34;&gt;ノイズキャンセリングヘッドホン&lt;/h2&gt;

&lt;p&gt;SONYのノイズキャンセリングヘッドホン&lt;a href=&#34;https://amzn.to/32NECE6&#34;&gt;WH-1000XM3&lt;/a&gt;を使っています（2019/2～）。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07GZ8DZC8&amp;linkId=b56ce3f9b6fc28eb3b74dee541fddb33&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;良いポイント-4&#34;&gt;良いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ノイズキャンセリング性能が神

&lt;ul&gt;
&lt;li&gt;外したときに雑音が気になりすぎて、ノイズキャンセリングのない状態に戻れなくなるレベル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バッテリーが30時間くらい持つので、1日中使える

&lt;ul&gt;
&lt;li&gt;毎日、寝る前に充電して、朝から夜まで利用可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワイヤレスが最高すぎる

&lt;ul&gt;
&lt;li&gt;もう有線には戻れない&lt;/li&gt;
&lt;li&gt;そもそも最近の iPhone はイヤホンジャックがない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bluetooh機器の切り替えは思ったより手間ではない

&lt;ul&gt;
&lt;li&gt;初回のペアリングだけすれば、携帯電話とPCとの接続の切り替えも面倒ではない&lt;/li&gt;
&lt;li&gt;片方の接続を切断してから、もう一方で接続すればOK&lt;/li&gt;
&lt;li&gt;家ではPC、外ではiPhoneに接続するスタイルも可能&lt;/li&gt;
&lt;li&gt;※当初はBluetooh機器を使ったことが無かったため、これだけが懸念だった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有線でも利用可能なので、飛行機で映画を見るときにも使える&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;悪いポイント-4&#34;&gt;悪いポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;人によっては圧迫感や蒸れが気になるかもしれません

&lt;ul&gt;
&lt;li&gt;この製品の問題というより、ヘッドフォン自体の特徴&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;補足-2&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;1年ほど使いましたが、ノイズキャンセリングヘッドホンは作業の集中力にかなり貢献するので、投資効果も満足度も最高でした！
エンジニアに限らずにあらゆる人にオススメできます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/blog/2019/03/28/gdc2019/&#34;&gt;GDC&lt;/a&gt;に行く飛行機で快適に過ごすために買いましたが、その後も毎日使っています！&lt;/p&gt;

&lt;h2 id=&#34;pc&#34;&gt;PC&lt;/h2&gt;

&lt;p&gt;ドスパラの Core i7-9700K / RTX2070 搭載のフルタワー型のPCを使っています。&lt;/p&gt;

&lt;p&gt;グラフィックスエンジニアなら人権ラインのスペックだと思われます。&lt;/p&gt;

&lt;h2 id=&#34;ワイヤレスマウス-ワイヤレスキーボード&#34;&gt;ワイヤレスマウス / ワイヤレスキーボード&lt;/h2&gt;

&lt;p&gt;先週からマウスとキーボードをワイヤレスに変えました。&lt;/p&gt;

&lt;p&gt;ケーブルが消えたことで、机の上がすっきりして気分が良いです。&lt;/p&gt;

&lt;p&gt;マウスの方は特に問題もなく、個人的には大満足でした。&lt;/p&gt;

&lt;p&gt;キーボードのAmazonレビューは高評価ですが、メンブレン式ですのであまり過度な期待はせずに、打鍵感が気になる人はHHKBやREALFORCEを買ったほうが幸せになれると思います。&lt;/p&gt;

&lt;p&gt;買った直後はキーの硬さが均一ではなく、引っかかる感じがしたのですが、エージングしているうちに馴染んできたような気がします。&lt;/p&gt;

&lt;p&gt;打鍵感に強いこだわりを持たない人であれば、必要十分な商品ではないかと思います。&lt;/p&gt;

&lt;p&gt;標準的なキー配列・テンキーレス・ワイヤレスなキーボードが欲しかったのですが、思ったより選択肢が少なく、消去法でこの商品が残った感じでした。&lt;/p&gt;

&lt;p&gt;予算に余裕があれば、&lt;a href=&#34;https://amzn.to/2Iu1Iqd&#34;&gt;FILCO Majestouch Convertible2 Tenkeyless CherryMXシリーズ&lt;/a&gt;を選んでいたかもしれません。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0161YPBA2&amp;linkId=fca6707393a193e31ae568dee3686a95&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07NDM4CQZ&amp;linkId=065aec52827d286e29635efa15e0c76d&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;インターネット回線&#34;&gt;インターネット回線&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nuro.jp/hikari/&#34;&gt;NURO光&lt;/a&gt;は安くて速いので、3年以上引っ越す予定がなければ、オススメできます。&lt;/p&gt;

&lt;p&gt;月額料金とは別に4万円の工事費が30ヶ月の分割払いになりますが、&lt;a href=&#34;https://www.hikari-au.net/nuro/install/fee&#34;&gt;途中解約しなければ実質無料&lt;/a&gt;になります。&lt;/p&gt;

&lt;p&gt;逆に、3年未満で解約してしまうと、残りの工事費用を一括で支払う必要があるので、割高になってしまう可能性があります。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;NURO 光 for マンション開通記念🎉&lt;br&gt;この速度で月額税別2500円なのは強い😉 &lt;a href=&#34;https://t.co/ompihOEwY5&#34;&gt;pic.twitter.com/ompihOEwY5&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1228952083698569216?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;さいごに&#34;&gt;さいごに&lt;/h1&gt;

&lt;p&gt;紹介した商品はどれも良かったですが、ノイズキャンセリングヘッドホン&lt;a href=&#34;https://amzn.to/32NECE6&#34;&gt;WH-1000XM3&lt;/a&gt;は特に買って良かったです。&lt;/p&gt;

&lt;p&gt;次点で&lt;a href=&#34;https://amzn.to/2vFWkxb&#34;&gt;AKRACINGのゲーミングチェア&lt;/a&gt;も長時間のデスクワークする人ならオススメできます。&lt;/p&gt;

&lt;p&gt;机やモニター、モニターアーム、マウス、キーボードは作業スタイルに依存すると思うので、参考程度でお願いします。&lt;/p&gt;

&lt;p&gt;自分だけかもしれませんが、一部をワイヤレスにすると、すべてをワイヤレスに統一したい欲求が出てくるので、ご注意ください。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近未来教育フォーラム2019でシェーダーライブコーディングをしました</title>
      <link>https://gam0022.net/blog/2019/11/29/dhw/</link>
      <pubDate>Fri, 29 Nov 2019 10:36:17 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/11/29/dhw/</guid>
      <description>&lt;p&gt;2019/11/28にデジタルハリウッド大学で開催された&lt;a href=&#34;https://www.dhw.co.jp/forum/program.html&#34;&gt;近未来教育フォーラム&lt;/a&gt;の
「The Real Time Live &amp;amp; Reception リアルタイムグラフィックスの世界とVTuberが牽引する新たな人類」というイベントに登壇しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/FL1NE&#34;&gt;@FL1NE&lt;/a&gt;さんと一緒にデモシーンについて話しました。
私は簡単なシェーダーライブコーディングをしながらプログラミングによる形状のモデリングについて解説しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/o_ob/status/1200067621799903238&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-11-29-dhw/live_coding_init.jpg&#34; alt=&#34;シェーダーライブコーディング（初期）&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/songofsaya_/status/1199999036964474886&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-11-29-dhw/live_coding.jpg&#34; alt=&#34;シェーダーライブコーディング（完成）&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;レポート-2020-05-09追記&#34;&gt;レポート（2020/05/09追記）&lt;/h2&gt;

&lt;p&gt;当日の様子のレポートが公開されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dhw.co.jp/forum/report/report01.html&#34;&gt;近未来教育フォーラム2019 -In Real Time- 公演レポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;シェーダーライブコーディングによる作品&#34;&gt;シェーダーライブコーディングによる作品&lt;/h2&gt;

&lt;p&gt;WORMHOLEの前半に登場したフラクタルによる複雑な形状のトンネルのモデリングについてライブコーディングしながら解説しました。&lt;/p&gt;

&lt;p&gt;通常の3DCGでは、ツールでモデリングした3Dモデルを読み込んで表示すると思いますが、デモシーンの一部の部門には容量制限があるので、
WORMHOLEではシェーダーによるプログラミングによってプロシージャルにモデリングを行いました。&lt;/p&gt;

&lt;p&gt;発表時間が限られていたので、ハラハラ・ドキドキでしたが、なんとか意図通りの形になって良かったです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;WORMHOLEの前半に登場したフラクタルによる複雑な形状のトンネルのモデリングについてライブコーディングしながら解説しました。&lt;a href=&#34;https://twitter.com/hashtag/DHW?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#DHW&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1200006025878749184?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Gam師のレイマーチング始まってる。 &lt;a href=&#34;https://t.co/MHLrFmbLpL&#34;&gt;pic.twitter.com/MHLrFmbLpL&lt;/a&gt;&lt;/p&gt;&amp;mdash; さやちゃんぐbot (@songofsaya_) &lt;a href=&#34;https://twitter.com/songofsaya__/status/1199999036964474886?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;動画&#34;&gt;動画&lt;/h3&gt;

&lt;p&gt;YouTube配信のアーカイブが残っています。&lt;/p&gt;

&lt;p&gt;34:46〜が自分のシェーダーライブコーディングでした。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/j0yRASXFvlQ?start=2086&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;songofsaya-さんによる解説&#34;&gt;songofsaya_ さんによる解説&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/songofsaya_&#34;&gt;@songofsaya_&lt;/a&gt; さんがTwitterで解説をしてくださっていました。ありがとうございます！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;四角形のパイプと書いたけど、再帰性があるからおそらくメンガーだろうなーと思っていたらメンガーでした。&lt;br&gt;そしてGam師ならではのfoldRotateが登場します。これがKanetaaaaa神だとpmodと名前が変わります。 &lt;a href=&#34;https://t.co/VFqKT2jVoq&#34;&gt;pic.twitter.com/VFqKT2jVoq&lt;/a&gt;&lt;/p&gt;&amp;mdash; さやちゃんぐbot (@songofsaya_) &lt;a href=&#34;https://twitter.com/songofsaya__/status/1200008658916007938?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gam師ならではのfoldRotateが登場します。これがKanetaaaaa神だとpmodと名前が変わります&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正解です！&lt;/p&gt;

&lt;h2 id=&#34;発表資料&#34;&gt;発表資料&lt;/h2&gt;

&lt;p&gt;発表資料はFL1NEさんが作ってくれました。自分はライブコーディングのところを担当しました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b3019de333a449a481ff2df647d2d098&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;当日は&lt;a href=&#34;https://www.sli.do/&#34;&gt;sli.do&lt;/a&gt;で来場者の声がリアルタイムに見えるようになっていました。&lt;/p&gt;

&lt;p&gt;sli.doや懇親会で、メガデモとシェーダーについて「楽しそう！」「自分でも作ってみたい」といった好意的な感想をいただけました！&lt;/p&gt;

&lt;p&gt;シェーダやレイマーチングや3DCGに少しでも興味を持っていただけたのなら嬉しい限りです。ありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;メガデモとシェーダーについて&lt;br&gt;「楽しそう！」「自分でも作ってみたい」&lt;br&gt;といった好意的な感想をいただけて嬉しい限りです☺️&lt;a href=&#34;https://twitter.com/hashtag/DHW?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#DHW&lt;/a&gt; &lt;a href=&#34;https://t.co/BCkGVOiAdv&#34;&gt;pic.twitter.com/BCkGVOiAdv&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1200068188043501568?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>レイトレ合宿7でレイマーチング対応のGPUパストレーサーを実装しました！</title>
      <link>https://gam0022.net/blog/2019/09/18/rtcamp7/</link>
      <pubDate>Wed, 18 Sep 2019 10:15:43 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/09/18/rtcamp7/</guid>
      <description>&lt;p&gt;9月7日(土)～9月8日(日)に猪苗代湖で開催された&lt;a href=&#34;https://sites.google.com/site/raytracingcamp7/&#34;&gt;レイトレ合宿7&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;自作のレンダラーでこんな画像を &lt;strong&gt;60秒の制限時間&lt;/strong&gt; でレンダリングして4位をいただきました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/11.gam.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/11.gam.jpg&#34; alt=&#34;本番のレンダリング結果&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみに4K解像度（3840x2160）です！&lt;/p&gt;

&lt;p&gt;事前に本番環境で動作確認できなかったこともあり、よく見ると意図しないアーティファクトが発生しているのですが、許容レベルに収まったのはラッキーでした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;レイトレ合宿とは&#34;&gt;レイトレ合宿とは&lt;/h1&gt;

&lt;p&gt;レイトレ合宿は完全自作のレイトレーサーを走らせて画像の美しさを競うイベントです。&lt;/p&gt;

&lt;p&gt;参加者はレンダラーを自作する必要がある！というだけで面白いイベントなのですが、レンダリングの制限時間が毎年どんどん短縮されているのも注目ポイントです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/rendering1h/&#34;&gt;第1回のレンダリング合宿&lt;/a&gt;では制限時間が1時間だったのですが、第7回となる今年は60秒制限でした。&lt;/p&gt;

&lt;p&gt;この制限時間はレンダラーを起動してから画像を保存するまでの時間なので、シーンの読み込みからレンダリングをすべて含めて60秒で完了させなくてはなりません。&lt;/p&gt;

&lt;p&gt;そのため、参加者はあらゆる手段をつかって、レンダラーの高速化に本気で取り組む必要があります。&lt;/p&gt;

&lt;p&gt;パストレーシングの高速化のアプローチとしては、サンプリングを効率化する、BVHなどの構造をつかってシーンとの交差判定を効率化する、ノイズを軽減するためにデノイズを行う、などが挙げられます。&lt;/p&gt;

&lt;p&gt;パストレーシングを使わないといけないルールは無いのですが、近年のレイトレ合宿ではパストレーシングが人気です。
今年のレイトレ合宿では、Stochastic Progressive Photon Mappingを実装した&lt;a href=&#34;https://github.com/tabochans&#34;&gt;tabochan&lt;/a&gt;さん以外は全員パストレーシングだったと記憶しています。&lt;/p&gt;

&lt;p&gt;また、複数コアのCPU・複数のGPUを利用したり、メモリのキャッシュ効率を上げてマシンスペックを最大限に活かし切るというのも、実はかなり難しい課題だったりします。私は今年は複数のGPUをうまく使えませんでした…&lt;/p&gt;

&lt;p&gt;参加者はプロダクションレンダラーの開発者やコンピュータグラフィック分野の研究者などのプロの人から、私のように趣味でレンダラーを開発している人まで様々です。&lt;/p&gt;

&lt;p&gt;レイトレ合宿の参加者のレベルが年々向上していて、特に今年は技術的にもアートセンスにも秀でた作品が多い中、4位と上位に食い込めて本当に嬉しかったです！&lt;/p&gt;

&lt;h1 id=&#34;前回までのレイトレ合宿の参加レポート&#34;&gt;前回までのレイトレ合宿の参加レポート&lt;/h1&gt;

&lt;p&gt;ちなみに私は今年で4回目の参加になります。過去の参加レポートはこちらです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/09/25/rtcamp6-part2/&#34;&gt;レイトレ合宿6 参加報告 Part2（当日編） | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/09/18/rtcamp6-part1/&#34;&gt;レイトレ合宿6 参加報告 前編（準備編） | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2017/10/02/rtcamp5/&#34;&gt;レイトレ合宿5‽に参加して、Rustでパストレーシングを実装しました！ | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gam0022.hatenablog.com/entry/raytracingcamp4&#34;&gt;レイトレ合宿4!? に参加しました！ - gam0022のブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;redflash-renderer&#34;&gt;Redflash Renderer&lt;/h1&gt;

&lt;p&gt;Redflash というGPUレンダラーを開発しました。&lt;/p&gt;

&lt;p&gt;Redflash は NVIDIA® OptiX 6.0 上で実装したパストレーシングによる物理ベースレンダラーで、ポリゴンと &lt;strong&gt;レイマーチング&lt;/strong&gt; が混在したシーンを一貫した描画ができます。&lt;/p&gt;

&lt;p&gt;GitHubにソースコードを公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/redflash&#34;&gt;https://github.com/gam0022/redflash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらはアーティファクトなしの想定のレンダリング結果です。レンダリングは30分です。クリックすると非圧縮形式の画像になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/pr33_v6_t3000_s1030.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/pr33_v6_t3000_s1030_1920x1080.jpg&#34; alt=&#34;想定したレンダリング結果&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;別視点からのレンダリング結果も紹介します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/camera_angle1.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/camera_angle1.jpg&#34; alt=&#34;別視点からのレンダリング結果1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/camera_angle2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/camera_angle2.jpg&#34; alt=&#34;別視点からのレンダリング結果2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/camera_angle3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/camera_angle3.jpg&#34; alt=&#34;別視点からのレンダリング結果3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;発表資料&#34;&gt;発表資料&lt;/h2&gt;

&lt;p&gt;自作レンダラーの紹介スライドです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ba3966aad908467e8b21249e828c26d0&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;レイトレ合宿の参加者にとっては常識だと思われる箇所の説明を省略してしまったので、ここから簡単に補足解説をします。&lt;/p&gt;

&lt;h2 id=&#34;neeとmisによるサンプリングの効率化&#34;&gt;NEEとMISによるサンプリングの効率化&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/redflash_rtcamp7.003.jpeg&#34; alt=&#34;実装機能&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この2つは「パストレーシングのサンプリングを効率化する」ための非常に有名なテクニックです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next Event Estimation (Direct Light Sampling)&lt;/li&gt;
&lt;li&gt;Multiple Importance Sampling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next Event EstimationはよくNEEと省略されて呼ばれます。
光源が小さいシーンでは、BSDFによる重点的サンプリングだけではなかなか光源にヒットしません。
そのため、短い計算時間ではノイズだらけの結果になってしまいます。
また、BSDFの分布と光源の方向が異なる場合、むしろBSDFによる重点的サンプリングによって悪化するケースもありえます。
そこで、光源の表面上の点を明示的にサンプリングして光転送経路を生成することで、効率的なサンプリングを行うテクニックがNEEです。&lt;/p&gt;

&lt;p&gt;Multiple Importance SamplingはよくMISと省略されて呼ばれます。
MISは複数のサンプリング戦略を組み合わせることでサンプリングの効率を向上するテクニックです。
具体的には「BSDFによる重点的サンプリング」と「NEEによるライトのサンプリング」の2つの戦略の結果を適切なウェイトで組み合わせることで、サンプリングの効率を向上します。
それぞれのサンプリング戦略が得意な部分だけウェイトを大きくすることで、分散を抑えて効率的にサンプリングができるようになります。
例えば、光源が大きくてroughnessが大きいような「BSDFによる重点的サンプリング」が得意なケースなら「BSDFによる重点的サンプリング」の重みを大きくして、
逆に光源が小さくてroughnessが小さいような「NEEによるライトのサンプリング」が得意なケースなら「NEEによるライトのサンプリング」の重みを大きくします。&lt;/p&gt;

&lt;p&gt;NEEやMISについては、レイトレ合宿の参加者でもある &lt;a href=&#34;https://twitter.com/Shocker_0x15&#34;&gt;@Shocker_0x15&lt;/a&gt; さんが日本語で詳しく記事を書かれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rayspace.xyz/CG/contents/path_tracing/&#34;&gt;パストレーシング - Computer Graphics - memoRANDOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rayspace.xyz/CG/contents/MIS/&#34;&gt;多重重点的サンプリング - Computer Graphics - memoRANDOM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;optixとレイマーチングの統合&#34;&gt;OptiXとレイマーチングの統合&lt;/h2&gt;

&lt;p&gt;OptiXには独自のプリミティブを定義する仕組みがあるため、OptiXとレイマーチングの統合はそこまで苦労しませんでした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IntersectionProgram&lt;/code&gt; と &lt;code&gt;BoundingBoxProgram&lt;/code&gt; としてレイマーチングによる交差判定とAABBの定義をCUDAで実装するだけでできました。&lt;/p&gt;

&lt;p&gt;詳細はレイトレ合宿アドベントカレンダーの記事で既に紹介しているので、気になる方は読んでみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2019/08/05/optix-raymarching-pathtracing/&#34;&gt;NVIDIA® OptiX上で『レイマーチング×パストレーシング』による物理ベースレンダラーを実装した | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;衝突判定の高速化&#34;&gt;衝突判定の高速化&lt;/h2&gt;

&lt;p&gt;BVHの構築はOptiXが自動でやってくれるので、ポリゴンの衝突判定は特に高速化しませんでした。
なんとOptiX 6.0ではRTXに対応しているので、RTX 2070ではハードウェアをつかって高速化な衝突判定ができました！（が、本番環境はRTX非対応でした…）&lt;/p&gt;

&lt;p&gt;一方でレイマーチングの衝突判定については自力で行う必要がありました。
シーン全体を1個の距離関数で表現したため、BVHなどの構造では衝突判定の高速化が難しいためです。&lt;/p&gt;

&lt;h3 id=&#34;距離関数の軽量化&#34;&gt;距離関数の軽量化&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/redflash_rtcamp7.008.jpeg&#34; alt=&#34;実装機能&#34; /&gt;&lt;/p&gt;

&lt;p&gt;レイマーチングでは1本をレイを飛ばすごとに数百回も距離関数を評価する必要があります（今回のレンダリング結果は300回）。&lt;/p&gt;

&lt;p&gt;レイマーチングの負荷は距離関数の複雑さに比例するので、距離関数の軽量化は効果が大きい最適化でした。&lt;/p&gt;

&lt;p&gt;今回はMandelboxという伝統的なフラクタル図形を距離関数として用いたのですが、
メジャーなMandelboxの実装では &lt;code&gt;sphereFold&lt;/code&gt; という操作で分岐があったりとGPUには高負荷なものでした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sphereFold&lt;/code&gt; のどちらの分岐に入るかはMandelboxのパラメータによって決まるので、
一部のパラメータを削除したり、パラメータの範囲を狭めることで分岐を削除して処理を簡略化しました。&lt;/p&gt;

&lt;h3 id=&#34;レイマーチングの衝突判定の精度のlod&#34;&gt;レイマーチングの衝突判定の精度のLOD&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/redflash_rtcamp7.009.jpeg&#34; alt=&#34;レイマーチングの衝突判定の精度のLOD 1/2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;まず速度面では、カメラに近い部分は細部まで正確に衝突判定をする必要がありますが、遠い部分は大雑把でも問題にならないため、LODが有効でした。&lt;/p&gt;

&lt;p&gt;品質面でもLODが必要でした。
Mandelboxの距離関数は厳密には Distance Estimator（距離推定器）と呼ばれるものです。
通常の距離関数は表面までの距離をぴったりと計算できるのに対して、
Distance Estimatorは有限のイテレーション回数では表面に漸近しても、距離0になりません。&lt;/p&gt;

&lt;p&gt;そのため、適当な距離 eps で衝突とみなして計算を打ち切る必要があります。
また、eps を小さくすると、より細かい detail まで可視化できるのですが、
遠景まで同じ eps で処理すると高周波成分が現れて、まるでMipMap OFFのような汚い結果となります。&lt;/p&gt;

&lt;p&gt;このようにレイマーチングの高速化と品質向上の2つの目的ために、衝突判定の精度のLODが必要でした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/redflash_rtcamp7.010.jpeg&#34; alt=&#34;レイマーチングの衝突判定の精度のLOD 2/2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;LODはカメラからの距離に応じて動的に eps を決定することで実現しました。&lt;/p&gt;

&lt;p&gt;レイマーチングではレイを漸近的に進めるため、レイが進んだ距離を必ず計算する必要があります。
このとき &lt;code&gt;レイが進んだ距離 = カメラからの距離&lt;/code&gt; となるため、eps は簡単に決定できます。&lt;/p&gt;

&lt;p&gt;具体的にはレイが進んだ距離に定数を乗算したものを eps として扱うようにしました。&lt;/p&gt;

&lt;p&gt;今回の提出シーンのように同じレイマーチングのオブジェクトの近影〜遠景がひとつのカットで混在していても、綺麗に描画できるようになりました。&lt;/p&gt;

&lt;p&gt;また、カメラを近づけると実質無限に細部が現れるようになりました（フラクタル図形の特徴）。&lt;/p&gt;

&lt;h3 id=&#34;1回のlaunchでなるべくたくさんサンプリングする戦略&#34;&gt;1回のlaunchでなるべくたくさんサンプリングする戦略&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/redflash_rtcamp7.011.jpeg&#34; alt=&#34;1回のlaunchでなるべくたくさんサンプリングする戦略&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OptiXでパストレーシングを実装する場合、通常は1回のlaunchでパストレーシングの1サンプリングを行うように実装するかと思います。&lt;/p&gt;

&lt;p&gt;ところが、launchにも多少のオーバーヘッドがあるため、手元のPCで実験した結果では、
&lt;code&gt;sample_per_launch&lt;/code&gt; （1回のlaunchごとのサンプリング回数）を大きくすれば大きくするほど60秒あたりのサンプリング回数を増やすことができました。&lt;/p&gt;

&lt;p&gt;そこで、最初の4サンプリングでマシンの性能をベンチマークして時間切れにならない最大の sample_per_launch を決定するような戦略をとりました。&lt;/p&gt;

&lt;h2 id=&#34;deep-learning-denoising&#34;&gt;Deep Learning Denoising&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/redflash_rtcamp7.012.jpeg&#34; alt=&#34;Deep Learning Denoising&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ディープラーニングをつかったデノイザーの性能が驚異的に良くて驚きました。&lt;/p&gt;

&lt;p&gt;左が10spp（sample per pixel）の結果で、右がデノイズした結果です。&lt;/p&gt;

&lt;p&gt;かなり少ないサンプリング数でも非常に綺麗にデノイズができました。
特にLucy像の拡散面の部分などは効果が絶大でした。&lt;/p&gt;

&lt;p&gt;Deep Learning DenoisingはOptiXの標準機能を利用しただけなので、詳細については私は理解していません。&lt;/p&gt;

&lt;p&gt;レンダリング結果とnormalとalbedoのバッファを与えてやると、綺麗にデノイズした結果を出力してくれました。&lt;/p&gt;

&lt;p&gt;速度面でも優秀で4K解像度でも&lt;a href=&#34;https://github.com/gam0022/redflash/pull/34&#34;&gt;1.4秒程度&lt;/a&gt;でデノイズが完了しました。&lt;/p&gt;

&lt;p&gt;まだリアルタイムレンダリングには速度的には使いづらいかもしれませんが、これまでの Bilateral Filter や Non-local Means Filter を遥かに凌駕する性能なので、改めてレンダリング技術とディープラーニングの親和性の高さを実感しました。&lt;/p&gt;

&lt;p&gt;これからの時代はグラフィックエンジニアもディープラーニングも勉強しなくては！と思いました。&lt;/p&gt;

&lt;h3 id=&#34;rt-buffer-gpu-local-による最適化&#34;&gt;RT_BUFFER_GPU_LOCAL による最適化&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-09-10-rtcamp7/redflash_rtcamp7.013.jpeg&#34; alt=&#34;RT_BUFFER_GPU_LOCAL による最適化&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Deep Learning Denoising用にalbedoとnormalのバッファを生成したところ、合計で5枚もバッファが必要になりました。
バッファの読み書きもそれなりに重たい処理なので、対策を行いました。
createBuffer の第1引数に &lt;code&gt;RT_BUFFER_INPUT_OUTPUT&lt;/code&gt; を指定したところ、なんと13.6%くらい高速化しました。&lt;/p&gt;

&lt;p&gt;ディスプレイにバッファを同期するかのオプションのようでした。
ウィンドウにバッファを表示する場合はこのオプションをつけると描画結果が同期されなくなってしまいますが、
CUIモードで起動するときには同期は不要なので、このオプションを有効にすることで大幅に性能向上できました。&lt;/p&gt;

&lt;h1 id=&#34;反省-スケジュール面が厳しすぎた&#34;&gt;反省：スケジュール面が厳しすぎた&lt;/h1&gt;

&lt;p&gt;ここまでがレンダラーの紹介でした。ここからは振り返りを書こうと思います。&lt;/p&gt;

&lt;p&gt;最大の反省点はスケジュール面が厳しすぎたことでした…&lt;/p&gt;

&lt;p&gt;OptiXのキャッチアップを含めて約一ヶ月で開発したのですが、流石に無理なスケジュールだったと思います。&lt;/p&gt;

&lt;p&gt;8月は仕事のプロジェクトの追い込み時期とCEDECの登壇準備が重なって、なかなかレンダラー開発の時間を捻出できず、
睡眠時間と生活を削りすぎたため、体力的にも精神的にもかなり限界でした…&lt;/p&gt;

&lt;p&gt;そろそろ若さで無茶をカバーできない年齢になってきたので、締め切り直前になって慌てて開発するのではなく、
日頃から継続的にレンダラーを開発することが大事だろうと思います。&lt;/p&gt;

&lt;h1 id=&#34;余談-シーン作成はunity&#34;&gt;余談：シーン作成はUnity&lt;/h1&gt;

&lt;p&gt;時間がなくてシーン編集機能を実装できなかったので、
Unityで事前に距離関数のパラメータ調整や光源の配置を行ってシーンのイメージを固めてから、後からパラメータを自作レンダラーに移植しました。&lt;/p&gt;

&lt;p&gt;結果的には納得できるシーンを作成できたので、作戦は成功だったと思います。&lt;/p&gt;

&lt;p&gt;UnityのHDRPでレイマーチングを行うのには&lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;@kanetaaaaa&lt;/a&gt;さんの&lt;a href=&#34;https://github.com/kaneta1992/RaymarchingInHDRP/&#34;&gt;RaymarchingInHDRP&lt;/a&gt;を利用させていただきました。&lt;/p&gt;

&lt;p&gt;カッコいいシーンを大量に作れたので、ついスクリーンショットをたくさん撮影してしまいました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Unity HDRP + Raymarching by &lt;a href=&#34;https://twitter.com/kanetaaaaa?ref_src=twsrc%5Etfw&#34;&gt;@kanetaaaaa&lt;/a&gt; を試してみました！&lt;br&gt;カッコいいシーンが無限に作れてしまう😍&lt;br&gt;これは凄いです🙏&lt;a href=&#34;https://twitter.com/hashtag/unity3d?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#unity3d&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/raymarching?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#raymarching&lt;/a&gt;&lt;a href=&#34;https://t.co/EK6JsHpTBZ&#34;&gt;https://t.co/EK6JsHpTBZ&lt;/a&gt; &lt;a href=&#34;https://t.co/ZueP2hfzet&#34;&gt;pic.twitter.com/ZueP2hfzet&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1163876089489285120?ref_src=twsrc%5Etfw&#34;&gt;August 20, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/h1&gt;

&lt;h2 id=&#34;シーン編集機能がほしい&#34;&gt;シーン編集機能がほしい&lt;/h2&gt;

&lt;p&gt;現状はGUIでカメラ操作だけができます。&lt;/p&gt;

&lt;p&gt;シーン編集に関して、上で紹介したようなUnityからパラメータを移植する方法だと最終的なルックの確認のイテレーションの高速化がしずらいので、
Redflash自体にシーン編集機能を実装したいと思っています。&lt;/p&gt;

&lt;p&gt;距離関数を定義したCUDAファイルのホットリロード機能を実装したり、 CallableProgramをつかって距離関数を差し替え可能にしたいです。&lt;/p&gt;

&lt;p&gt;他にも距離関数やマテリアルのパラメータをインスペクタで編集するなどは最低限欲しいなと思っています。&lt;/p&gt;

&lt;p&gt;あとはオブジェクトの配置などをマニピュレーターでできるようにしたいですが、どうしても実装工数がかかるので、どういう感じが良いのか思案しているところです。
DCCツールから直接シーンを出力する形式だと、距離関数の扱いに困るため、なかなか難しい問題です。&lt;/p&gt;

&lt;h2 id=&#34;リファクタリング&#34;&gt;リファクタリング&lt;/h2&gt;

&lt;p&gt;CallableProgramでBSDFを入れ替えられるようにしたり、ファイルを適切に分割したりして、もう少しコードをリファクタリングしたいです。&lt;/p&gt;

&lt;h2 id=&#34;pngのエンコード時間の短縮&#34;&gt;PNGのエンコード時間の短縮&lt;/h2&gt;

&lt;p&gt;PNGの保存には &lt;a href=&#34;https://github.com/nothings/stb/blob/master/stb_image.h&#34;&gt;stb_image&lt;/a&gt; を使わせていただきました。&lt;/p&gt;

&lt;p&gt;ただし、4K解像度となるとPNGの保存に1.7秒前後の時間が必要でした。&lt;/p&gt;

&lt;p&gt;制限時間が短くなると、PNGの保存やGPUの初期化に要する時間が相対的に増えて、レンダリングに使える時間がどんどん短くなってしまいます。&lt;/p&gt;

&lt;p&gt;そのため、PNGの保存やGPU初期化の高速化は、来年以降のレイトレ合宿では重要な課題になるだろうと予想しています。&lt;/p&gt;

&lt;h2 id=&#34;複数gpu対応&#34;&gt;複数GPU対応&lt;/h2&gt;

&lt;p&gt;OptiXをつかっても複数のGPUをうまく使ってくれなかったので、独自の仕組みで対応が必要のようでした。&lt;/p&gt;

&lt;p&gt;単純な解決策として、プロセスを複数起動して最後にレンダリング結果をマージする方法が考えられますが、ちゃんと検証をしたいです。&lt;/p&gt;

&lt;h2 id=&#34;フルスクラッチgpuレンダラー&#34;&gt;フルスクラッチGPUレンダラー&lt;/h2&gt;

&lt;p&gt;去年まではGPUインスタンス勢は1人だけだったのですが、今年は7人（レンダラーが動かなかった人も含む）もいました。&lt;/p&gt;

&lt;p&gt;GPU勢にも、私のようにOptiXなどのレイトレーシング用のフレームワークを使う勢と、フルスクラッチ実装勢で別れていました。&lt;/p&gt;

&lt;p&gt;フルスクラッチ勢からは「OptiXでは作法がきっちり決められているのがなんとなく嫌だった」「GPU向けのBVH実装をしてみたかった」といった意見を聞きました。&lt;/p&gt;

&lt;p&gt;たしかにRTXなどの登場によって交差判定がハードウェアに移りつつある今だからこそ、勉強する価値はあるのかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;今年は忙しいからレイトレ合宿に参加できるか怪しいと思っていましたが、なんとかちゃんとレンダラーを提出できて良かったです。&lt;/p&gt;

&lt;p&gt;思えば「レイマーチングとポリゴンが混在したシーンをパストレーシングしたい」というのは3年前のレイトレ合宿4のときに本当は実現したいテーマでした。&lt;/p&gt;

&lt;p&gt;当時はレイトレ初心者だったので、ナイーブなパストレーシングで精一杯で高速化方法が分からず、
普通にレイマーチングを組み合わせたら激重になってしまい、5時間くらいかけないとまともな絵が出ない状態でした。
結局、パストレーシングを諦めて疑似手法でAOやシャドウを計算してなんとか見れる絵を提出しました…&lt;/p&gt;

&lt;p&gt;3年間で学んだ知識でようやくやりたいことを実現できて本当に良かったです。過去の自分に勝利できました。&lt;/p&gt;

&lt;p&gt;レイトレ合宿は自身の成長や糧となる機会を与えてくれる、とても良い合宿勉強会だなと改めて感じました。&lt;/p&gt;

&lt;p&gt;レイトレ合宿を毎年主催してくださっている&lt;a href=&#34;https://twitter.com/q_cinnamon&#34;&gt;q&lt;/a&gt;さんと&lt;a href=&#34;https://twitter.com/h013&#34;&gt;hole&lt;/a&gt;さん、その他の参加者のみなさん、本当にありがとうございました！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA® OptiX上で『レイマーチング×パストレーシング』による物理ベースレンダラーを実装した</title>
      <link>https://gam0022.net/blog/2019/08/05/optix-raymarching-pathtracing/</link>
      <pubDate>Mon, 05 Aug 2019 12:10:23 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/08/05/optix-raymarching-pathtracing/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://sites.google.com/site/raytracingcamp7/&#34;&gt;レイトレ合宿7&lt;/a&gt;アドベントカレンダーの記事です。&lt;/p&gt;

&lt;p&gt;NVIDIA® OptiX上で『レイマーチング×パストレーシング』による物理ベースレンダラーを開発しました。&lt;/p&gt;

&lt;p&gt;レイとオブジェクトの交差判定をレイマーチングで行い、ライティングをパストレーシングをするという、レイマーチングとパストレーシングのハイブリッドなレンダリングを実現しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;NVIDIA® OptiX上で&lt;br&gt;『レイマーチング×パストレーシング』&lt;br&gt;を実装できた😉 &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%AC%E3%82%A4%E3%83%88%E3%83%AC%E5%90%88%E5%AE%BF?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#レイトレ合宿&lt;/a&gt; &lt;a href=&#34;https://t.co/FKbuHiXqmP&#34;&gt;pic.twitter.com/FKbuHiXqmP&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1155489034354843649?ref_src=twsrc%5Etfw&#34;&gt;July 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;実装の方針&#34;&gt;実装の方針&lt;/h1&gt;

&lt;p&gt;Optixは、CUDA基盤上で動作する、NVIDIA製のGPUレイトレーシング用フレームワークです。&lt;/p&gt;

&lt;p&gt;Optixではユーザ独自のプリミティブを定義できるため、この機能をつかってレイマーチングで衝突判定を行う距離関数のプリミティブを定義しました。&lt;/p&gt;

&lt;p&gt;独自のプリミティブの定義に必要なProgram（Optix用語でPTXアセンブリにコンパイルされたCUDA C関数を指す）は次の2つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bounding Box&lt;/li&gt;
&lt;li&gt;Intersection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optixの公式サンプルプロジェクトに optixPathtracing（パストレーシングの実装例）があったので、これにレイマーチングのプリミティブを追加する形で実装しました。&lt;/p&gt;

&lt;p&gt;パストレーシングの処理はサンプルコードの実装そのまま利用させていただきました。&lt;/p&gt;

&lt;h2 id=&#34;bounding-box&#34;&gt;Bounding Box&lt;/h2&gt;

&lt;p&gt;Bounding Boxを定義するProgramです。&lt;/p&gt;

&lt;p&gt;レイマーチングのオブジェクトのBounding BoxはC++側から値を渡すようにしました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rtDeclareVariable&lt;/code&gt; でCPUからGPUへ送るバッファの宣言（GLSLのunifromと同じ）ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;optix_world.h&amp;gt;

rtDeclareVariable(float3, center, , );
rtDeclareVariable(float3, size, , );

RT_PROGRAM void bounds(int, float result[6])
{
    optix::Aabb* aabb = (optix::Aabb*)result;
    aabb-&amp;gt;m_min = center - size;
    aabb-&amp;gt;m_max = center + size;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;intersection&#34;&gt;Intersection&lt;/h2&gt;

&lt;p&gt;衝突判定をするProgramです。&lt;/p&gt;

&lt;p&gt;ごくごく普通のレイマーチングです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;rtDeclareVariable(int, lgt_instance, , ) = {0};
rtDeclareVariable(float3, texcoord, attribute texcoord, );
rtDeclareVariable(int, lgt_idx, attribute lgt_idx, );

RT_PROGRAM void intersect(int primIdx)
{
    const float EPS = 1e-2;
    float t = 0.0, d = 1e100;
    float3 p = ray.origin;

    for (int i = 0; i &amp;lt; 50; i++)
    {
        d = map(p);
        t += d;
        p = ray.origin + t * ray.direction;
        if (abs(d) &amp;lt; EPS)
        {
            break;
        }
    }

    if (abs(d) &amp;lt; EPS &amp;amp;&amp;amp; rtPotentialIntersection(t))
    {
        shading_normal = geometric_normal = calcNormal(p, map);
        texcoord = make_float3(p.x, p.y, 0);
        lgt_idx = lgt_instance;
        rtReportIntersection(0);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;法線計算&#34;&gt;法線計算&lt;/h3&gt;

&lt;p&gt;法線計算は四面体によるアプローチを用いました。&lt;/p&gt;

&lt;p&gt;通常は6回の距離関数の評価が必要なところ、4回の評価だけで法線を計算できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm&#34;&gt;normals for an SDF | http://iquilezles.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://setchi.hatenablog.com/entry/2018/12/17/095532&#34;&gt;#TokyoDemoFest 2018 の GLSL Graphics Compo で2位入賞しました - setchi’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;map関数を差し替え可能にするためにマクロをつかって実装しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;const float EPS_N = 1e-4;
#define calcNormal(p, dFunc) normalize(\
    make_float3( EPS_N, -EPS_N, -EPS_N) * dFunc(p + make_float3( EPS_N, -EPS_N, -EPS_N)) + \
    make_float3(-EPS_N, -EPS_N,  EPS_N) * dFunc(p + make_float3(-EPS_N, -EPS_N,  EPS_N)) + \
    make_float3(-EPS_N,  EPS_N, -EPS_N) * dFunc(p + make_float3(-EPS_N,  EPS_N, -EPS_N)) + \
    make_float3( EPS_N,  EPS_N,  EPS_N) * dFunc(p + make_float3( EPS_N,  EPS_N,  EPS_N)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;距離関数&#34;&gt;距離関数&lt;/h3&gt;

&lt;p&gt;以前にブログで紹介したIFSによるMengerSpongeの距離関数をCUDA Cに移植しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2019/06/25/unity-raymarching/&#34;&gt;Unity×レイマーチングによる映像制作の実践手法 | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Swizzle Operationを手動展開するのがしんどかったです…&lt;/p&gt;

&lt;p&gt;ベクトル版のabsやmaxは自分で定義すれば解決しますが、Swizzle OperationをCUDA C上で再現する方法は私には分かりませんでした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;CUDA C言語、absやmaxにベクトル型のオーバーロードが無いし、Swizzle Operationも無いからストレスで発狂して精神が崩壊した🤬🤪🤮 &lt;a href=&#34;https://t.co/mRPmQTTcsb&#34;&gt;pic.twitter.com/mRPmQTTcsb&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1155465784807657472?ref_src=twsrc%5Etfw&#34;&gt;July 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;float dMenger(float3 z0, float3 offset, float scale) {
    float4 z = make_float4(z0, 1.0);
    for (int n = 0; n &amp;lt; 4; n++) {
        // z = abs(z);
        z.x = abs(z.x);
        z.y = abs(z.y);
        z.z = abs(z.z);
        z.w = abs(z.w);

        // if (z.x &amp;lt; z.y) z.xy = z.yx;
        if (z.x &amp;lt; z.y)
        {
            float x = z.x;
            z.x = z.y;
            z.y = x;
        }

        // if (z.x &amp;lt; z.z) z.xz = z.zx;
        if (z.x &amp;lt; z.z)
        {
            float x = z.x;
            z.x = z.z;
            z.z = x;
        }

        // if (z.y &amp;lt; z.z) z.yz = z.zy;
        if (z.y &amp;lt; z.z)
        {
            float y = z.y;
            z.y = z.z;
            z.z = y;
        }

        z *= scale;
        // z.xyz -= offset * (scale - 1.0);
        z.x -= offset.x * (scale - 1.0);
        z.y -= offset.y * (scale - 1.0);
        z.z -= offset.z * (scale - 1.0);

        if (z.z &amp;lt; -0.5 * offset.z * (scale - 1.0))
            z.z += offset.z * (scale - 1.0);
    }
    // return (length(max(abs(z.xyz) - make_float3(1.0, 1.0, 1.0), 0.0)) - 0.05) / z.w;
    return (length(make_float3(max(abs(z.x) - 1.0, 0.0), max(abs(z.y) - 1.0, 0.0), max(abs(z.z) - 1.0, 0.0))) - 0.05) / z.w;
}

float map(float3 p)
{
    float scale = 100;
    return dMenger((p - center) / scale, make_float3(1, 1, 1), 3.1) * scale;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;c-からprogramの利用&#34;&gt;C++からProgramの利用&lt;/h2&gt;

&lt;p&gt;Programを利用するには以下のようなC++のコードを書けばOKです。&lt;/p&gt;

&lt;p&gt;ProgramとGPUに送る情報のバッファを指定しているだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Context        context = 0;
Program        pgram_raymarching_intersection = 0;
Program        pgram_raymarching_bounding_box = 0;

// レイマーチングのオブジェクトの GeometryInstance を生成します
GeometryInstance createRaymrachingObject(
    const float3&amp;amp; center,
    const float3&amp;amp; size)
{
    Geometry raymarching = context-&amp;gt;createGeometry();
    raymarching-&amp;gt;setPrimitiveCount(1u);
    raymarching-&amp;gt;setIntersectionProgram(pgram_raymarching_intersection);
    raymarching-&amp;gt;setBoundingBoxProgram(pgram_raymarching_bounding_box);

    raymarching[&amp;quot;center&amp;quot;]-&amp;gt;setFloat(center);
    raymarching[&amp;quot;size&amp;quot;]-&amp;gt;setFloat(size);

    GeometryInstance gi = context-&amp;gt;createGeometryInstance();
    gi-&amp;gt;setGeometry(raymarching);
    return gi;
}

// ジオメトリのセットアップをします
// ※レイマーチングに直接関係ないコードは省略しています
void loadGeometry()
{
    // Set up Raymarching programs
    const char *ptx = sutil::getPtxString( SAMPLE_NAME, &amp;quot;optixRaymarching.cu&amp;quot; );
    pgram_raymarching_bounding_box = context-&amp;gt;createProgramFromPTXString( ptx, &amp;quot;bounds&amp;quot; );
    pgram_raymarching_intersection = context-&amp;gt;createProgramFromPTXString( ptx, &amp;quot;intersect&amp;quot; );

    // create geometry instances
    std::vector&amp;lt;GeometryInstance&amp;gt; gis;

    // Raymarcing
    gis.push_back(createRaymrachingObject(
        make_float3(278.0f, 120.0f, 278.0f),
        make_float3(100.0f, 100.0f, 100.0f)));
    setMaterial(gis.back(), diffuse, &amp;quot;diffuse_color&amp;quot;, white);

    // Create geometry group
    GeometryGroup geometry_group = context-&amp;gt;createGeometryGroup(gis.begin(), gis.end());
    geometry_group-&amp;gt;setAcceleration( context-&amp;gt;createAcceleration( &amp;quot;Trbvh&amp;quot; ) );
    context[&amp;quot;top_object&amp;quot;]-&amp;gt;set( geometry_group );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;optixの環境構築-windows&#34;&gt;Optixの環境構築（Windows）&lt;/h1&gt;

&lt;p&gt;OptixのWindows用の環境構築の流れは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;必要なツールを事前にインストール&lt;/li&gt;
&lt;li&gt;CamkeでVisualStudioのソリューションファイルを生成&lt;/li&gt;
&lt;li&gt;VisualStudioでビルド&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という感じでした。&lt;/p&gt;

&lt;p&gt;morishigeさんのQiitaの記事が大変参考になりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/morishige/items/d4a99c88b925ac31ff3d&#34;&gt;Nvidia OptiX 入門（環境構築編）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CmakeとOptixとCUDAのバージョンの組み合わせが肝のようで、Cmakeのバージョンを変えながら何回かトライしたところ、この組み合わせでCmakeビルドに成功しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;✍️ &lt;br&gt;CUDA 10.1&lt;br&gt;OptiX SDK 6.0.0&lt;br&gt;Visual Studio 2017&lt;br&gt;Cmake 3.8.2&lt;br&gt;&lt;br&gt;freeglut / GLFW / GLEW は Nuget の最新版をインストール&lt;a href=&#34;https://t.co/OtsR6bnxmk&#34;&gt;https://t.co/OtsR6bnxmk&lt;/a&gt;&lt;br&gt;&lt;br&gt;Cmakeの設定はスクショ通り &lt;a href=&#34;https://t.co/cpBM4y2Vy1&#34;&gt;pic.twitter.com/cpBM4y2Vy1&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1150906026528391168?ref_src=twsrc%5Etfw&#34;&gt;July 15, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;CmakeでVisual Studioのバージョンを選択する際、誤って64bit版ではなく32bit版を選択してしまい、Cmake自体は成功するもののソリューションがビルドできないことがありました。&lt;/p&gt;

&lt;p&gt;Cmakeの過去のバージョンはGitHubからインストールできます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Kitware/CMake/releases&#34;&gt;Releases · Kitware/CMake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サンプルコードの改造&#34;&gt;サンプルコードの改造&lt;/h2&gt;

&lt;p&gt;サンプルコードの改造方法はNVIDIA Developer Forumsにあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devtalk.nvidia.com/default/topic/1049151/optix/how-can-i-modify-a-simple-example-/&#34;&gt;How can I modify a simple example? - NVIDIA Developer Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Adding a new example is very simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy one of the optixIntro_01 (this is effectively optixHello) to optixIntro_10 folders,&lt;/li&gt;
&lt;li&gt;rename it,&lt;/li&gt;
&lt;li&gt;rename the project name in its copied CMakeLists.txt,&lt;/li&gt;
&lt;li&gt;add your new subdirectory in the CMakeLists.txt one folder above,&lt;/li&gt;
&lt;li&gt;rebuild the solution with CMake GUI. Done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your new project appears and would do the same thing as the example you copied it from.
Now change it as you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;参考資料&#34;&gt;参考資料&lt;/h1&gt;

&lt;p&gt;以下の記事が大変参考になりました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://memo.render.jp/optix&#34;&gt;optix - uimac実装メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/gameworks/content/gameworkslibrary/optix/optix_quickstart.htm&#34;&gt;OptiX QuickStart（公式チュートリアル）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>[Unity] Y軸ビルボードシェーダーの実装と解説</title>
      <link>https://gam0022.net/blog/2019/07/23/unity-y-axis-billboard-shader/</link>
      <pubDate>Tue, 23 Jul 2019 09:30:09 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/07/23/unity-y-axis-billboard-shader/</guid>
      <description>&lt;h1 id=&#34;改訂版の記事を書きました-2021-12-23&#34;&gt;改訂版の記事を書きました（2021-12-23）&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;この記事の方法は古いので、改訂版を参考にしてください。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2021/12/23/unity-urp-billboard-shader/&#34;&gt;[Unity][URP] Y軸ビルボードシェーダー | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;こんな感じのY軸のビルボードをC#スクリプトを使わずに、シェーダーだけで実装しました（Unity 2018.3.12f1）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-07-22-unity-y-axis-billboard-shader/billboard_y_axis.gif&#34; alt=&#34;Y軸ビルボード&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHubリポジトリ: &lt;a href=&#34;https://github.com/gam0022/unity-legacy-render-pipeline-experiments/blob/master/Assets/Experiments/Billboard/Billboard.shader#L51-L82&#34;&gt;gam0022/unity-legacy-render-pipeline-experiments/blob/master/Assets/Experiments/Billboard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;この記事の要約&#34;&gt;この記事の要約&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;頂点シェーダーでView行列の回転（カメラに応じた回転）をスキップすれば、ビルボードができる&lt;/li&gt;
&lt;li&gt;Unityは左手系座標だが、 &lt;strong&gt;View空間では右手系座標&lt;/strong&gt; なので、View変換をスキップするときには自前でZの符号を反転する必要がある&lt;/li&gt;
&lt;li&gt;Y軸のビルボードが必要なら、View行列から回転行列のY軸成分のみを抽出した行列を作れば良い&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;シェーダーで実装するメリット&#34;&gt;シェーダーで実装するメリット&lt;/h1&gt;

&lt;p&gt;シェーダーでビルボードを計算するメリットはたくさんあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VRChatなどユーザのC#スクリプトが使えない環境でも動作する&lt;/li&gt;
&lt;li&gt;シーンビュー上でも動作する&lt;/li&gt;
&lt;li&gt;GPU（頂点シェーダー）でビルボード計算ができる

&lt;ul&gt;
&lt;li&gt;ビルボード計算のためのCPU負荷が全くかからない&lt;/li&gt;
&lt;li&gt;板ポリの頂点数は4なので、頂点シェーダーで多少重い処理をしても、GPU負荷への影響はわずか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;シェーダーのコード-全体&#34;&gt;シェーダーのコード（全体）&lt;/h1&gt;

&lt;p&gt;最終的なシェーダーのコードはこちらです。&lt;/p&gt;

&lt;p&gt;単体で動作しますので、コピペしてお使いいただけます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Unity Y-Axis Billboard Shader by @gam0022
// https://gam0022.net/blog/2019/07/23/unity-y-axis-billboard-shader/
Shader &amp;quot;Unlit/Billboard&amp;quot;
{
    Properties
    {
        _MainTex (&amp;quot;Texture&amp;quot;, 2D) = &amp;quot;white&amp;quot; {}
        [KeywordEnum(OFF, ALL_AXIS, Y_AXIS)] _BILLBOARD(&amp;quot;Billboard Mode&amp;quot;, Float) = 2
        _Cutoff (&amp;quot;Alpha Cutoff&amp;quot;, Range(0, 1)) = 0.5
    }
    SubShader
    {
        Tags{ &amp;quot;Queue&amp;quot; = &amp;quot;AlphaTest&amp;quot; &amp;quot;RenderType&amp;quot; = &amp;quot;TransparentCutout&amp;quot;
                &amp;quot;IgnoreProjector&amp;quot; = &amp;quot;True&amp;quot; &amp;quot;DisableBatching&amp;quot; = &amp;quot;True&amp;quot; }

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include &amp;quot;UnityCG.cginc&amp;quot;
            #pragma multi_compile _BILLBOARD_OFF _BILLBOARD_ALL_AXIS _BILLBOARD_Y_AXIS

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;
            
            float _Cutoff;

            v2f vert (appdata v)
            {
                v2f o;

                #if _BILLBOARD_OFF
                {
                    // ビルボードなしの通常の座標変換
                    o.vertex = UnityObjectToClipPos(v.vertex);
                }
                #elif _BILLBOARD_ALL_AXIS
                {                   
                    // Meshの原点をModelView変換
                    float3 viewPos = UnityObjectToViewPos(float3(0, 0, 0));
                    
                    // スケールと回転（平行移動なし）だけModel変換して、View変換はスキップ
                    float3 scaleRotatePos = mul((float3x3)unity_ObjectToWorld, v.vertex);
                    
                    // scaleRotatePosを右手系に変換して、viewPosに加算
                    // 本来はView変換で暗黙的にZが反転されているので、
                    // View変換をスキップする場合は明示的にZを反転する必要がある
                    viewPos += float3(scaleRotatePos.xy, -scaleRotatePos.z);
                    
                    o.vertex = mul(UNITY_MATRIX_P, float4(viewPos, 1));
                }
                #elif _BILLBOARD_Y_AXIS
                {
                    // Meshの原点をModelView変換
                    float3 viewPos = UnityObjectToViewPos(float3(0, 0, 0));
                    
                    // スケールと回転（平行移動なし）だけModel変換して、View変換はスキップ
                    float3 scaleRotatePos = mul((float3x3)unity_ObjectToWorld, v.vertex);                
                    
                    // View行列から回転行列のY軸成分のみを抽出
                    float3x3 ViewRotateY = float3x3(
                        1, UNITY_MATRIX_V._m01, 0,
                        0, UNITY_MATRIX_V._m11, 0,
                        0, UNITY_MATRIX_V._m21, -1// Zの符号を反転して右手系に変換
                    );
                    viewPos += mul(ViewRotateY, scaleRotatePos);
                    
                    o.vertex = mul(UNITY_MATRIX_P, float4(viewPos, 1));
                }
                #endif

                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                // sample the texture
                fixed4 col = tex2D(_MainTex, i.uv);
                clip(col.a - _Cutoff);
                
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--more--&gt;

&lt;h2 id=&#34;ビルボードのモードについて&#34;&gt;ビルボードのモードについて&lt;/h2&gt;

&lt;p&gt;このようにビルボードのモードをインスペクタで選択できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-07-22-unity-y-axis-billboard-shader/shader_inspector.png&#34; alt=&#34;シェーダーのインスペクタ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;それぞれの結果を並べました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;OFF: ビルボードなし&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;ALL_AXIS: 通常のビルボード&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Y_AXIS: Y軸のビルボード&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-07-22-unity-y-axis-billboard-shader/billboard_off.gif&#34; alt=&#34;ビルボードなし&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-07-22-unity-y-axis-billboard-shader/billboard_all_axis.gif&#34; alt=&#34;ビルボードあり&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-07-22-unity-y-axis-billboard-shader/billboard_y_axis.gif&#34; alt=&#34;Y軸ビルボード&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;通常の描画&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;上から見たときの違和感が大きい&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;上から見たときの違和感を緩和できる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;コードの解説&#34;&gt;コードの解説&lt;/h1&gt;

&lt;p&gt;ここから、本題であるシェーダーの解説を行います。&lt;/p&gt;

&lt;h2 id=&#34;通常のビルボード&#34;&gt;通常のビルボード&lt;/h2&gt;

&lt;p&gt;通常のビルボードの頂点シェーダーの処理を抜粋しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#elif _BILLBOARD_ALL_AXIS
{                   
    // ①Meshの原点をModelView変換
    float3 viewPos = UnityObjectToViewPos(float3(0, 0, 0));
    
    // ②スケールと回転（平行移動なし）だけModel変換して、View変換はスキップ
    float3 scaleRotatePos = mul((float3x3)unity_ObjectToWorld, v.vertex);
    
    // ③scaleRotatePosを右手系に変換して、viewPosに加算
    // 本来はView変換で暗黙的にZが反転されているので、
    // View変換をスキップする場合は明示的にZを反転する必要がある
    viewPos += float3(scaleRotatePos.xy, -scaleRotatePos.z);
    
    // ④最後にプロジェクション変換
    o.vertex = mul(UNITY_MATRIX_P, float4(viewPos, 1));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;①について&#34;&gt;①について&lt;/h3&gt;

&lt;p&gt;記事の冒頭で&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.頂点シェーダーでView行列の回転（カメラに応じた回転）をスキップすれば、ビルボードができる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書きましたが、厳密にはMeshの原点だけはView変換を行います。&lt;/p&gt;

&lt;p&gt;原点は回転の影響を受けないので、普通にModelView変換することで平行移動のみ適応できます。&lt;/p&gt;

&lt;h3 id=&#34;②について&#34;&gt;②について&lt;/h3&gt;

&lt;p&gt;Model行列よる平行移動は①で処理しているので、スケールと回転だけを各頂点に適応します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(float3x3)unity_ObjectToWorld&lt;/code&gt; のように &lt;code&gt;float3x3&lt;/code&gt; でキャストすることで、平行移動の行列の成分を捨てることができます。&lt;/p&gt;

&lt;p&gt;列ベクトルの場合は4行目に平行移動の情報が入っていますが、キャストによって4列目の成分が消えるため、平行移動の成分が消えます。&lt;/p&gt;

&lt;h3 id=&#34;③について&#34;&gt;③について&lt;/h3&gt;

&lt;p&gt;①で&lt;code&gt;viewPos&lt;/code&gt; には原点のView空間の座標を代入しましたが、これに②で生成した各頂点の座標を加算しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;float3(scaleRotatePos.xy, -scaleRotatePos.z)&lt;/code&gt; のようにZ成分だけ符号を反転しているのは、冒頭の&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2.Unityは左手系座標だが、 &lt;strong&gt;View空間では右手系座標&lt;/strong&gt; なので、View変換をスキップするときには自前でZの符号を反転する必要がある&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という理由によるものです。&lt;/p&gt;

&lt;p&gt;左手系座標ではZ軸とカメラのforwardベクトルが同じ向きですが、右手系座標では反対向きになります。&lt;/p&gt;

&lt;p&gt;私はこのUnityの仕様を知らずに、かなり悩んでしまいました…&lt;/p&gt;

&lt;p&gt;私がネットで見つけたUnityのビルボードのシェーダーの実装のほとんどはZを反転する処理が抜けていました。
そのため、Box等の厚みのあるMeshに用いると、Cullingが反転して背面ポリゴンが描画される不具合がありました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Z反転なし&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Z反転あり&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-07-22-unity-y-axis-billboard-shader/z_reverse_off.png&#34; alt=&#34;Z反転なし&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-07-22-unity-y-axis-billboard-shader/z_reverse_on.png&#34; alt=&#34;Z反転あり&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NG: Cullingが反転して背面ポリゴンが描画されている&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;OK: 正常に表面ポリゴンが描画されている&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;④について&#34;&gt;④について&lt;/h3&gt;

&lt;p&gt;View座標にプロジェクション行列を乗算すると、最終的なクリッピング座標を計算できます（定形処理）。&lt;/p&gt;

&lt;h2 id=&#34;y軸のビルボード&#34;&gt;Y軸のビルボード&lt;/h2&gt;

&lt;p&gt;Y軸のビルボードの頂点シェーダーの処理を抜粋しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#elif _BILLBOARD_Y_AXIS
{
    // ①Meshの原点をModelView変換
    float3 viewPos = UnityObjectToViewPos(float3(0, 0, 0));
    
    // ②スケールと回転（平行移動なし）だけModel変換して、View変換はスキップ
    float3 scaleRotatePos = mul((float3x3)unity_ObjectToWorld, v.vertex);                
    
    // ③View行列からY軸の回転だけ抽出した行列を生成
    float3x3 ViewRotateY = float3x3(
        1, UNITY_MATRIX_V._m01, 0,
        0, UNITY_MATRIX_V._m11, 0,
        0, UNITY_MATRIX_V._m21, -1// Zの符号を反転して右手系に変換
    );
    viewPos += mul(ViewRotateY, scaleRotatePos);
    
    // ④最後にプロジェクション変換
    o.vertex = mul(UNITY_MATRIX_P, float4(viewPos, 1));
}
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;①②④について&#34;&gt;①②④について&lt;/h3&gt;

&lt;p&gt;①②④については、通常のビルボードと全く同じ処理なので、説明を割愛します。&lt;/p&gt;

&lt;h3 id=&#34;③について-1&#34;&gt;③について&lt;/h3&gt;

&lt;p&gt;③の &lt;code&gt;ViewRotateY&lt;/code&gt; は冒頭で説明したこの行列です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3.Y軸のビルボードが必要なら、View行列から回転行列のY軸成分のみを抽出した行列を作れば良い&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;View行列から回転行列のY軸成分だけ抽出して、X軸とZ軸は変換しないようにしています。&lt;/p&gt;

&lt;p&gt;通常のビルボードと同様に、View空間では右手系座標とするために、3行3列目には -1 を指定しています。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;ビルボードくらいサクッと実装できると思いきや、View空間が右手系座標になっているとは夢にも思わず、すこし苦戦しました。&lt;/p&gt;

&lt;p&gt;そこで動作原理を解説した日本語の記事を探したものの、ほとんど見当たらなかったため、今回筆を執った次第です。&lt;/p&gt;

&lt;p&gt;なるべく丁寧に解説したつもりでしたが、分かりにくい点や間違いがあればコメントやTwitterで教えてください。&lt;/p&gt;

&lt;p&gt;ちなみに今回の方法だとドローコールバッチングができないため、次回はドローコールを減らす解決策を紹介するかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;参考資料&#34;&gt;参考資料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Unity公式リファレンス

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unity3d.com/ja/current/Manual//SL-BuiltinFunctions.html&#34;&gt;ビルトインシェーダーヘルパー機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unity3d.com/ja/current/Manual/SL-UnityShaderVariables.html&#34;&gt;ビルトインのシェーダー変数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.unity3d.com/ja/current/ScriptReference/Camera-worldToCameraMatrix.html&#34;&gt;Camera.worldToCameraMatrix&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ポイント: Note that camera space matches OpenGL convention: camera&amp;rsquo;s forward is the negative Z axis. This is different from Unity&amp;rsquo;s convention, where forward is the positive Z axis.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://edom18.hateblo.jp/entry/2019/01/04/153205&#34;&gt;Unityの行列の扱いとベクトルのオーダー周りについてまとめておく&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ポイント: UnityのC#は「列オーダー」。でもシェーダは「行オーダー」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://logicalbeat.jp/blog/929/&#34;&gt;【Unity】【数学】Unityでのビュー＆プロジェクション行列とプラットフォームの関係&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ポイント: UnityのScene上は左手座標系が原則だが、シェーダ内の行列（UNITY_MATRIX_V）では右手座標系になっているという情報がある。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://marupeke296.com/DXG_No72_ViewProjInfo.html&#34;&gt;その72 ビュー・射影変換行列が持つ情報を抜き出そう&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Model行列・View行列・Projection行列の各成分が何だったか忘れたときに参考になります&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;既存のビルボードのシェーダー実装

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/kaiware007/8ebad2d28638ff83b6b74970a4f70c9a#file-billboard-shader-L47-L50&#34;&gt;Simple Billboard shader for Unity&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;NOTE: Cullingの不具合あり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Unity3D/comments/ahqbod/a_billboard_sprite_shader_in_only_one_axis/eeieb6q/&#34;&gt;A billboard sprite shader in only one axis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;NOTE: 逆行列（転置行列）でViewのXZの回転を打ち消すアプローチなので、計算に無駄がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;利用したテクスチャ素材

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pngall.com/tree-png/download/23754&#34;&gt;Tree PNG Clipart Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.deviantart.com/fabooguy/art/Dirt-Ground-Texture-Tileable-2048x2048-441212191&#34;&gt;Dirt/Ground Texture [Tileable | 2048x2048]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>

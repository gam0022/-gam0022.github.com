<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/event/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2021 gam0022</copyright>
    <atom:link href="/tags/event/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tokyo Demo Fest 2021のShader Showdownに参加しました</title>
      <link>https://gam0022.net/blog/2021/12/31/tdf2021-shader-showdown/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/12/31/tdf2021-shader-showdown/</guid>
      <description>&lt;p&gt;12月11日～12日にオンラインで開催された&lt;a href=&#34;https://tokyodemofest.jp/&#34;&gt;Tokyo Demo Fest 2021&lt;/a&gt;（以下、TDF）に参加しました。&lt;/p&gt;

&lt;p&gt;TDFは、日本国内で唯一のデモパーティです。
リアルタイムに映像や音楽を生成するプログラムを「デモ」と言い、デモを鑑賞したり完成度を競ったりして楽しむイベントを「デモパーティ」と言います。
「デモシーン」はデモやデモパーティを中心としたコンピューターのサブカルチャーです。&lt;/p&gt;

&lt;p&gt;TDFのShader Showdownというイベントに競技者として参加しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-31-tdf2021-shader-showdown/Collage_Fotor_v3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-31-tdf2021-shader-showdown/Collage_Fotor_v3.jpg&#34; alt=&#34;Collage_Fotor_v3&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;また、TDFのGLSL Graphics Compoにも参加したので、こちらは別記事にまとめました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/blog/2021/12/20/tdf2021-glsl/&#34;&gt;Tokyo Demo Fest 2021のGLSL Graphics Compo優勝作品の解説 | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;shader-showdownとは&#34;&gt;Shader Showdownとは&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;TokyoDemoFestのShader Showdownは、世界的なDemoparty「Revision」と同じレギュレーションで開催します。&lt;br&gt;試合の放映はパーティー当日12/11-12となります。乞うご期待……！ &lt;a href=&#34;https://t.co/IlVue5npWz&#34;&gt;pic.twitter.com/IlVue5npWz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tokyo Demo Fest 2021 (2021/12/11-12) (@TokyoDemoFest) &lt;a href=&#34;https://twitter.com/TokyoDemoFest/status/1452275618997886976?ref_src=twsrc%5Etfw&#34;&gt;October 24, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Shader Showdownとは25分間でシェーダーを書き、どちらの作品が良いかを決める競技です。&lt;/p&gt;

&lt;p&gt;試合中は、一切のドキュメントの参照ができません。当然ながら必要な関数はすべて試合中に実装しないいけません。&lt;/p&gt;

&lt;p&gt;1対1のトーナメント形式で開催され、試合の勝敗は観衆（ビジター）の投票によって決定します。今回は私を含めた8人でトーナメントを行いました。&lt;/p&gt;

&lt;p&gt;対戦はGLSLのライブコーディングで行われます。&lt;a href=&#34;https://github.com/TheNuSan/Bonzomatic/releases/tag/v11&#34;&gt;Bonzomatic&lt;/a&gt;というアプリを利用し、対戦者の書いているコードやカーソルの位置が共有されます。&lt;/p&gt;

&lt;p&gt;ビジターは対戦者が25分の制限時間の中でどのような戦略とアイデアをもってコードを書いていくかをすぐ隣でみているかのように体験できます。&lt;/p&gt;

&lt;p&gt;詳しいGLSLライブコーディングの知識がなくても楽しめるよう、TDFでは対戦者がどのようなコードを書いているかのリアルタイムな解説があります。&lt;/p&gt;

&lt;h1 id=&#34;ライブコーディングした作品解説&#34;&gt;ライブコーディングした作品解説&lt;/h1&gt;

&lt;p&gt;今回のTDFのShader Showdownでライブコーディングした作品を簡単に解説します。&lt;/p&gt;

&lt;p&gt;TDFのShader Showdownの全作品は&lt;a href=&#34;https://livecode.demozoo.org/party_series/174.html&#34;&gt;livecode.demozoo.org&lt;/a&gt;にもアーカイブされています。&lt;/p&gt;

&lt;h2 id=&#34;lightning-tunnel-quarter-final&#34;&gt;Lightning Tunnel | Quarter-Final&lt;/h2&gt;

&lt;p&gt;準々決勝（Quarter-Final）の作品です。&lt;/p&gt;

&lt;p&gt;稲妻が轟くトンネルをイメージして作りました。&lt;/p&gt;

&lt;p&gt;ボリュームレンダリングをしてBloom感を出しています。ボリュームレンダリングの実装が雑なのでアーティファクトが発生しているのですが、むしろ雷の荒々しい感じが再現できて良かったです。&lt;/p&gt;

&lt;p&gt;時間が余ったのでカメラのFoVのアニメーションをしたのですが、ちょっとワープっぽい効果になりました。&lt;/p&gt;

&lt;p&gt;モデリングはIFSでやっています。IFSで狙った形状を出すことは困難なので、パラメーターは事前に調整をして暗記しておきました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;25分でライブコーディングしたシェーダーです。&lt;br&gt;&lt;br&gt;This shader was coded in 25 minutes.&lt;br&gt;&lt;br&gt;Shader showdown quarter-final at &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Bonzomatic?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Bonzomatic&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/LiveCoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#LiveCoding&lt;/a&gt; &lt;a href=&#34;https://t.co/WTw7tHVsbk&#34;&gt;pic.twitter.com/WTw7tHVsbk&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469562828831195140?ref_src=twsrc%5Etfw&#34;&gt;December 11, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/sl3XWM&#34;&gt;Shadertoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://neort.io/art/c6qm3ls3p9f3hsje6360&#34;&gt;NEORT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YouTubeのアーカイブ（Day1の2:15頃）です。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/2s9KfMn1J9M?start=8114&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;vj-feat-niko-14-semi-final&#34;&gt;VJ feat. Niko_14 | Semi-Final&lt;/h2&gt;

&lt;p&gt;準決勝（Semi-Final）の作品です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/himazin917&#34;&gt;Niko_14&lt;/a&gt;さんの音楽がとても素晴らしかったので、音楽と同期したVJに挑戦しました。&lt;/p&gt;

&lt;p&gt;試合の前日に自分の試合の音楽担当はNiko_14さんと聞いたので、そのタイミングでVJをする決意をしました。&lt;/p&gt;

&lt;p&gt;VJっぽい絵を狙ったことが無かったのですが、ほぼ狙い通りのバキバキな感じにできたので良かったです。
シェーダーの構成としてはQuarter-Finalとほぼ同じで、IFSとボリュームレンダリングの組み合わせです。
IFSのパラメーターは適当だったのですが、ちゃんと狙い通りの絵になったので良かったです。&lt;/p&gt;

&lt;p&gt;色はFFT（音楽の周波数ごとのボリューム）に対応していて、低音が赤、中音が緑、高音が青に対応しています。
キックの音が支配的だったので、キックに合わせて赤～ピンクっぽいビームが発生しています。&lt;/p&gt;

&lt;p&gt;Twitterの動画の4秒頃のように、音が切り替わるタイミングでサウンドリアクティブになっているのが分かりやすいと思います。ぜひ音声をONにして再生してください！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;25分でライブコーディングしたシェーダーです。&lt;br&gt;かっこいい音楽は &lt;a href=&#34;https://twitter.com/himazin917?ref_src=twsrc%5Etfw&#34;&gt;@himazin917&lt;/a&gt; さん制作です！&lt;br&gt;&lt;br&gt;This shader was coded in 25 minutes.&lt;br&gt;Sound by &lt;a href=&#34;https://twitter.com/himazin917?ref_src=twsrc%5Etfw&#34;&gt;@himazin917&lt;/a&gt;&lt;br&gt;&lt;br&gt;Shader showdown semi-final at &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Bonzomatic?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Bonzomatic&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/LiveCoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#LiveCoding&lt;/a&gt; &lt;a href=&#34;https://t.co/HzUpd9le3t&#34;&gt;pic.twitter.com/HzUpd9le3t&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469924900257562627?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/NttSRS&#34;&gt;Shadertoy&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ShadertoyのSoundcloud連携が機能していないため、音楽はNiko_14さんのものではなく、仮です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YouTubeのアーカイブ（Day2の1:41頃）です。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/bp37xTVNRrM?start=6086&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;VJっぽいバキバキとした絵の方向性やFFTを用いたサウンドリアクティブなシェーダーはこれまで挑戦したことのないジャンルだったので、新しい方向性を模索する良い経験になりました。&lt;/p&gt;

&lt;p&gt;Semi-Finalでは&lt;a href=&#34;https://twitter.com/kamoshika_vrc&#34;&gt;Kamoshika&lt;/a&gt;さんに負けてしまったのですが、試合後のコメントによると反射の処理には&lt;a href=&#34;https://gam0022.net/blog/2021/06/08/unity-bible2/&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』の自分の章&lt;/a&gt;を参考にしてくださったそうで、めちゃくちゃありがてぇ🙏となりました。&lt;/p&gt;

&lt;p&gt;Jugem-Tさんも実況による盛り上げありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;凄い画同士の殴り合いの中BGMもライブコーディングで生成してる(Niko_14氏)とんでもない光景になっててヤバい&lt;br&gt;&lt;br&gt;Shader Showdown準決勝 gam0022氏 vs Kamoshika氏&lt;br&gt;[LIVE]Tokyo Demo Fest 2021 Day2 &lt;a href=&#34;https://t.co/648ZNFJTxk&#34;&gt;https://t.co/648ZNFJTxk&lt;/a&gt; &lt;a href=&#34;https://twitter.com/YouTube?ref_src=twsrc%5Etfw&#34;&gt;@YouTube&lt;/a&gt;より &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/atG6c8hWiK&#34;&gt;pic.twitter.com/atG6c8hWiK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jugem-T 𓆡作業中 (@Jugem_T) &lt;a href=&#34;https://twitter.com/Jugem_T/status/1469892859503734787?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;大変でしたが、楽しかったです。&lt;/p&gt;

&lt;p&gt;25分でできる範囲はかなり限られてくるので、詰め込める要素を取捨選択して、ミスをしないように実装するのは思っていたより難しく感じました。25分だとデバッグしている余裕はなくバグを生み出した瞬間に敗戦が濃厚になります。
距離関数も普段はコピペしているので暗記も大変でした。回転行列くらいは導出できるのですが、sdBoxは導出していたら時間がまったく足りません。&lt;/p&gt;

&lt;p&gt;正直に言うと、まさかここまでレベルの高い戦いになるとは思っておらず、参加者のみなさんが凄すぎてちょっと心が折れそうでした。&lt;/p&gt;

&lt;p&gt;とくにFinal（決勝）の&lt;a href=&#34;https://twitter.com/kamoshika_vrc&#34;&gt;Kamoshika&lt;/a&gt; vs &lt;a href=&#34;https://twitter.com/phi16_&#34;&gt;phi16&lt;/a&gt; の戦いは印象深かったです。&lt;/p&gt;

&lt;p&gt;Kamoshikaさんは蝶、phi16さんはライブゲームと、両者とも &amp;ldquo;生命&amp;rdquo; を誕生させていました。偶然にもテーマが一致していてちょっと面白かったです。&lt;/p&gt;

&lt;p&gt;とにかく実装量がえげつなく、これをライブコーディングでやるんだ…と驚かされました。
競技者として参加したことで、25分間でこの量をミスなく実装する困難さは痛いほど理解していたので、なおさら驚かされました。&lt;/p&gt;

&lt;p&gt;両者ともミスなく作品を仕上げており、まさに決勝戦に相応しい素晴らしい戦いを見せていただきました🙏心の底から感動しました。&lt;/p&gt;

&lt;p&gt;世界レベルの実力者の方々と戦えて本当に光栄でした！ありがとうございます！&lt;/p&gt;

&lt;p&gt;Kamoshikaさん&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;25 minutes live coding at Shader Showdown Final.&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/LiveCoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#LiveCoding&lt;/a&gt; &lt;a href=&#34;https://t.co/WeVq82f50E&#34;&gt;pic.twitter.com/WeVq82f50E&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kamoshika (@kamoshika_vrc) &lt;a href=&#34;https://twitter.com/kamoshika_vrc/status/1470360600517971970?ref_src=twsrc%5Etfw&#34;&gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;phi16さん&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/qluYGj653s&#34;&gt;pic.twitter.com/qluYGj653s&lt;/a&gt;&lt;/p&gt;&amp;mdash; phi16 (@phi16&lt;em&gt;) &amp;lt;a href=&amp;ldquo;&lt;a href=&#34;https://twitter.com/phi16&#34;&gt;https://twitter.com/phi16&lt;/a&gt;&lt;/em&gt;/status/1470104161320849409?ref_src=twsrc%5Etfw&amp;rdquo;&amp;gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;記録 TDF2021 ShaderShowdown &lt;a href=&#34;https://t.co/mMcSoYwh5U&#34;&gt;https://t.co/mMcSoYwh5U&lt;/a&gt;&lt;/p&gt;&amp;mdash; phi16 (@phi16&lt;em&gt;) &amp;lt;a href=&amp;ldquo;&lt;a href=&#34;https://twitter.com/phi16&#34;&gt;https://twitter.com/phi16&lt;/a&gt;&lt;/em&gt;/status/1470415119708753921?ref_src=twsrc%5Etfw&amp;rdquo;&amp;gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;YouTubeのアーカイブ（Day2の4:27頃）です。&lt;/p&gt;

&lt;p&gt;Finalでは私も実況者の一人として参加しています。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/bp37xTVNRrM?t=16030&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;おつかれさまでした！&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/h2yXCGGBYa&#34;&gt;pic.twitter.com/h2yXCGGBYa&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469999619409350657?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;さいごに、関係者のみなさんに感謝を申し上げます。
TDFのオーガナイザーの方々、Shader Showdownで対戦してくださったgyaboさん、norargsさん、Kamoshikaさん、0b5vrさん、phi16さん、sp4ghetさん、gazさん、実況のamagiさん、doxasさん、hiraiさんmurasaqiさん、音楽を担当したNiko_14さん、寝る前さん、h0ffman1さん、アーカイブ関連でpsenoghさん、Zavieさん、応援してくださった観戦者みなさん、本当にありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;練習&#34;&gt;練習&lt;/h1&gt;

&lt;p&gt;ライブコーディングの練習中の作品です。&lt;/p&gt;

&lt;p&gt;Quarter-FinalのIFS+ボリュームレンダリングのアプローチは練習中に決めました。&lt;/p&gt;

&lt;p&gt;トンネルのIFSのモデリングもよく見ると面影が残っています。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;情報量を追加（エンコード耐久テスト）&lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Raymarching?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Raymarching&lt;/a&gt; &lt;a href=&#34;https://t.co/uBg43zGOk6&#34;&gt;pic.twitter.com/uBg43zGOk6&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1453405601971666944?ref_src=twsrc%5Etfw&#34;&gt;October 27, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Diamond Variation 🔷 &lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Raymarching?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Raymarching&lt;/a&gt; &lt;a href=&#34;https://t.co/IAEhBgdW5s&#34;&gt;pic.twitter.com/IAEhBgdW5s&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1453768374312263683?ref_src=twsrc%5Etfw&#34;&gt;October 28, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Shadertoy?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shadertoy&lt;/a&gt; にポートしました。&lt;br&gt;&lt;br&gt;&amp;quot;Diamond Tunnel&amp;quot; by gam0022&lt;a href=&#34;https://twitter.com/hashtag/GLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt;&lt;a href=&#34;https://t.co/oyyz8mop2x&#34;&gt;https://t.co/oyyz8mop2x&lt;/a&gt; &lt;a href=&#34;https://t.co/DXnqCAKY1Z&#34;&gt;pic.twitter.com/DXnqCAKY1Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1476576224768331776?ref_src=twsrc%5Etfw&#34;&gt;December 30, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tokyo Demo Fest 2021のGLSL Graphics Compo優勝作品の解説</title>
      <link>https://gam0022.net/blog/2021/12/20/tdf2021-glsl/</link>
      <pubDate>Mon, 20 Dec 2021 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/12/20/tdf2021-glsl/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;http://qiita.com/advent-calendar/2021/klab&#34;&gt;KLab Engineer Advent Calendar 2021&lt;/a&gt;の20日目の記事です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;12月11日～12日にオンラインで開催された&lt;a href=&#34;https://tokyodemofest.jp/&#34;&gt;Tokyo Demo Fest 2021&lt;/a&gt;（以下、TDF）に参加しました。&lt;/p&gt;

&lt;p&gt;TDFは、日本国内で唯一のデモパーティです。
リアルタイムに映像や音楽を生成するプログラムを「デモ」と言い、デモを鑑賞したり完成度を競ったりして楽しむイベントを「デモパーティ」と言います。
「デモシーン」はデモやデモパーティを中心としたコンピューターのサブカルチャーです。&lt;/p&gt;

&lt;p&gt;今年のTDFでは、『Alien Spaceship』という作品を発表しました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/_F0Pxq7TKqs&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Released &amp;quot;Alien Spaceship&amp;quot; at GLSL Graphics compo, &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021&lt;br&gt;&lt;br&gt;It&amp;#39;s running on &lt;a href=&#34;https://twitter.com/hashtag/GLSLSandbox?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSLSandbox&lt;/a&gt; &lt;br&gt;Only 1Pass Shader! No post-effects used&lt;a href=&#34;https://twitter.com/hashtag/GLSLSandbox?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GLSLSandbox&lt;/a&gt; で動作します。&lt;br&gt;1パスのシェーダーのみの制約で実装しており、ポストエフェクトは未使用です。 &lt;a href=&#34;https://t.co/lJBQQjjHMR&#34;&gt;pic.twitter.com/lJBQQjjHMR&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469977106612649985?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/_F0Pxq7TKqs&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/fl3SRB&#34;&gt;Shadertoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=90438&#34;&gt;Pouet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://glslsandbox.com/e#77788.0&#34;&gt;GLSL Sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TDFのGLSL Graphics Compoにて、&lt;a href=&#34;https://tokyodemofest.jp/tdf2021-results.txt&#34;&gt;本作品が1位&lt;/a&gt;に選ばれました！&lt;/p&gt;

&lt;p&gt;この記事では『Alien Spaceship』の利用技術と制作の裏側について解説します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;glsl-graphics-compoとは&#34;&gt;GLSL Graphics Compoとは？&lt;/h1&gt;

&lt;p&gt;デモシーンの文化に馴染みのない方に向けて、簡単にGLSL Graphics Compoの概要や制約について説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://glslsandbox.com/&#34;&gt;GLSL sandbox&lt;/a&gt;はWeb上でGLSLのフラグメントシェーダーを編集・実行できるWebGLで実装されたサービスです。作品を公開したり共有もできます。&lt;/p&gt;

&lt;p&gt;GLSL Graphics CompoはGLSL Sandbox上で動作するGLSLのシェーダーによるグラフィックスを競うコンポです。
コンポはコンペティションの意味で、参加者投票によって順位が決まります。&lt;/p&gt;

&lt;h2 id=&#34;glslシェーダーだけで映像をつくる&#34;&gt;GLSLシェーダーだけで映像をつくる&lt;/h2&gt;

&lt;p&gt;そもそもGLSLシェーダー、つまり &lt;strong&gt;プログラミングのソースコードだけで映像をつくる&lt;/strong&gt; 行程を一般的には想像しづらいかもしれません。&lt;/p&gt;

&lt;p&gt;まずは次の図を見ていただけると、具体的にイメージを掴めるかもしれません。
GLSLのコードからコメントや改行・空白文字を取り除き、処理の内容で色分けしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/minify-text.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/minify-text.png&#34; alt=&#34;GLSLのコードの処理&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この7756文字のGLSLのシェーダーに映像のすべてが実装されています。&lt;/p&gt;

&lt;p&gt;見てのとおり &lt;strong&gt;シーンのモデリング、ライティング、カメラワーク、演出のシーケンスがすべて含まれています。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;変数名や関数名を1文字に短縮したり、デバッグ用のコードの削除はしていないので、まだまだ文字数を削る余地はあります。
今回は文字数をそこまで意識してコーディングせずに、可読性を重視しました。&lt;/p&gt;

&lt;p&gt;GLSL sandboxでは音楽を再生できないので、YouTubeの音楽は後付けです。Shadertoy標準楽曲「Most Geometric Person」を使わせていただきました。&lt;/p&gt;

&lt;h2 id=&#34;レイマーチング&#34;&gt;レイマーチング&lt;/h2&gt;

&lt;p&gt;GLSL sandbox用のGLSLのフラグメントシェーダーで記述できるのは、フルスクリーンのMeshを描画する2D処理のみです。&lt;/p&gt;

&lt;p&gt;入力は描画対象のピクセルの座標、出力はピクセルの画素値の単純な2D処理です。
また、時間やマウス座標を入力にすることで、アニメーションもできます。&lt;/p&gt;

&lt;p&gt;3Dを描画するためには、GLSLコードの中に3Dのカメラや3Dのシーンの形状を定義する必要があります。&lt;/p&gt;

&lt;p&gt;2DのGLSLのシェーダーで3D空間を描画するためのテクニックとして、レイマーチングがよく使われます。&lt;/p&gt;

&lt;p&gt;レイマーチングは、距離関数の長さだけひたすらレイを進める処理をくり返し、距離関数が0になったら衝突したと判定する単純なアルゴリズムです。
つまり、レイトレーシングの交差判定のアルゴリズムのひとつです。
レイマーチングは、描画する形状を距離関数という数式によってプロシージャルに定義できるため、3Dのモデリングなしに3Dシーンを描画できます。&lt;/p&gt;

&lt;p&gt;レイマーチングの詳細については、過去に勉強会のスライドや書籍で紹介しています。&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/rS2j757JUrqeWL&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/shohosoda9/threejs-58238484&#34; title=&#34;シェーダだけで世界を創る！three.jsによるレイマーチング&#34; target=&#34;_blank&#34;&gt;シェーダだけで世界を創る！three.jsによるレイマーチング&lt;/a&gt; &lt;/strong&gt; de &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/shohosoda9&#34; target=&#34;_blank&#34;&gt;Sho Hosoda&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=gam00220c-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B097GBR2N3&amp;linkId=ad2164f51c3a4574701f9097c0eb7fde&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;alien-spaceshipの技術解説&#34;&gt;Alien Spaceshipの技術解説&lt;/h1&gt;

&lt;p&gt;前置きが長くなりましたが、ここからレイマーチング経験者に向けた技術解説をします。&lt;/p&gt;

&lt;p&gt;技術的なポイントとしては次の3点だと考えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;宇宙船の船内のような具体的な対象を目指したモデリング&lt;/li&gt;
&lt;li&gt;リアルタイムなグローバルイルミネーションのあるライティング&lt;/li&gt;
&lt;li&gt;長尺のタイムラインのシーケンス&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;モデリング&#34;&gt;モデリング&lt;/h2&gt;

&lt;p&gt;全編を通してプリミティブとしてはBoxとSphere（卵）の2種類しか使っていません。&lt;/p&gt;

&lt;h3 id=&#34;前半のhallwayシーン&#34;&gt;前半のHallwayシーン&lt;/h3&gt;

&lt;p&gt;壁の光る部分はBoxをSkewしたり、床はBoxにDisplacement Mapでディテールを加えています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1164.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1164.jpg&#34; alt=&#34;party1164.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;壁のskew&#34;&gt;壁のSkew&lt;/h4&gt;

&lt;p&gt;壁の &lt;strong&gt;く&lt;/strong&gt; の字の折り曲がった形状には、BoxをSkewで変形させています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;p.x -= W - 0.5 * abs(p.y);// Skewで変形
opUnion(m, sdBox(p, vec3(a * 1.7, H, 0.24)), SOL, roughness, 0.0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;床のdisplacement-map&#34;&gt;床のDisplacement Map&lt;/h4&gt;

&lt;p&gt;床のDisplacement Mapは次のような数式で実装しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// hをsdBoxの第2引数のサイズに加算すると、Displacement Mapになる
float h = 0.1 * floor(2. * sin(p.x)) + 0.2 * floor(sin(2. * p.z));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sinから滑らかなカーブを得て、それをfloorで階段状に離散化しているだけです。&lt;/p&gt;

&lt;p&gt;pは事前にabs(p.x)により左右ミラーしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/floor_graph.png&#34; alt=&#34;床の断面&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;扉の台形波&#34;&gt;扉の台形波&lt;/h4&gt;

&lt;p&gt;扉の台形のギザギザの関数は&lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;kaneta先生&lt;/a&gt;のコードをお借りしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/3dd3WB&#34;&gt;Energy Lab by kaneta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;float smoothPulse(float start, float end, float period, float smoothness, float t) {
    float h = abs(end - start) * 0.5;
    t = mod(t, period);
    return smoothstep(start, start + h * smoothness, t) - smoothstep(end - h * smoothness, end, t);
}

float y(float x) {
    return smoothPulse(0.0, 0.6, 1.0, 0.5, x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/smoothPulse.png&#34; alt=&#34;扉の台形波&#34; /&gt;&lt;/p&gt;

&lt;p&gt;床のEmissiveや扉を開けたときのEmissiveの模様のパターンもsmoothPulse関数を用いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party2085.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party2085.jpg&#34; alt=&#34;party2085.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/smoothPulsePattern.png&#34; alt=&#34;smoothPulsePattern.png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Floor Emissive Pattern
float py = smoothPulse(0.0, 0.6, 1.0, 0.5, 0.25 * p.y);
float emi = smoothPulse(0.2, 0.25, 1.0, 0.5, py + p.x / 2.0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shadertoyに簡単なサンプルを用意しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/7ttXWf&#34;&gt;smoothPulse Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hallwayシーンまとめ&#34;&gt;Hallwayシーンまとめ&lt;/h4&gt;

&lt;p&gt;天井についても、係数を調整しながら箱を並べることで、狙った形状をモデリングしていきました。
特殊なことは何もしていませんが、sdBoxの評価回数が増えると負荷が高くなるので、なるべくsdBoxの数を減らすように意識しました。
レイマーチングでは、座標をmodで繰り返すと特定の軸に対して無限にオブジェクトを配置できます（opRep）。
前述の左右のミラー化もsdBoxの評価回数を減らすための工夫のひとつです。&lt;/p&gt;

&lt;p&gt;ほぼopRepとSkewとDisplacement Mapのテクニックの繰り返しで地道にモデリングしているだけです。&lt;/p&gt;

&lt;p&gt;ライティングの問題とモデリングの問題を切り分けるためにシンプルなレイマーチングの描画モードも用意しました。&lt;/p&gt;

&lt;p&gt;よく見ると強引にSkewとDisplacement Mapをしたために、よく見るとアーティファクトが発生しています。
最終的なライティングでは暗い箇所となってほとんど目立たなかったので、今回はそのままにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/debug-scene.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/debug-scene.png&#34; alt=&#34;debug-scene.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;後半のalienの巣のシーン&#34;&gt;後半のAlienの巣のシーン&lt;/h3&gt;

&lt;p&gt;IFS（Iterated Function Systems）をつかっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party6370.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party6370.jpg&#34; alt=&#34;party6370.jpg&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party7186.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party7186.jpg&#34; alt=&#34;party7186.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IFSでは狙った形をモデリングすることは困難なので、パラメーターを延々と調整しながら、理想的な見た目になるまで試行錯誤を繰り返しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// IFSのパラメーター
vec4 ifs = vec4(875, 482, 197, 545) / vec2(1200, 675).xyxy;

// IFSでモデリング
p = pos;
p -= vec3(0, H, 16. * 3.5);

for (int i = 0; i &amp;lt; 5; i++) {
    p = abs(p) - ifs.w;
    rot(p.xz, -4. * ifs.x);
    p = abs(p) - ifs.z;
    rot(p.xy, -4. * ifs.y);
}

opUnion(m, sdEgg(p, 0.1), SOL, 0.0, 0.0);
opUnion(m, sdBox(p, vec2(1, 0.01).xyy), SOL, roughness, 0.0);
opUnion(m, sdBox(p - vec2(0.001, 0).yxy, vec2(1, 0.01).xyy), VOL, 2.4 * saturate(cos(beatTau / 2. + 10. * p.x)), 2.4);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ライティング-グローバルイルミネーション&#34;&gt;ライティング（グローバルイルミネーション）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1895.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/party1895.jpg&#34; alt=&#34;party1895.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全編を通してグローバルイルミネーション（GI）や、少しラフな反射（roughness = 0.05くらい）をしています。&lt;/p&gt;

&lt;p&gt;グラフィックスエンジニアなら性癖に刺さるポイントだと思います。&lt;/p&gt;

&lt;p&gt;GIをリアルタイムに計算するのは技術的にはとても難しい課題です。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://twitter.com/Virgill74&#34;&gt;Virgillさん&lt;/a&gt;が開発したMadtracingを用いてGIを計算しました。&lt;/p&gt;

&lt;p&gt;Madtracingは&lt;a href=&#34;https://www.pouet.net/prod.php?which=77102&#34;&gt;End of time by Alcatraz &amp;amp; Altair&lt;/a&gt;というデモで使われた手法です。&lt;/p&gt;

&lt;p&gt;Madtracing解説用のシェーダーがShadertoyに公開されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/Xt3cWS&#34;&gt;EOT - Grid scene by Virgill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パストレーシングと同じように表面のroughnessに応じてセカンダリレイを飛ばしてGIを計算します。&lt;/p&gt;

&lt;p&gt;通常のパストレーシングでは物体の表面にヒットしてからセカンダリレイを複数回飛ばすと思いますが、
Madtracingではレイマーチングのステップ中にセカンダリレイを近傍のオブジェクトのroughnessに応じて飛ばします。&lt;/p&gt;

&lt;p&gt;これによってボリューム感やBloom感のあるライティングを実現できます。その代償として、少々負荷が高い印象です。&lt;/p&gt;

&lt;p&gt;今回のデモでは、Madtracingを自分の使いやすい形に少しだけフォークして利用しました。&lt;/p&gt;

&lt;p&gt;まず、マテリアルのフォーマット（map関数の返り値）を以下のように定義しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec4 m = vec4(1, VOL, 0, 0);
// x: Distance
// y: MaterialType (VOL or SOL)
// z: Roughness in (0-1), Emissive when z&amp;gt;1
// w: ColorPalette
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MadtracingからAA処理を削除して、AA処理はプライマリレイの生成に移動しました。これで少し負荷削減とシンプル化ができました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Ref. EOT - Grid scene by Virgill
// https://www.shadertoy.com/view/Xt3cWS
void madtracer(vec3 ro1, vec3 rd1, float seed) {
    scol = vec3(0);
    float t = 0., t2 = 0.;
    vec4 m1, m2;
    vec3 rd2, ro2, nor2;
    for (int i = 0; i &amp;lt; 160; i++) {
        m1 = map(ro1 + rd1 * t);
        // t += m1.y == VOL ? 0.25 * abs(m1.x) + 0.0008 : 0.25 * m1.x;
        t += 0.25 * mix(abs(m1.x) + 0.0032, m1.x, m1.y);
        ro2 = ro1 + rd1 * t;
        nor2 = normal(ro2);
        rd2 = mix(reflect(rd1, nor2), hashHs(nor2, vec3(seed, i, iTime)), saturate(m1.z));
        m2 = map(ro2 + rd2 * t2);
        // t2 += m2.y == VOL ? 0.25 * abs(m2.x) : 0.25 * m2.x;
        t2 += 0.25 * mix(abs(m2.x), m2.x, m2.y);
        scol += .007 * (pal(m2) * step(1., m2.z) + pal(m1) * step(1., m1.z));

        // force disable unroll for WebGL 1.0
        if (t &amp;lt; -1.) break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;絶対に実行されないbreak-によるコンパイル時間削減&#34;&gt;「絶対に実行されないbreak」によるコンパイル時間削減&lt;/h3&gt;

&lt;p&gt;madtracer関数に、謎の &lt;code&gt;if (t &amp;lt; -1.) break;&lt;/code&gt; があることに気がついたでしょうか？&lt;/p&gt;

&lt;p&gt;tはレイの進んだ距離で、絶対にマイナス値にはなりません。つまり絶対に実行されないbreak処理です。
普通に考えれば不要な処理ですが、これはGLSLコンパイル時間削減のハックです。&lt;/p&gt;

&lt;p&gt;breakを追加することで、GLSLコンパイラによってforがunrollされずにloopとして処理されて、コンパイル時間を大きく削減できます。&lt;/p&gt;

&lt;p&gt;ChromeデフォルトのWebGLのANGLE有効時にはかなり効果的で、自分の環境ではコンパイル時間を32.9秒から1.7秒に削減できました。&lt;/p&gt;

&lt;p&gt;コンポ提出当日はずっとコンパイル時間の削減に工数を費やしていて、提出2.5時間前くらいに気がついたので、もっと早く気がついていればという気持ちです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; が終わったので、&lt;br&gt;コンパイル時間を32.9秒から1.7秒に削減する&lt;br&gt;「絶対に実行されないbreak」の実例を貼っておきます。&lt;br&gt;&lt;br&gt;breakを追加することで、GLSLコンパイラによってforがunrollされずにloopに処理されて、コンパイル時間を大きく削減できます。&lt;a href=&#34;https://t.co/SC7A9WAkll&#34;&gt;https://t.co/SC7A9WAkll&lt;/a&gt; &lt;a href=&#34;https://t.co/XRakPPq0TU&#34;&gt;pic.twitter.com/XRakPPq0TU&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1470408956866883584?ref_src=twsrc%5Etfw&#34;&gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;同様のテクニックとして、&lt;code&gt;N + min(0, iFrame)&lt;/code&gt; をループ回数にする手法があります。&lt;a href=&#34;https://twitter.com/AruGL&#34;&gt;Danilさん&lt;/a&gt;に教えていただきました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;maybe you know usual trick with loop N+min(0,iFrame) it also can speedup compiling&lt;a href=&#34;https://t.co/XPfP9CZms0&#34;&gt;https://t.co/XPfP9CZms0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Danil (@AruGL) &lt;a href=&#34;https://twitter.com/AruGL/status/1466751715038879755?ref_src=twsrc%5Etfw&#34;&gt;December 3, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;コードにすると、こういう感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;for(int i = 0; i &amp;lt; 160 + min(0, iFrame); i++) {
    // ループ中の処理
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ShadertoyなどのWebGL2.0環境であれば、この方法で同じコンパイル時間削減の効果を得られます。&lt;/p&gt;

&lt;p&gt;WebGL1.0の場合はダイナミックループをサポートしていないので、WebGL1.0で動くGLSLSandboxでは &lt;code&gt;N + min(0, iFrame)&lt;/code&gt; のハックは使えません。&lt;/p&gt;

&lt;p&gt;GLSLSandbox用なら、&lt;code&gt;絶対に実行されないbreak&lt;/code&gt; のハックを使うと良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;タイムラインのシーケンス&#34;&gt;タイムラインのシーケンス&lt;/h2&gt;

&lt;p&gt;タイムラインのシーケンス管理のために次の簡単なマクロを実装しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Timeline
float prevEndTime = 0., t = 0.;
#define TL(beat, end) if (t = beat - prevEndTime, beat &amp;lt; (prevEndTime = end))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方は簡単で、TLの引数に現在時刻と境界値（区間の終了タイミング）を指定します。
単位は区別していないので、時間単位でもビート単にでも統一されていてばOKです。&lt;/p&gt;

&lt;p&gt;グローバル変数tに現在区間の相対的な時間が自動的に設定されるため、処理をスッキリと書けます。&lt;/p&gt;

&lt;p&gt;ifの条件の中にカンマを複数の式を書けるのは今回はじめて知りました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// カメラワーク制御の実装例

// 0～ 4*8ビート目までの処理
TL(beat, 4. * 8.) setCamera(vec4(600, 250. + t * 3., 600, 243. - t * 6.), 3.);

// 4*8～4*10ビート目までの処理
else TL(beat, 4. * 10.) setCamera(vec4(600, 307, 600, 44. + t * 4.), 3.);

// 4*10～4*12ビート目までの処理
else TL(beat, 4. * 12.) setCamera(vec4(494, 322, 695, 216), 2.4 + 0.2 * t);

// 4*12～4*14ビート目までの処理
else TL(beat, 4. * 14.) setCamera(vec4(600, 481. + 10. * t, 600, 59), 3.);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はカットごとにカメラを完全に切り替えていたので、このような仕組みでうまくカメラワークを実装できました。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;kanetaさんのsmoothPulse関数や、VirgillさんのMadtracing以外にも、数え切れないほどたくさんの解説記事とシェーダーを参考にしたり、たくさんの作品に影響を受けました。
たくさんの方々に感謝します。ありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;ここからは技術的なこと以外のポエムをつらつらと書きます。&lt;/p&gt;

&lt;h2 id=&#34;glsl-graphics-compo初優勝&#34;&gt;GLSL Graphics Compo初優勝！&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/12/12/tdf2018/&#34;&gt;2018年のPC Demo Compo&lt;/a&gt;に引き続き、Tokyo Demo Festでのコンポ優勝は2回目です。&lt;/p&gt;

&lt;p&gt;これまでGLSL Graphics Compoはずっと3位で、なかなか優勝できなかったので、ようやく心残りを解消できました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;I won the GLSL Graphics compo at &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021!&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2021 の GLSL Graphics compo で優勝しました！めちゃくちゃ嬉しいです！&lt;br&gt;&lt;br&gt;&amp;quot;Alien Spaceship&amp;quot; by &lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/KQaQo1NI0R&#34;&gt;pic.twitter.com/KQaQo1NI0R&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1469994430950445057?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;GLSL Graphics compo 1位のトロフィーを受け取りました🏆&lt;br&gt;&lt;br&gt;今年のトロフィーは例年よりもずっと重厚感があります。&lt;br&gt;&lt;br&gt;副賞の光るキーボードもありがとうございました。&lt;br&gt;家にある光るキーボードは3台目ですが、大切にします🙏&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/vC3ce68i7S&#34;&gt;pic.twitter.com/vC3ce68i7S&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1472229449433481220?ref_src=twsrc%5Etfw&#34;&gt;December 18, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;トロフィーの素材や厚みが例年よりも高級感があって、個人的にもなんだか嬉しい気持ちです（笑）。&lt;/p&gt;

&lt;p&gt;GUNCY&amp;rsquo;Sさんによる副賞のRazer BlackWidow V3 Green Switchもありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;気軽にtdfにエントリーしてほしい&#34;&gt;気軽にTDFにエントリーしてほしい&lt;/h2&gt;

&lt;p&gt;GLSL Graphics CompoはTDF独自のコンポで、海外のパーティでは見たことのない形式ですが、個人的にはとても好きです。&lt;/p&gt;

&lt;p&gt;2016年のTDFに初参加したとき、一晩でGLSLSandboxのシェーダーを書いて、GLSL Graphics Compoにエントリーした記憶は今でも鮮明に覚えています。
自分のシェーダーが巨大なスクリーンに映し出されたとき、オーディエンスの歓声が聞こえて本当に嬉しかったです。
この体験がなければデモシーンやシェーダーを続けていないような気がします。勇気を出してエントリーして良かったと本当に思います。&lt;/p&gt;

&lt;p&gt;デモを1本完成させるのは本当に大変ですが、GLSL Graphics Compoなら気軽に参加できることがメリットだと思います。&lt;/p&gt;

&lt;p&gt;気軽に参加できる数少ないコンポですが、近年のGLSL Graphics Compoのレベルはインフレを続けて、上位勢はかなりガチな作品を出してくるなという印象があります。&lt;/p&gt;

&lt;p&gt;本来のGLSL Graphics Compoは数秒から10秒程度の短いグラフィックス作品の部門だと自分は認識しています。
&lt;a href=&#34;https://nanka.hateblo.jp/entry/2018/12/13/080322&#34;&gt;Traveler 2&lt;/a&gt;やAlien Spaceshipのような長尺のデモっぽい作品がGLSL Graphics Compoに増えることで、もし他の参加者が萎縮してしまったらとても不本意な気持ちです。&lt;/p&gt;

&lt;p&gt;GLSL Graphics Compoは順位や周りを気にせず、1晩クオリティの雑なシェーダーでも構わず気軽にエントリーできる雰囲気にして、新規参入者が増える未来を望んでいます。&lt;/p&gt;

&lt;h2 id=&#34;オンラインパーティの体験&#34;&gt;オンラインパーティの体験&lt;/h2&gt;

&lt;p&gt;今回のTDF初のオンライン開催でした。&lt;/p&gt;

&lt;p&gt;TDFのオーガナイザーの方々の努力のおかげで、実際のデモパーティにかなり近い体験を再現できていたのではないかと思います。&lt;/p&gt;

&lt;p&gt;Day2のYouTubeの視聴回数が3000回を超えているので、例年のオフラインパーティよりもたくさんの人に見てもらえたなど、オンラインのメリットも感じました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/2s9KfMn1J9M&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/bp37xTVNRrM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;ですが、やはり正直に言うと「オンラインだと物足りないなぁ…」というのが正直な感想でした。
とくにオーディエンスの反応や会場の熱気を直接感じられないのはとても寂しかったです。またオフラインでデモパーティできる日が本当に待ち遠しいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;またオフラインでデモパーティできる日が待ち遠しい… &lt;a href=&#34;https://t.co/WsyEHySE28&#34;&gt;https://t.co/WsyEHySE28&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1470764587834568715?ref_src=twsrc%5Etfw&#34;&gt;December 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;shader-showdown&#34;&gt;Shader Showdown&lt;/h2&gt;

&lt;p&gt;TDF初の試みであるShader Showdownは本当に激熱でした。&lt;/p&gt;

&lt;p&gt;とくに決勝戦の &lt;a href=&#34;https://twitter.com/phi16_&#34;&gt;phi16&lt;/a&gt; vs. &lt;a href=&#34;https://twitter.com/kamoshika_vrc&#34;&gt;Kamoshika&lt;/a&gt; の戦いは一生忘れないくらい印象に残りました。&lt;/p&gt;

&lt;p&gt;Shader Showdownについては、別の記事に書きました（12/31）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2021/12/31/tdf2021-shader-showdown/&#34;&gt;Tokyo Demo Fest 2021のShader Showdownに参加しました | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;TokyoDemoFestのShader Showdownは、世界的なDemoparty「Revision」と同じレギュレーションで開催します。&lt;br&gt;試合の放映はパーティー当日12/11-12となります。乞うご期待……！ &lt;a href=&#34;https://t.co/IlVue5npWz&#34;&gt;pic.twitter.com/IlVue5npWz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tokyo Demo Fest 2021 (2021/12/11-12) (@TokyoDemoFest) &lt;a href=&#34;https://twitter.com/TokyoDemoFest/status/1452275618997886976?ref_src=twsrc%5Etfw&#34;&gt;October 24, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;おわりに-1&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;さいごに、関係者のみなさんに感謝を申し上げます。
TDFのオーガナイザーの方々、エントリーしてくださったみなさん、YouTubeで視聴してくださったみなさん、応援してくださった方々、ありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;本編では言及しなかったけれども一応書いておきたいことを箇条書きでつらつら書きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今年のTDFでは、KLabはゴールドスポンサーとして協賛

&lt;ul&gt;
&lt;li&gt;協賛できて良かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜGLSL Graphics Compoに出したの？

&lt;ul&gt;
&lt;li&gt;音楽を作る能力と余裕があれば、IntroとしてPC Demo Compoに出したかったが、間に合わなかった&lt;/li&gt;
&lt;li&gt;sadakkeyさん多忙&lt;/li&gt;
&lt;li&gt;来年は音楽も勉強したい（毎年言っている気もする）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;計画的にデモを作りたい

&lt;ul&gt;
&lt;li&gt;TDF直後には、他の人や作品に感化されて、溢れるモチベーションとやる気があるはずなのに&lt;/li&gt;
&lt;li&gt;結局毎年締切ギリギリまで着手できない&lt;/li&gt;
&lt;li&gt;だんだん徹夜もつらくなってきた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;着想点

&lt;ul&gt;
&lt;li&gt;グローバルイルミネーションをやりたかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.magnum.graphics/guest-posts/area-lights-with-ltcs/&#34;&gt;Area Lights with LTCs&lt;/a&gt;も調査はした

&lt;ul&gt;
&lt;li&gt;BRDFなどに依存したルックアップテーブルが必要で、1Pass実装にフォールバックが不可能っぽいので諦めた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;作業日記&#34;&gt;作業日記&lt;/h1&gt;

&lt;p&gt;ネタ供養🙏です。&lt;/p&gt;

&lt;h2 id=&#34;2021-11-07&#34;&gt;2021-11-07&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-07-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-07-v1-1.png&#34; alt=&#34;2021-11-07-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-16&#34;&gt;2021-11-16&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-1.png&#34; alt=&#34;2021-11-16-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-2.png&#34; alt=&#34;2021-11-16-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-16-v1-3.png&#34; alt=&#34;2021-11-16-v1-3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この頃はIFSを弄っていた。&lt;/p&gt;

&lt;h2 id=&#34;2021-11-17&#34;&gt;2021-11-17&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-1.png&#34; alt=&#34;2021-11-17-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-17-v1-2.png&#34; alt=&#34;2021-11-17-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-18&#34;&gt;2021-11-18&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v1-1.png&#34; alt=&#34;2021-11-18-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-18-v2-1.png&#34; alt=&#34;2021-11-18-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-19&#34;&gt;2021-11-19&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-1.png&#34; alt=&#34;2021-11-19-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ボロノイでザラザラとした床にする案&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-2.png&#34; alt=&#34;2021-11-19-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-3.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-3.png&#34; alt=&#34;2021-11-19-v1-3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-4.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-19-v1-4.png&#34; alt=&#34;2021-11-19-v1-4.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-20&#34;&gt;2021-11-20&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-20-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-20-v1-1.png&#34; alt=&#34;2021-11-20-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-21&#34;&gt;2021-11-21&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-1.png&#34; alt=&#34;2021-11-21-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-2.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v1-2.png&#34; alt=&#34;2021-11-21-v1-2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-21-v2-1.png&#34; alt=&#34;2021-11-21-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-11-22&#34;&gt;2021-11-22&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v1-1.png&#34; alt=&#34;2021-11-22-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-11-22-v2-1.png&#34; alt=&#34;2021-11-22-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-12-02&#34;&gt;2021-12-02&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v1-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v1-1.png&#34; alt=&#34;2021-12-02-v1-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v2-1.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-12-20-tdf2021-glsl-compo/2021-12-02-v2-1.png&#34; alt=&#34;2021-12-02-v2-1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2021-12-03&#34;&gt;2021-12-03&lt;/h2&gt;

&lt;p&gt;締切当日はコンパイル時間の削減をがんばっていた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>メガデモ勉強会2021で発表しました</title>
      <link>https://gam0022.net/blog/2021/02/15/demoscene-study-session/</link>
      <pubDate>Mon, 15 Feb 2021 13:26:18 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/02/15/demoscene-study-session/</guid>
      <description>&lt;p&gt;昨日の2/14（バレンタインデー）に開催された&lt;a href=&#34;https://connpass.com/event/200294/&#34;&gt;The Tokyo Demo Fest team presents: メガデモ勉強会2021&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;私は「64KBのWebGLデモを実装する技術とデモ制作から得た『学びと発見』」というタイトルで発表を行いました。&lt;/p&gt;

&lt;p&gt;発表スライドはこちらです。&lt;/p&gt;

&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vRd-L7WcWWzcoE9zNpBsJdeMjJf9HelDg1Pto8cFGJTjinejpjZ1mGmzWCZPANJZ0QOCObuVOIdPuy-/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%A1%E3%82%AC%E3%83%87%E3%83%A2%E5%8B%89%E5%BC%B7%E4%BC%9A?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#メガデモ勉強会&lt;/a&gt; の発表資料です！&lt;br&gt;&lt;br&gt;Revision2020のPC 64K Introで優勝したデモ作品『RE: SIMULATED』を題材にして、効率的なデモ制作に必要なエディタ機能やWebGLのプロジェクトの構成、制作中に直面した問題と解決について解説しました。&lt;br&gt;&lt;br&gt;レイマーチングはいいぞ！&lt;a href=&#34;https://t.co/QWHOXHmZqu&#34;&gt;https://t.co/QWHOXHmZqu&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1360889255669633024?ref_src=twsrc%5Etfw&#34;&gt;February 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Revision2020のPC 64K Introで優勝したデモ作品『RE: SIMULATED』を題材にして、効率的なデモ制作に必要なエディタ機能やWebGLのプロジェクトの構成、制作中に直面した問題と解決方法について解説しました。&lt;/p&gt;

&lt;p&gt;発表の締めとして「CGを学ぶことで世界の解像度を上げるのが楽しい」「レイマーチングはCG入門に最適」という持論について語りました。&lt;/p&gt;

&lt;h1 id=&#34;質疑応答と補足&#34;&gt;質疑応答と補足&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;質問1: シェーダーを分割することで容量がどのくらい増えるか？

&lt;ul&gt;
&lt;li&gt;マルチパスを前提のエンジン設計にしたので、シェーダー分割してもTypeScriptのコード量は増えない&lt;/li&gt;
&lt;li&gt;重複コードはzlib（pnginator.rb）で圧縮されるため、シェーダーの圧縮後のコードもほとんど増えない&lt;/li&gt;
&lt;li&gt;前半と後半で2分割したときは45byteだけ増えた（&lt;a href=&#34;https://github.com/gam0022/resimulated/pull/112&#34;&gt;PR&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;質問2: シェーダーの数と行数について

&lt;ul&gt;
&lt;li&gt;サウンドシェーダーは1ファイル。グラフィックス用のシェーダーは合計10ファイル&lt;/li&gt;
&lt;li&gt;サウンドシェーダーは行数が1800行ほどだが、zlibで効率よく圧縮できるので、最終的なファイル容量にはあまり影響しなかった&lt;/li&gt;
&lt;li&gt;グラフィックス用のシェーダーは最大（宇宙空間のレイマーチング）で700行、最小（Bloomのポストエフェクト）で10行ほど&lt;/li&gt;
&lt;li&gt;用途によって幅があるが、レイマーチング用のシェーダーだと平均して400行くらい&lt;/li&gt;
&lt;li&gt;Shadertoyと同じようにCommonのシェーダーの仕組みも用意したが、重複したシェーダーはzlibで圧縮されるため、容量削減の効果は低かった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;質問3: ディレクションについて

&lt;ul&gt;
&lt;li&gt;制作前に打ち合わせをしてBPMは決めていた

&lt;ul&gt;
&lt;li&gt;音楽と絵の同期はBPMで行っているので重要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方向性は絵が先行&lt;/li&gt;
&lt;li&gt;尺については音楽が先行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;補足1: Bloomのポストエフェクトはエンジンのビルトイン機能にした

&lt;ul&gt;
&lt;li&gt;縮小バッファーを利用するマルチパスのBloomにしたので、ビルトインにしたほうがサイズを小さく効率よく実装できそうだったから&lt;/li&gt;
&lt;li&gt;フォント描画用のテクスチャ生成機能などShadertoyにはない仕様も何個か実装した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;補足2: OpenGLよりWebGLの方がGLSLのコンパイル時間が長い

&lt;ul&gt;
&lt;li&gt;WebGLのデモではなく、OpenGLのexeによるデモにすれば、GLSLのコンパイル時間を短縮できる&lt;/li&gt;
&lt;li&gt;Windows版のChromeおよびFirefoxでは、ANGLEを経由してDirect3D上でWebGLを実現しているため、ANGLEを経由する分だけGLSLコンパイルに時間のかかるケースが多い（&lt;a href=&#34;https://twitter.com/gaziya5/status/1361134297315348482&#34;&gt;Twitter&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome.exe --use-angle=gl&lt;/code&gt; というオプション付きでChromeを起動すると、ANGLEを経由せずにWebGLを利用できる（&lt;a href=&#34;https://twitter.com/gaziya5/status/1350418640093413377&#34;&gt;Twitter&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;かなり久しぶりに日本のデモシーンの人たちとワイワイできて楽しかったです！&lt;/p&gt;

&lt;p&gt;最後のTokyoDemoFestは2018年の12月なので、もう2年以上も前なんですよね。時間が経つのは早いです。&lt;/p&gt;

&lt;p&gt;discord上の懇親会では「どうすればライブコーディングを普及できるのか？一般人でも理解できるような実況が必要という仮説」「物理的な会場のクラブの体験とVRの違い」など興味深いお話を聞けて面白かったです。&lt;/p&gt;

&lt;p&gt;素晴らしいイベントを企画・開催してくださったTDFのオーガナイザーのみなさん、本当にありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;関連記事&#34;&gt;関連記事&lt;/h1&gt;

&lt;p&gt;過去の関連登壇や記事のリンクです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2020/04/30/revision2020/&#34;&gt;Revision2020 PC 64K Intro 優勝作品『RE: SIMULATED』の技術解説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2018/03/16/demoscene-study-session/&#34;&gt;メガデモ勉強会!2018で発表しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2016/02/16/glsl-tech/&#34;&gt;GLSL シェーダテクニック勉強会 #GLSLTechで登壇しました&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;この勉強会も5年前のバレンタインデーだったので何かの運命を感じました&lt;/li&gt;
&lt;li&gt;私がレイマーチングを始めてから5年以上も経過しているのもちょっと驚きでした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>第2回 KLab Expert Camp「テーマ：シェーダー」のメンターをしました</title>
      <link>https://gam0022.net/blog/2020/09/17/kec2/</link>
      <pubDate>Thu, 17 Sep 2020 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/09/17/kec2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-09-14-kec2/name-card-original.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-09-14-kec2/name-card.jpg&#34; alt=&#34;ネームカード&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9/8～9/12に開催されたKLab Expert Camp（KEC）の第2回にメンターとして参加しました。&lt;/p&gt;

&lt;p&gt;今回のKLab Expert Campは「シェーダー」がテーマでした。&lt;/p&gt;

&lt;p&gt;5日間（平日4日間＋土曜日に成果発表＆懇親会）の日程でひたすらシェーダーを書き続けるという、エクストリームかつ珍しい内容の技術系インターンです。&lt;/p&gt;

&lt;p&gt;当日の様子はハッシュタグ &lt;a href=&#34;https://twitter.com/search?q=%23KLabExpertCamp%20since%3A2020-01-01_00%3A00%3A00_JST%20until%3A2020-12-31_00%3A00%3A00_JST&amp;amp;src=typed_query&#34;&gt;#KLabExpertCamp&lt;/a&gt; から確認できます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;開催の経緯&#34;&gt;開催の経緯&lt;/h1&gt;

&lt;p&gt;メンターとして、私（&lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt;）とかねたさん（&lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;@kanetaaaaa&lt;/a&gt;）、運営スタッフとして人事のKの27乗さん（&lt;a href=&#34;https://twitter.com/oktillion27&#34;&gt;@oktillion27&lt;/a&gt;）の3名で今回のイベントを企画・運営しました。&lt;/p&gt;

&lt;p&gt;私はデモパーティ（デモを鑑賞したり完成度を競ったりして楽しむイベント）が好きなので、デモパーティを意識して企画を考えました。&lt;/p&gt;

&lt;p&gt;大画面で自分たちの作品を上映して、参加者でワイワイするのがすごく楽しいので、そのような雰囲気をデモパーティに参加したことのない学生にも感じて欲しいという思いがありました。&lt;/p&gt;

&lt;p&gt;そして、優秀な若人にもデモシーンに参入してもらい、国内のデモシーンをもっと盛り上げたいと思っていました。&lt;/p&gt;

&lt;p&gt;当初は3月にオフラインで開催する予定だったのですが、昨今の感染症に関する状況を鑑み、オンラインでの開催となりました。&lt;/p&gt;

&lt;p&gt;オンライン開催だったので、大画面で上映はできませんでしたが、デモパーティの楽しさを少しでも参加者に感じ取ってもらえたのならば、とても嬉しいです。&lt;/p&gt;

&lt;p&gt;昨今の感染症の影響もあって、残念ながら国内のデモパーティは開催の見通しが立たない状況になってしまったので、参加者にとって代替イベントのひとつになっていれば幸いです。&lt;/p&gt;

&lt;p&gt;開催の経緯については、かねたさんの参加レポートを合わせて読むことで、内容を補完できると思います。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; でメンターをした感想などを書きました。&lt;br&gt;参加者の皆様ありがとうございました。そしてお疲れ様でした。&lt;a href=&#34;https://t.co/0pOSbv5xJN&#34;&gt;https://t.co/0pOSbv5xJN&lt;/a&gt;&lt;/p&gt;&amp;mdash; かねた (@kanetaaaaa) &lt;a href=&#34;https://twitter.com/kanetaaaaa/status/1306044957556273154?ref_src=twsrc%5Etfw&#34;&gt;September 16, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;インターンの内容について&#34;&gt;インターンの内容について&lt;/h1&gt;

&lt;p&gt;オンライン開催ということで、Google MeetとSlackを利用しました。&lt;/p&gt;

&lt;p&gt;メンター2人で約1時間の講義を合計4つ行い、講義のない残りの時間はひたすら参加者の制作時間としました。&lt;/p&gt;

&lt;p&gt;参加した学生は13名でした。全国からシェーダーに強い優秀な学生が集まりました。&lt;/p&gt;

&lt;p&gt;少なくともメンターの1人は常時Google Meetに待機して、Slackでも随時質問を受け付ける体制にしました。&lt;/p&gt;

&lt;p&gt;そして、最終日には成果発表＆懇親会を行いました。&lt;/p&gt;

&lt;p&gt;オンライン開催となってしまった分、少しでも参加者に楽しんでいただけるような工夫として、5日分のノベルティやお菓子を郵送しました（Kの27乗さんのアイデアで、郵送などの準備も全部してもらった）。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;4日目の箱の中には、こんなものをご用意しました！&lt;br&gt;&lt;br&gt;（お菓子とノベルティグッズ（モバイルバッテリー）のセットです。開発に集中しすぎて、もしスマホの充電を忘れてしまったときにぜひ使ってくださいね！）&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;a href=&#34;https://t.co/7ssZogITE4&#34;&gt;pic.twitter.com/7ssZogITE4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kの27乗 (@oktillion27) &lt;a href=&#34;https://twitter.com/oktillion27/status/1304247375393816576?ref_src=twsrc%5Etfw&#34;&gt;September 11, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;講義&#34;&gt;講義&lt;/h1&gt;

&lt;p&gt;運営内で協議した結果、講義の資料の公開については、参加者のみにしました。&lt;/p&gt;

&lt;p&gt;この記事では、講義の内容について可能な範囲で概要を紹介します。&lt;/p&gt;

&lt;h2 id=&#34;担当講義1-シェーダー芸のプロダクション利用&#34;&gt;担当講義1「シェーダー芸のプロダクション利用」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;2日目の本日は、この後2つ目の講義を実施予定です。&lt;br&gt;&lt;br&gt;外部非公開の内容の為、このツイートで詳細をご紹介できません…！参加者のみなさんに、本日の講義もワクワクしてもらえるような内容だと嬉しい限りです！&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kの27乗 (@oktillion27) &lt;a href=&#34;https://twitter.com/oktillion27/status/1303591474601144321?ref_src=twsrc%5Etfw&#34;&gt;September 9, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;KLabはモバイルゲームを開発・運用している会社です。&lt;/p&gt;

&lt;p&gt;そこで、「シェーダーがモバイルゲームにどのように活用されているか？」について、実践的な内容を紹介しました。&lt;/p&gt;

&lt;p&gt;モバイル端末の性能はかなり幅広く、性能が低いGPUの端末もたくさん存在します。&lt;/p&gt;

&lt;p&gt;レイマーチングのようなフラグメントシェーダーを酷使する高負荷なシェーダーの利用は難しいため、一般的にはシェーダー芸を活用するイメージは沸かないかもしれません。&lt;/p&gt;

&lt;p&gt;しかし、シェーダー芸をうまく活用すれば、むしろレンダリングの負荷を削減できます！&lt;/p&gt;

&lt;p&gt;たとえば、頂点シェーダーでアニメーション計算やスキニング計算をCPU計算からGPU計算に置き換えば、アプリの負荷がCPUバウンドの場合は性能向上ができます。&lt;/p&gt;

&lt;p&gt;また、商業用のタイトルでどんなシェーダーが利用されているのかについて、具体的な事例を紹介しました。&lt;/p&gt;

&lt;h2 id=&#34;担当講義2-シェーダー芸で役立ちそうな知識の詰め合わせ&#34;&gt;担当講義2「シェーダー芸で役立ちそうな知識の詰め合わせ」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3DCGのための行列（導出方法や重要な特徴）、ノイズ、イージング関数など、個人的に「これだけは知っておきたい」という知識をピックアップして紹介しました。&lt;br&gt;おまけとして、便利なツールの紹介もしました。&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;a href=&#34;https://t.co/VOoRInqMtO&#34;&gt;https://t.co/VOoRInqMtO&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ CGWORLD 10月号に寄稿 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1304007251795914754?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;3DCGのための行列（導出方法や重要な特徴）、ノイズ、イージング関数など、個人的に「これだけは知っておきたい」という知識をピックアップして紹介しました。おまけとして、便利なツールの紹介もしました。&lt;/p&gt;

&lt;p&gt;行列は3DCGにおいては必須科目ですが、3DCGに特化した分かりやすい資料や説明が少ないと以前から感じていました。&lt;/p&gt;

&lt;p&gt;そこで、行列について「3DCGに特化」した直感的で分かりやすい説明を目指して講義を行いました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基底ベクトル&lt;/strong&gt;から&lt;strong&gt;視覚的かつ直感的&lt;/strong&gt;に、「回転行列、拡大縮小の行列、せん断」などの線形変換の行列を生成できることを示して、よくある変換行列の定義は覚える必要がないことを説明したり、
回転行列の転置が逆行列となる直交行列の性質を説明したりしました。また、線形変換やアフィン変換などの用語についても説明しました。&lt;/p&gt;

&lt;p&gt;さらに、ノイズやイージング関数で映像作品の品質を向上するテクニックを具体例を踏まえながら紹介しました。&lt;/p&gt;

&lt;p&gt;最後に、Shadertoyの再生時間をシークしたり、連番でPNG保存するChromeの拡張機能、連番画像からffmpegでmp4に変換する方法、YouTubeにアップロードするための最適なビットレート調整のパラメーターなど秘伝のタレ的な知識も公開しました。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;参加者の方々、5日間お疲れさまでした！&lt;br&gt;&lt;br&gt;レベルの高い作品だらけで驚かされました😍&lt;br&gt;この調子でデモパーティにもエントリーして欲しいです！&lt;br&gt;&lt;br&gt;メンターという立場で参加しましたが、参加者のみなさんに刺激をたくさん貰いました！&lt;br&gt;とても楽しかったです！ありがとうございました！&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ CGWORLD 10月号に寄稿 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1304769327380406272?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;まず、参加者のレベルが非常に高いことに驚かされました。&lt;/p&gt;

&lt;p&gt;インターンの選考をしている時点で、技術力の高い優秀な学生ばかり集まっていることは分かっていたので「どうしたら満足してもらえる講義になるか？」とメンターとしてはかなりプレッシャーを感じていました。
たとえば、レイマーチングの基礎などを説明をしたとしても、知っていることばかりで何も持ち帰ってもらえずに終わってしまう可能性が高いと考えました。
紆余曲折があって、最終的に上記のような講義内容になりました。
アンケート結果によると、いずれの講義も参加者の満足度がとても高かったので、講義の難易度や内容のバランス調整は概ね成功だったと思っています。
また、どの講義もとても真剣に聞いていただけて、質疑応答でも本質を突くような鋭い質問が多かったので、メンターとしてもやりやすくて大満足でした！&lt;/p&gt;

&lt;p&gt;さらに、最終日の成果発表では、メンターたちの予想を遥かに上回るレベルの高い作品が次々に発表されて、驚きと興奮の連続でした！！&lt;/p&gt;

&lt;p&gt;講義やオリエンテーションの時間を含めると、実質3日弱の期間だったので、かなり厳しいスケジュールだったと思うのですが、参加者のみなさんは本当にすごいと思いました。&lt;/p&gt;

&lt;p&gt;また、インターン期間中はGoogle MeetやSlackでシェーダーに関する雑談や疑問について参加者と語り合うことができ、参加者からも刺激をたくさんもらって、メンターという立場を忘れそうになるくらいに楽しかったです！&lt;/p&gt;

&lt;p&gt;今回はメンターという立場で参加しましたが、これからもシェーダーが好きな仲間として参加者の方々と交流していきたいと思いました！&lt;/p&gt;

&lt;p&gt;参加者の方々、本当にお疲れさまでした！そして、ありがとうございました！&lt;/p&gt;

&lt;h1 id=&#34;参加レポートのリンク&#34;&gt;参加レポートのリンク&lt;/h1&gt;

&lt;p&gt;大変ありがたいことに参加レポートを書いてくださった参加者がいるので、こちらにリンクを貼ります。&lt;/p&gt;

&lt;p&gt;発見したら、随時更新します。&lt;/p&gt;

&lt;p&gt;※投稿時間順&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;はてなブログに投稿しました &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#はてなブログ&lt;/a&gt;&lt;br&gt;KLabExpertCampに参加して作ったembraceの解説を語る - 覚え書き&lt;a href=&#34;https://t.co/wl3MHcxtQr&#34;&gt;https://t.co/wl3MHcxtQr&lt;/a&gt;&lt;/p&gt;&amp;mdash; tonoshake🍶 (@TonoShake) &lt;a href=&#34;https://twitter.com/TonoShake/status/1304970930783887361?ref_src=twsrc%5Etfw&#34;&gt;September 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; の話を書きました～&lt;br&gt;はてなブログに投稿しました &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#はてなブログ&lt;/a&gt;&lt;br&gt;KLab Expert Campに参加してきました - Butadiene Works &lt;a href=&#34;https://t.co/zBV5bcEkZt&#34;&gt;https://t.co/zBV5bcEkZt&lt;/a&gt;&lt;/p&gt;&amp;mdash; ブタジエン (@butadiene121) &lt;a href=&#34;https://twitter.com/butadiene121/status/1305001646301220864?ref_src=twsrc%5Etfw&#34;&gt;September 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;成果発表の作品リンク&#34;&gt;成果発表の作品リンク&lt;/h1&gt;

&lt;p&gt;成果発表の作品のリンクを貼ります。とてもクオリティの高い作品ばかりです！&lt;/p&gt;

&lt;p&gt;発見したら、随時更新します。&lt;/p&gt;

&lt;p&gt;※投稿時間順&lt;/p&gt;

&lt;!--blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;br&gt;「embrace」です&lt;a href=&#34;https://t.co/8DMSc7ItvZ&#34;&gt;https://t.co/8DMSc7ItvZ&lt;/a&gt;&lt;br&gt;shadertoyなど関連リンクはツリーにつなげます&lt;/p&gt;&amp;mdash; tonoshake🍶 (@TonoShake) &lt;a href=&#34;https://twitter.com/TonoShake/status/1304704452788498433?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script--&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt;&lt;br&gt;&amp;quot;metaball and hexagon ver.1.0&amp;quot; by &amp;quot;Santa&amp;quot; &lt;a href=&#34;https://t.co/3UlZzelxro&#34;&gt;https://t.co/3UlZzelxro&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/NEORT?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#NEORT&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝙎𝙖𝙣𝙩𝙖 (@santa_sukitoku) &lt;a href=&#34;https://twitter.com/santa_sukitoku/status/1304704651749539840?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で流体シミュレーション作りました！&lt;br&gt;leapmotion使って自分の手で混ぜ混ぜできます😆&lt;a href=&#34;https://twitter.com/hashtag/madewithunity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#madewithunity&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/unity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#unity&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/geometry?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#geometry&lt;/a&gt; &lt;a href=&#34;https://t.co/iEfugMgbCD&#34;&gt;pic.twitter.com/iEfugMgbCD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fᴇʏʀɪs💤VRC民 (@Feyris77) &lt;a href=&#34;https://twitter.com/Feyris77/status/1304712464789942273?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; でLayered Materialを制作しました。&lt;br&gt;動画提出が規定なのでフレーク塗装/カーボンファイバー塗装の車にセットアップして、vaperwaveっぽい背景で走らせました。（音楽はvaperwaveっぽくはない？よね？） &lt;a href=&#34;https://t.co/0gTMFhH0fo&#34;&gt;pic.twitter.com/0gTMFhH0fo&lt;/a&gt;&lt;/p&gt;&amp;mdash; Haruka Kjt (@kajitaj63b3) &lt;a href=&#34;https://twitter.com/kajitaj63b3/status/1304714516177981440?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で初めてパストレーシングを勉強してそれを用いて動画作品を作りました！！　見ていってください！&lt;a href=&#34;https://t.co/h31s5hK0YT&#34;&gt;https://t.co/h31s5hK0YT&lt;/a&gt;&lt;/p&gt;&amp;mdash; ブタジエン (@butadiene121) &lt;a href=&#34;https://twitter.com/butadiene121/status/1304715353528778752?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; でglslを使ってデモっぽいものを作成しました。良かったら見てね！&lt;a href=&#34;https://t.co/3gmJkDlGJC&#34;&gt;https://t.co/3gmJkDlGJC&lt;/a&gt; &lt;a href=&#34;https://t.co/eV0CPbvdtB&#34;&gt;pic.twitter.com/eV0CPbvdtB&lt;/a&gt;&lt;/p&gt;&amp;mdash; 避雷 (@lucknknock) &lt;a href=&#34;https://twitter.com/lucknknock/status/1304721446216675328?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;FlashBack&lt;a href=&#34;https://twitter.com/hashtag/klabexpertcamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klabexpertcamp&lt;/a&gt; での最終成果です！&lt;br&gt;レイマーチングとWebGLを混ぜ合わせました。&lt;a href=&#34;https://t.co/kv3O0VksYe&#34;&gt;https://t.co/kv3O0VksYe&lt;/a&gt; &lt;a href=&#34;https://t.co/PJQk8rn9K8&#34;&gt;https://t.co/PJQk8rn9K8&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/threejs?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#threejs&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/webgl?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#webgl&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/glsl?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#glsl&lt;/a&gt; &lt;a href=&#34;https://t.co/O60mnFeGYZ&#34;&gt;pic.twitter.com/O60mnFeGYZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; ukonpower (@UkskSan) &lt;a href=&#34;https://twitter.com/UkskSan/status/1304721668158308352?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;br&gt;投稿作品です！　GLSLでフラクタル書きました！&lt;a href=&#34;https://t.co/olmvCDfB7V&#34;&gt;https://t.co/olmvCDfB7V&lt;/a&gt;&lt;/p&gt;&amp;mdash; hibit (@hibit_at) &lt;a href=&#34;https://twitter.com/hibit_at/status/1304727106132176897?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で作りました～ &lt;a href=&#34;https://t.co/ckqwJojqlX&#34;&gt;https://t.co/ckqwJojqlX&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/glsl?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#glsl&lt;/a&gt; &lt;a href=&#34;https://t.co/GEm63mdUEd&#34;&gt;pic.twitter.com/GEm63mdUEd&lt;/a&gt;&lt;/p&gt;&amp;mdash; 寝る前 (@nerumae3) &lt;a href=&#34;https://twitter.com/nerumae3/status/1304736190134775808?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; で制作しました！&lt;br&gt;凄い人ばかりでめちゃくちゃ良い経験になりました！&lt;a href=&#34;https://t.co/astTdcYc79&#34;&gt;https://t.co/astTdcYc79&lt;/a&gt;&lt;/p&gt;&amp;mdash; 3yen (@3yen_CG) &lt;a href=&#34;https://twitter.com/3yen_CG/status/1304754989412134912?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;メンター賞を頂いたあの「embrace」がツイッター投稿版になりました！&lt;br&gt;ツイッター限定で、映画と同じフレームレートで書き出したバージョンになります&lt;br&gt;フレームレートを下げることで雰囲気も変わりました&lt;br&gt;ぜひ見てください！&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#KLabExpertCamp&lt;/a&gt; &lt;a href=&#34;https://t.co/XE6wsLfws4&#34;&gt;https://t.co/XE6wsLfws4&lt;/a&gt; &lt;a href=&#34;https://t.co/47sXyr8FtL&#34;&gt;pic.twitter.com/47sXyr8FtL&lt;/a&gt;&lt;/p&gt;&amp;mdash; tonoshake🍶 (@TonoShake) &lt;a href=&#34;https://twitter.com/TonoShake/status/1304933850754068480?ref_src=twsrc%5Etfw&#34;&gt;September 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Revision2020 PC 64K Intro 優勝作品『RE: SIMULATED』の技術解説</title>
      <link>https://gam0022.net/blog/2020/04/30/revision2020/</link>
      <pubDate>Thu, 30 Apr 2020 12:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2020/04/30/revision2020/</guid>
      <description>&lt;p&gt;4月10日～4月13日に世界最大のデモパーティ&lt;a href=&#34;https://2020.revision-party.net/start&#34;&gt;Revision 2020&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;Revision 2020内で開催されたコンペのうち、&lt;a href=&#34;https://2020.revision-party.net/competitions/pc-competitions&#34;&gt;PC 64K Intro&lt;/a&gt;という64KBの容量制約のある部門で『RE: SIMULATED by gam0022 &amp;amp; sadakkey』という作品を発表しました。&lt;/p&gt;

&lt;p&gt;Tokyo Demo Fest 2018に続き、私（&lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt;）が映像を、さだきちさん（&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;）が音楽を制作しました。&lt;/p&gt;

&lt;p&gt;……なんと、本作品が参加者投票により1位に選ばれました！
日本人のチームがPC 64K Intro部門で優勝するのは Revision 史上初です。とても嬉しいです！&lt;/p&gt;

&lt;p&gt;本記事では、技術解説をメインに、『RE: SIMULATED by gam0022 &amp;amp; sadakkey』を紹介したいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/resimulated-collage.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/resimulated-collage.jpg&#34; alt=&#34;resimulated-collage&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;作品へのリンク&#34;&gt;作品へのリンク&lt;/h1&gt;

&lt;p&gt;WebGLとWebAudioによる64K Introなので、最新のChromeと高性能なGPUがあれば、ブラウザ上で動作します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/webgl/64k-intro_resimulated.html&#34;&gt;64KB HTML version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://neort.io/art/bqa4pgs3p9f6qoqnmujg&#34;&gt;NEORT version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;高スペックのPCを持っていない方は、YouTubeの動画をご覧ください。&lt;/p&gt;

&lt;p&gt;フラクタルをつかった映像のビットレートの高い作品ですが、4K解像度を選ぶことである程度は綺麗な状態で見れます。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/tirAdWbceak&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;こちらはpouet（デモシーンのコミュニティサイト）のリンクです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=85260&#34;&gt;RE: SIMULATED by Gam0022 &amp;amp; Sadakkey :: pouët.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;技術解説&#34;&gt;技術解説&lt;/h1&gt;

&lt;p&gt;ソースコードはすべてGitHubに公開しているので、興味がある方はぜひ見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/resimulated&#34;&gt;gam0022/resimulated: 1st place at Revision 2020 (PC 64K Intro)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サウンド編についてはさだきちさんが解説されています。あわせてご覧ください！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.klab.com/jp/blog/creative/2020/revision-2020-pc-64k-intro.html&#34;&gt;Revision 2020 のPC 64K INTRO 優勝作品のサウンドについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キーワードとしては、以下の技術が使われています。&lt;/p&gt;

&lt;p&gt;TypeScript, WebGL, WebAudio, webpack, pnginator.rb, Raymarching, GLSL Sound&lt;/p&gt;

&lt;h2 id=&#34;シンプルなwebglエンジン-chromatiq&#34;&gt;シンプルなWebGLエンジン『Chromatiq』&lt;/h2&gt;

&lt;p&gt;64KBの容量制約があるため、Unityやthree.jsといった既存のゲームエンジンやフレームワークを利用せずに、描画用のWebGLエンジンと制作用のツール（エディタ機能）を自作する必要がありました。&lt;/p&gt;

&lt;p&gt;OpenGLやDirectXを使わずに、WebGLを選択した理由は以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebGLでブラウザ上で動かせれば、手元のPCで動かしてもらえる可能性が高いと考えた

&lt;ul&gt;
&lt;li&gt;自分の作品は映像のビットレートが高く、動画だと綺麗にならない&lt;/li&gt;
&lt;li&gt;手元のPCで実行して綺麗な状態で見てもらいたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Webフロントエンドの技術をキャッチアップしたかった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、64K Intro向けに&lt;strong&gt;ファイルサイズの最小化を目指したシンプルなWebGLエンジン『Chromatiq』&lt;/strong&gt;を開発しました。&lt;/p&gt;

&lt;p&gt;WebGLエンジンとは言うものの、本当にシンプルで最小限な機能しか &amp;ldquo;現段階では&amp;rdquo; 実装していません。&lt;/p&gt;

&lt;p&gt;なるべく作品に依存した機能は用意したくなかったので、汎用的な設計になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マルチパスのImageShaderによるレンダリング（viewport square）&lt;/li&gt;
&lt;li&gt;ビルドインのBloomのポストエフェクト

&lt;ul&gt;
&lt;li&gt;どんな作品でも利用できそうなので、これだけビルドインにした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TypeScriptからuniformをアニメーションするためのインターフェース&lt;/li&gt;
&lt;li&gt;Shadertoyと互換性のあるGLSL Sound&lt;/li&gt;
&lt;li&gt;オーディオファイルの再生（mp3 / ogg）

&lt;ul&gt;
&lt;li&gt;DAWによる音楽の再生用の機能&lt;/li&gt;
&lt;li&gt;今回は先にDAWで作曲し、後からGLSLに移植する作戦にした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォントをレンダリングするためのcanvasからのテクスチャ生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イメージとしてはGLSLエディタを排除したスタンドアローンなShadertoyが近いかもしれません。&lt;/p&gt;

&lt;p&gt;ソースコードは&lt;a href=&#34;https://github.com/gam0022/resimulated/blob/master/src/chromatiq.ts&#34;&gt;こちら&lt;/a&gt;です。単一ファイルのTypeScriptで実装しました。&lt;/p&gt;

&lt;p&gt;圧縮後のコードサイズを気にして、変な感じの実装になっているので、微妙に読みづらいかもしれません。&lt;/p&gt;

&lt;p&gt;例えば、フィールド参照の this を頭につけるとコードサイズが増えるため、コンストラクタの中で動的にインスタンスメソッドを定義することで、this の利用を最小限にしたり、
クラス外から値を参照・設定する必要があるデータのみ、フィールドとして定義する方針とています。enumもコードサイズが増えるので禁止にしました。&lt;/p&gt;

&lt;p&gt;製作の終盤から容量が余裕そうなことが判明したので、途中からファイルサイズを考慮するのを止め、mini化の中途半端感は否めないです。
このあたりは、次のデモに向けて改良していきたいと考えています。&lt;/p&gt;

&lt;p&gt;uniform名は基本的にはShadertoyと一致させているのですが、テクスチャのサンプラーはShadertoyを踏襲せずに、直前のパスを参照する &lt;code&gt;iPrevPass&lt;/code&gt; を定義しました。
これによってGLSLを書き換えずにエフェクトの順番を入れ替えたり、気軽にパスを増やしてエフェクトをチェインしやすくしました。
このあたりの仕様も、作品の需要に応じて変更していく可能性は高いです。&lt;/p&gt;

&lt;h2 id=&#34;ファイル圧縮のためのビルドプロセス&#34;&gt;ファイル圧縮のためのビルドプロセス&lt;/h2&gt;

&lt;p&gt;圧縮には&lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;と&lt;a href=&#34;https://gist.github.com/gasman/2560551&#34;&gt;pnginator.rb&lt;/a&gt;を利用しています。&lt;/p&gt;

&lt;p&gt;ビルドプロセスを図にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/build-process.svg&#34; alt=&#34;build-process&#34; /&gt;&lt;/p&gt;

&lt;p&gt;webpackですべてのファイルをbundle.jsという単一のJavaScriptに固めてから、pnginator.rbで自己解凍形式のPNGにしています。&lt;/p&gt;

&lt;p&gt;TypeScriptのminifyは完全にwebpack任せです。&lt;/p&gt;

&lt;p&gt;PNGでは画像データをzlib圧縮するため、画像データではなくても、例えば今回のようなプログラムのソースコードでちゃんと圧縮できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://qiita.com/gam0022/items/364c7f76f2787e385161&#34;&gt;GLSLのminifyも検証&lt;/a&gt;はしていて、webpackのLoaderを開発する予定もあったのですが、容量が余裕だったのでGLSLの圧縮はPNG（zlib）だけになりました。&lt;/p&gt;

&lt;p&gt;また、開発用にしか必要ないコードの削除もwebpackの&lt;a href=&#34;https://webpack.js.org/plugins/define-plugin/&#34;&gt;define-plugin&lt;/a&gt;で実現できました。&lt;/p&gt;

&lt;p&gt;webpackとpnginator.rbを組み合わせる手法は、&lt;a href=&#34;https://twitter.com/FMS_Cat&#34;&gt;FMS_Catさん&lt;/a&gt;の&lt;a href=&#34;https://github.com/FMS-Cat/until/&#34;&gt;Until&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;p&gt;当初はnode.jsでGLSLのホットリロード機能付きのWebサーバを開発しようと技術検証していたのですが、
要件は&lt;a href=&#34;https://github.com/webpack/webpack-dev-server&#34;&gt;webpack-dev-server&lt;/a&gt;ですべて実現可能だったので、webpackを採用しました。&lt;/p&gt;

&lt;p&gt;PRごとに圧縮後のファイルサイズを確認するようにしたら、圧縮後のファイルサイズについて知見が貯まりました（例）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コードの自動フォーマットをかけると、圧縮効率が上がってファイルサイズが減る&lt;/li&gt;
&lt;li&gt;コードをコピペすると圧縮効率が高くなるので、実は無理にコードを共通化する意味は実は薄い&lt;/li&gt;
&lt;li&gt;似たよな構造になるようにコードを意識すると圧縮効率が良くなる&lt;/li&gt;
&lt;li&gt;関数の順番を入れ替えただけで微妙にサイズが減ったりと謎が多い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;制作用のエディタ機能の紹介&#34;&gt;制作用のエディタ機能の紹介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor.png&#34; alt=&#34;chromatiq-editor&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;製作のイテレーションを高速化するため、必要なエディタ機能は一通り実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;再生位置のシーク機能

&lt;ul&gt;
&lt;li&gt;再生・一時停止・停止・フレームのコマ送り・時間の表示単位の秒とビートの切り替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GLSLやTypeScriptのホットリロード機能&lt;/li&gt;
&lt;li&gt;uniformのパラメータのインスペクタ&lt;/li&gt;
&lt;li&gt;カメラの自由移動&lt;/li&gt;
&lt;li&gt;デバッグ用に特定のパスの表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エディタ機能は容量制約に影響しないので、既存のライブラリを積極的に利用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ボタン用のアイコンのために、&lt;a href=&#34;https://fontawesome.com/&#34;&gt;fontawesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;uniformのパラメータのインスペクタのために、&lt;a href=&#34;https://github.com/dataarts/dat.gui&#34;&gt;dat.gui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;カメラの自由移動のために、&lt;a href=&#34;https://threejs.org/&#34;&gt;three.js&lt;/a&gt;の&lt;a href=&#34;https://threejs.org/docs/#examples/en/controls/OrbitControls&#34;&gt;OrbitControls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/resimulated#1-get-started&#34;&gt;リポジトリ&lt;/a&gt;をcloneして、 &lt;code&gt;npm run start&lt;/code&gt; すれば、エディタ機能が使えますので、興味がある人はお試しください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:gam0022/resimulated.git
cd resimulated
npm install

# 制作用のエディタを起動
npm run start

# 提出用のビルド（dist\resimulated.html）を生成
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uniformのパラメータのインスペクタ&#34;&gt;uniformのパラメータのインスペクタ&lt;/h3&gt;

&lt;p&gt;GLSL上で以下のようなuniformを宣言するだけで、そのままインスペクタに表示されるような仕組みを実装しました。&lt;/p&gt;

&lt;p&gt;コメントでは左から順に &lt;code&gt;初期値 min max カテゴリー名&lt;/code&gt; を指定しています。初期値は必須ですが、それ以外は省略可能としました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;uniform float gEmissiveIntensity;     // 6.0 0 20 emissive
uniform float gEmissiveSpeed;         // 1 0 2
uniform float gEmissiveHue;           // 0.33947042613522904 0 1
uniform float gEmissiveHueShiftBeat;  // 0 0 1
uniform float gEmissiveHueShiftZ;     // 0 0 1
uniform float gEmissiveHueShiftXY;    // 0 0 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uniform宣言をすると、自動的にインスペクタにパラメータが追加されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/chromatiq-editor-emissive.png&#34; alt=&#34;chromatiq-editor-emissive&#34; /&gt;&lt;/p&gt;

&lt;p&gt;私の作品では、フラクタルやIFSといったパラメータの細かな調整が重要になる表現を多用しているため、気軽にパラメータを増やして、気軽に値を調整できるようにしました。&lt;/p&gt;

&lt;p&gt;値の当たりをつけた後に、パラメータのアニメーションを&lt;a href=&#34;https://github.com/gam0022/resimulated/blob/master/src/index.common.ts#L142-L569&#34;&gt;TypeScriptのコード&lt;/a&gt;に落とし込むワークフローにしました。&lt;/p&gt;

&lt;p&gt;これは、インスペクタを動かしている様子の動画です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;三谷先生に便乗して、MengerSponge をカットしてみました。&lt;br&gt;断面が星みたいになって面白いですね⭐️ &lt;a href=&#34;https://t.co/mCqFnfbjBF&#34;&gt;https://t.co/mCqFnfbjBF&lt;/a&gt; &lt;a href=&#34;https://t.co/QF73xfFL1y&#34;&gt;pic.twitter.com/QF73xfFL1y&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ / encoder killer (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1253296266424930304?ref_src=twsrc%5Etfw&#34;&gt;April 23, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;動画の保存機能&#34;&gt;動画の保存機能&lt;/h3&gt;

&lt;p&gt;処理落ちなしに4K解像度で動画を出力したかったので、以下の機能を実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;映像の連番PNG保存機能&lt;/li&gt;
&lt;li&gt;サウンドの wav 保存機能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.png と .wav を ffmpeg で .mp4 に変換してYouTubeにアップロードしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ffmpeg.exe -r 60 -i chromatiq%04d.png -i chromatiq.wav -c:v libx264 -preset slow -profile:v high -coder 1 -pix_fmt yuv420p -movflags +faststart -g 30 -bf 2 -c:a aac -b:a 384k -profile:a aac_low -b:v 68M chromatiq_68M.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;YouTube用のffmpegのエンコード設定については、以下を参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/youtube/answer/1722171?hl=ja&#34;&gt;アップロードする動画におすすめのエンコード設定&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;映像ビットレート 2160p（4k）53～68 Mbps&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/mikoim/27e4e0dc64e384adbcb91ff10a2d3678&#34;&gt;YouTube recommended encoding settings on ffmpeg (+ libx264)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/sasaki_0222/status/1248910333835530241&#34;&gt;解像度とビットレードについて by sasaki_0222&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;映像について&#34;&gt;映像について&lt;/h2&gt;

&lt;p&gt;映像の3D描画は基本的に全部レイマーチングです。&lt;/p&gt;

&lt;p&gt;前半のサイバーなシーンはMandelboxをベースにしました。&lt;/p&gt;

&lt;p&gt;後半の宇宙空間とグリーティングのシーンでは、宇宙空間はレイマーチング、惑星の上のグリーティングの文字はAABBとして解析的に衝突判定をするハイブリッドなレイトレをしています。&lt;/p&gt;

&lt;p&gt;パスの構成は、最終的にこうなりました。&lt;/p&gt;

&lt;p&gt;1パス目と2パス目を分離したのは、シェーダーのコンパイル時間の短縮のためです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1パス目: 前半のシーンのレイマーチング&lt;/li&gt;
&lt;li&gt;2パス目: 後半のシーンのレイマーチング&lt;/li&gt;
&lt;li&gt;3パス目: テキストの描画&lt;/li&gt;
&lt;li&gt;4～13パス目: Bloomのポストエフェクト&lt;/li&gt;
&lt;li&gt;14パス目: ポストエフェクトとトーンマッピング&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;惑星のバリエーション生成の仕組み&#34;&gt;惑星のバリエーション生成の仕組み&lt;/h3&gt;

&lt;p&gt;後半のグリーティングでは、自分が特に尊敬しているデモグループをイメージした惑星が合計14パターン登場します。&lt;/p&gt;

&lt;p&gt;様々なバリエーションの惑星を効率的に生成するための仕組みを実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;地形の高さマップの自動生成&lt;/li&gt;
&lt;li&gt;テクスチャの色のグラデーションの自動生成&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;地形の高さマップの自動生成&#34;&gt;地形の高さマップの自動生成&lt;/h4&gt;

&lt;p&gt;2DのValue Noiseを重ね合わせたfbm（Fractal Brownian Motion）で地形の高さマップを生成しました。&lt;/p&gt;

&lt;p&gt;さらに、fbm関数をネストして（fbmのUV計算にfbmをつかって）、歪んだような不思議な雰囲気の地形も生成できるようにしました。&lt;/p&gt;

&lt;p&gt;左がfbmのネストよる歪みなしで、右がfbmのネストによる歪みありです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/fbm-shift.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2020-04-19-revision2020/fbm-shift.jpg&#34; alt=&#34;fbm-shift&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fbmの各種パラメーター（振幅や周波数、Y方向のスケール、歪み用のfbmの強度）は、乱数ではなく、配列で直接指定することで、イメージ通りの結果に調整できるようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// fbmAmp, fbmFreq, fbmYScale, fbmShift
vec4[PLANETS_PAT_MAX * PLANETS_NUM_MAX] planetFbmParams = vec4[](
    // MIX_A
    vec4(0.3, 17.0, 1.0, 0.01), vec4(0.05, 10.0, 1.05, 0.0), vec4(0.05, 10.0, 1.05, 0.01),
    vec4(0.05, 10.0, 4.05, 0.02), vec4(0.05, 10.0, 2.05, 00.1), vec4(0.0),
    // MIX_B
    vec4(0.0, 10.0, 1.0, 0.2), vec4(0.0, 10.0, 1.0, 0.01), vec4(0.0, 10.0, 1.0, 0.03),
    vec4(0.05, 10.0, 1.0, 00.2), vec4(0.06, 10.0, 1.0, 0.03), vec4(0.05, 10.0, 1.0, 0.03));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなfbmをネストしたシンプルな関数で高さマップを生成しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 惑星の高さマップ（height map）を生成する関数
// pは球体のUV, id は惑星のID
float hPlanetsMix(vec2 p, int id) {
    p.y *= planetFbmParams[id].z;
    return fbm(p + 
        planetFbmParams[id].w * fbm(p, 4.0 * planetFbmParams[id].y), planetFbmParams[id].y);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;テクスチャの色のグラデーションの自動生成&#34;&gt;テクスチャの色のグラデーションの自動生成&lt;/h4&gt;

&lt;p&gt;iqのColor Palettesを使いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iquilezles.org/www/articles/palettes/palettes.htm&#34;&gt;Color Palettes - Inigo Quilez :: fractals, computer graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {
    return a + b * cos(TAU * (c * t + d));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pal 関数の使い方は簡単で、&lt;code&gt;a, b, c, d&lt;/code&gt; を任意に指定すれば、&lt;code&gt;t&lt;/code&gt; を変化することでグラデーションを生成できます。&lt;/p&gt;

&lt;p&gt;今回は &lt;code&gt;a, b, c&lt;/code&gt; は定数、&lt;code&gt;d&lt;/code&gt; は惑星ごとに乱数で決定しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a, b, c&lt;/code&gt; や乱数のseed値はインスペクタで値を調整しながら、イメージ通りのグラデーションが生成されるまで試行錯誤しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;t&lt;/code&gt; は地形の高さマップにマッピングしました。&lt;/p&gt;

&lt;h3 id=&#34;無数の小惑星のランダムな配置&#34;&gt;無数の小惑星のランダムな配置&lt;/h3&gt;

&lt;p&gt;宇宙空間がスカスカすぎて寂しかったので、無数の小惑星をランダムに配置しようとしたら、予想外に苦戦しました。&lt;/p&gt;

&lt;p&gt;レイマーチングだと空間をmodすることで物体を無限に複製することは簡単なのですが、それでは規則的な配置にしかならず、かなり不自然になってしまいます。&lt;/p&gt;

&lt;p&gt;gazさんのシェーダーを参考にして、空間をgridに分割して、gridごとに乱数を生成して、乱数で確率的に物体を間引く手法を採用しました。&lt;/p&gt;

&lt;p&gt;また、アーティファクトの回避するために、rayの長さを制限する工夫も必要でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;もう忘れてるよ。自分で読み解いてしまったじゃないか。xy平面を通常のmod()で分割。z軸の奥行のみgridをseedに乱数を使い間引きしてる。z軸だけ空間移動のスピード、回転を変えてる。アーティファクト対策で、min(map(p), 1.0)を使いrayの長さを制限。effectにビルボードを使い発光を演出。&lt;/p&gt;&amp;mdash; gaz (@gaziya5) &lt;a href=&#34;https://twitter.com/gaziya5/status/1247671912521596928?ref_src=twsrc%5Etfw&#34;&gt;April 7, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;最終的に、ランダムな位置と大きさをもつ小惑星の距離関数はこうなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;float dGomi(vec3 p) {
    // アーティファクト対策のための固定長の距離
    float d = 1.0;

    // グリット（4m四方の立方体）の計算
    vec3 g = vec3(floor(p / 4.0));

    // 座標の繰り返し
    p = mod(p, 4.0) - 2.0;

    // 確率 rate に応じて球体を配置
    vec3 rand = hash33(g);
    float rate = (gPlanetsId != PLANETS_EARTH) ? 0.08 : 0.01;
    if (rand.x &amp;lt; rate) {
        p -= (rand - 0.5);
        d = sdSphere(p, 0.1 * rand.y);
    }

    // fbmで表面の凹凸のディテールを加える
    // レイが接近したときだけに計算するのは、LODによる負荷対策
    // fbmの計算はかなり高負荷なので、LODをしないと激重になる
    if (d &amp;lt; 0.5) {
        vec2 uv = uvSphere(normalize(p));
        uv.x += dot(rand, vec3(1.0));
        d -= remapTo(rand.z, 0.01, 0.08) * fbm(uv, 5.0);
    }

    return d;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;音楽について&#34;&gt;音楽について&lt;/h2&gt;

&lt;p&gt;基盤となるGLSLサウンド用のシーケンサーの実装は私が、それ以外のオシレーターの関数やメロディの実装はさだきちさんが担当しました。&lt;/p&gt;

&lt;p&gt;音楽もやはり容量制約のためにGLSLで実装する必要があり、さだきちさんにはコーディングによる作曲をお願いしました。
さだきちさんはプログラミングもGLSLも未経験だったので、それらの習得から始まりました。
かなり無茶なお願いだったにも関わらず、かっこいいトランスミュージックを提供してくれたさだきちさんには感謝しかありません。ありがとうございます！&lt;/p&gt;

&lt;p&gt;私が担当したGLSLサウンド用のシーケンサーはGLSLサウンド上で実装されており、GLSLサウンドを鳴らす仕組みについては、AMAGIさん（&lt;a href=&#34;https://twitter.com/amagitakayosi&#34;&gt;@amagitakayosi&lt;/a&gt;）の記事を参考に、Shadertoy互換のGLSLサウンドの再生機能を実装しました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.amagi.dev/entry/veda-sound&#34;&gt;VEDA 2.4: GLSLで音楽を演奏できるようになったぞ！！！ - マルシテイア&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;サウンド用のシーケンサーの利用例&#34;&gt;サウンド用のシーケンサーの利用例&lt;/h3&gt;

&lt;p&gt;これはベースのパートの波形を生成するGLSLの関数です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vec2 bass1(float beat, float time) {
// 1つのパターンのビート数
#define BASS1_BEAT_LEN 8

// パターンの種類
#define BASS1_DEV_PAT 10

// 楽曲全体の長さのパターン数
#define BASS1_DEV_LEN 32

    // パターンの定義
    int[BASS1_BEAT_LEN * NOTE_DIV * BASS1_DEV_PAT] notes = int[](
        // パターン0
        F(0), F(33), E(0, 33), S(0, 33, 0, 33),
        F(0), F(33), E(0, 33), S(0, 33, 0, 33),

        // パターン1
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),

        // パターン2
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(48, 47, 43, 40),

        // パターン3
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34),

        // パターン4
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 36, 36, 36),

        // パターン5
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34), S(0, 36, 36, 36),

        // パターン6
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 43, 43, 43), S(0, 55, 57, 69),

        // パターン7
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45),
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31),

        // パターン8
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),
        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 43, 45, 57),

        // パターン9
        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45),
        E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(0, 31, 31, 31));

    // パターンの進行
    int[BASS1_DEV_LEN / DEV_PACK] development = int[](
        D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 3, 4, 5, 6),
        D(7, 0, 7, 8, 7, 0, 9, 0), D(0, 0, 0, 0, 0, 0, 0, 0));

    SEQUENCER(beat, time, BASS1_BEAT_LEN, BASS1_DEV_PAT, BASS1_DEV_LEN,
        notes, development, bass)

    return ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パターン（2小節分のノートナンバーの並び）の定義と進行は、それぞれ配列で指定できるようにしています。&lt;/p&gt;

&lt;p&gt;音の長さは下記の4種類に対応しました。
ノートナンバーに0を指定すれば、同じ長さの休符になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O: 全音符&lt;/li&gt;
&lt;li&gt;F: 4分音符&lt;/li&gt;
&lt;li&gt;E: 8分音符&lt;/li&gt;
&lt;li&gt;S: 16分音符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GLSLのコンスタントバッファのサイズには上限があり、サウンド用のシェーダー全体で要素数が4096個まででしか配列を宣言できません。&lt;/p&gt;

&lt;p&gt;そこで、&lt;code&gt;O, F, E, S&lt;/code&gt; を関数マクロとし、16分音符を最小単位として各音符を16bit（うち、ノートナンバーが8bit、音の長さが8bit）ずつパッキングしています。
GLSLのintは32bitなので、int配列の1要素に16分音符なら2つ、8分音符なら1つ入るような設計です。&lt;/p&gt;

&lt;p&gt;また、パターン進行の &lt;code&gt;D&lt;/code&gt; もマクロにしていて、要素数の節約のために4bitずつパッキングをしています。&lt;/p&gt;

&lt;p&gt;続いて、&lt;code&gt;bass&lt;/code&gt; は時間とノートナンバーを入力として、波形を出力するオシレーターのGLSL関数です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SEQUENCER&lt;/code&gt; は、時間、パターンの定義の配列、パターンの進行の配列、オシレーターの関数を指定することで、パートごとの波形を生成して &lt;code&gt;vec2 ret&lt;/code&gt; に代入する関数マクロです。
GLSLでは関数を引数とするような高階関数は実現できませんが、関数マクロで擬似的に実現しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define SEQUENCER(beat, time, beatLen, devPat, devLen, notes, development, toneFunc)  \
    int indexOffset = development[int(                                                \
        mod(beat / float(beatLen * DEV_PACK), float(devLen / DEV_PACK)))];            \
    indexOffset =                                                                     \
        (indexOffset &amp;gt;&amp;gt; (4 * int(mod(beat / float(beatLen), float(DEV_PACK))))) &amp;amp; 15; \
    indexOffset *= beatLen * NOTE_VDIV;                                               \
                                                                                      \
    for (int i = 0; i &amp;lt; beatLen * NOTE_VDIV;) {                                       \
        int index = i + indexOffset;                                                  \
        int shift = (index % 2 == 1) ? 16 : 0;                                        \
        int div = ((notes[index &amp;gt;&amp;gt; 1] &amp;gt;&amp;gt; shift) &amp;gt;&amp;gt; 8) &amp;amp; 255;                          \
        int len = NOTE_VDIV * NOTE_VDIV / div;                                        \
        for (int j = 0; j &amp;lt; len; j++) {                                               \
            tmpIndexes[i + j] = i;                                                    \
        }                                                                             \
        i += len;                                                                     \
    }                                                                                 \
                                                                                      \
    float indexFloat = mod(beat * float(NOTE_VDIV), float(beatLen * NOTE_VDIV));      \
    int index = int(indexFloat);                                                      \
    int shift = (index % 2 == 1) ? 16 : 0;                                            \
    int note = (notes[(index + indexOffset) &amp;gt;&amp;gt; 1] &amp;gt;&amp;gt; shift) &amp;amp; 255;                    \
    float localTime =                                                                 \
        beatToTime((indexFloat - float(tmpIndexes[index])) / float(NOTE_VDIV));       \
    float amp = (note == 0) ? 0.0 : 1.0;                                              \
    vec2 ret = vec2(toneFunc(float(note), localTime) * amp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パターンの定義・進行のマクロはこちらです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// 1ビートを最大何分割するか。16分音符に対応するなら4
#define NOTE_VDIV 4

// 1ビートのpackingを考慮した分割数。32bitのintに16bitずつ詰めているので
// 4 / (32 / 16) = 2
#define NOTE_DIV 2

// 展開用の配列のpacking数。32bitのintに4bitずつ詰めているので
// 32 / 4 = 8
#define DEV_PACK 8

#define MAX_BEAT_LEN 8
int[MAX_BEAT_LEN * NOTE_VDIV] tmpIndexes;

#define O(a)                                                                      \
    (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16),     \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), \
        (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 1 &amp;lt;&amp;lt; 8) | ((a | 1 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define F(a) (a | 4 &amp;lt;&amp;lt; 8) | ((a | 4 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (a | 4 &amp;lt;&amp;lt; 8) | ((a | 4 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define E(a, b) (a | 8 &amp;lt;&amp;lt; 8) | ((a | 8 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (b | 8 &amp;lt;&amp;lt; 8) | ((b | 8 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define S(a, b, c, d) \
    (a | 16 &amp;lt;&amp;lt; 8) | ((b | 16 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16), (c | 16 &amp;lt;&amp;lt; 8) | ((d | 16 &amp;lt;&amp;lt; 8) &amp;lt;&amp;lt; 16)
#define D(a, b, c, d, e, f, g, h) \
    (a) | (b &amp;lt;&amp;lt; 4) | (c &amp;lt;&amp;lt; 8) | (d &amp;lt;&amp;lt; 12) | (e &amp;lt;&amp;lt; 16) | (f &amp;lt;&amp;lt; 20) | (g &amp;lt;&amp;lt; 24) | (h &amp;lt;&amp;lt; 28)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;re-simulated-の意味&#34;&gt;『RE: SIMULATED』の意味&lt;/h1&gt;

&lt;p&gt;タイトルの『RE: SIMULATED』には2つの意味を込めました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前作『WORMHOLE』の64K Introとしての「再現」&lt;/li&gt;
&lt;li&gt;SIMULATED REALITY&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-前作-wormhole-の64k-introとしての-再現&#34;&gt;1. 前作『WORMHOLE』の64K Introとしての「再現」&lt;/h2&gt;

&lt;p&gt;一昨年のTokyo Demo Fest 2018のCombined Demo Compoでも、さだきちさんとチームを組んで『WORMHOLE』という作品を制作しました（&lt;a href=&#34;https://gam0022.net/blog/2018/12/12/tdf2018/&#34;&gt;記事&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;前半のシーンが顕著ですが、『WORMHOLE』と表現や演出が酷似していると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フラクタルの形状変化&lt;/li&gt;
&lt;li&gt;光の色の変化&lt;/li&gt;
&lt;li&gt;シーン転換前の激しい点滅&lt;/li&gt;
&lt;li&gt;シーン転換後のホワイトイン&lt;/li&gt;
&lt;li&gt;パーティのロゴの登場&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;『WORMHOLE』はUnityで制作したので、60.7 MB（zip圧縮で 23.18MB）というファイルサイズでした。&lt;/p&gt;

&lt;p&gt;前作では、Unityを利用したことで賛否両論があったので、ツールに頼らなくても同様のビジュアルを再現できることを証明する意図がありました。&lt;/p&gt;

&lt;p&gt;また、64K Introなどの容量制限のある部門への参加が個人的にも憧れだったという理由もあります。&lt;/p&gt;

&lt;p&gt;今回は自作のシステムで作品を制作することでファイルサイズは26KBになりました。&lt;/p&gt;

&lt;p&gt;同じ表現を「再現」しつつも、容量を &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2334&lt;/sub&gt; まで圧縮する試みのコンセプトは達成できました。&lt;/p&gt;

&lt;p&gt;まさか、コンポで優勝するという結果まで「再現」してしまうのは予想外でした（笑）&lt;/p&gt;

&lt;h2 id=&#34;2-simulated-reality&#34;&gt;2. SIMULATED REALITY&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%83%86%E3%83%83%E3%83%89%E3%83%BB%E3%83%AA%E3%82%A2%E3%83%AA%E3%83%86%E3%82%A3&#34;&gt;Simulated Reality&lt;/a&gt;という裏設定もありました。&lt;/p&gt;

&lt;p&gt;作品の最後に「RE: SIMULATED」の文字が&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RE: SIMULATED&lt;/code&gt; → &lt;code&gt;RE&lt;/code&gt; → &lt;code&gt;REALITY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と変化して、REALITYに変化するタイミングで「地球」がフラッシュバックするのは、Simulated Realityの暗喩です。&lt;/p&gt;

&lt;p&gt;前半のサイバーなシーンは電子的な仮想空間という設定で、シーン転換時に球体を中心に空間が歪んで圧縮するのは、宇宙誕生の爆発であるビッグバンの暗喩です。&lt;/p&gt;

&lt;p&gt;この世界は上位存在によって電子的にシミュレーションされた仮想現実で、最後に自分たちが住む地球を見つけるというストーリーでした（あくまで裏設定だったので、見た人に通じなくても良い）。&lt;/p&gt;

&lt;p&gt;できれば現実と見分けがつかないようなリアルなグラフィックで表現できたら良かったのですが、力量不足でした……。&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;Webフロントエンドは久しぶりで、node.jsとwebpackは初めてだったので、新しい技術を学ぶ良い機会となりました。&lt;/p&gt;

&lt;p&gt;昔はjQueryが必要だったDOMのセレクターやHTTPアクセスが、標準のAPI（&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/Document/querySelector&#34;&gt;querySelector&lt;/a&gt;や&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/Fetch_API/Using_Fetch&#34;&gt;Fetch&lt;/a&gt;）になっていて驚きました。&lt;/p&gt;

&lt;p&gt;TypeScript（ECMascript）に苦手意識がありましたが、最近はかなり使いやすい言語になったなぁと認識を改めました。
演算子オーバーロードがないのだけは、3Dプログラミングには必須のベクトル計算の実装の可読性が落ちて苦しい気持ちになったので、早くサポートして欲しいと感じました。&lt;/p&gt;

&lt;p&gt;また、64K Introのエントリーは今回が初めてということで、どのくらいのコンテンツが詰め込めるか感覚がつかめず、容量を半分以上も余らせてしまいました。
次の機会には64KBギリギリまで使って、もっと映像としても洗練させて、さらにCoolな作品を発表したいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;実は26KBしか使いきれなかったので、次回は64KBギリギリまで使えるように精進します💪 &lt;a href=&#34;https://t.co/uxF2M5DZmg&#34;&gt;pic.twitter.com/uxF2M5DZmg&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ / encoder killer (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1249677712815321088?ref_src=twsrc%5Etfw&#34;&gt;April 13, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;例年のRevisionの64K Introの作品と比較すると、かなり未熟なので、もっと精進して最高のデモを作りたいという気持ちです。&lt;/p&gt;

&lt;p&gt;ともあれ、このたびは優勝作品に選んでいただき、とても光栄に思います。&lt;/p&gt;

&lt;p&gt;世界中の尊敬するデモチームの方々からいただいたお祝いのコメントも嬉しかったです。わーい！&lt;/p&gt;

&lt;p&gt;最後に、世界的に大変な状況の中、オンラインでの開催のためにご尽力いただいた皆様に、心より感謝申し上げます。
とても楽しく充実した3日間を過ごせました。来年はドイツでお会いしましょう！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近未来教育フォーラム2019でシェーダーライブコーディングをしました</title>
      <link>https://gam0022.net/blog/2019/11/29/dhw/</link>
      <pubDate>Fri, 29 Nov 2019 10:36:17 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/11/29/dhw/</guid>
      <description>&lt;p&gt;2019/11/28にデジタルハリウッド大学で開催された&lt;a href=&#34;https://www.dhw.co.jp/forum/program.html&#34;&gt;近未来教育フォーラム&lt;/a&gt;の
「The Real Time Live &amp;amp; Reception リアルタイムグラフィックスの世界とVTuberが牽引する新たな人類」というイベントに登壇しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/FL1NE&#34;&gt;@FL1NE&lt;/a&gt;さんと一緒にデモシーンについて話しました。
私は簡単なシェーダーライブコーディングをしながらプログラミングによる形状のモデリングについて解説しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/o_ob/status/1200067621799903238&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-11-29-dhw/live_coding_init.jpg&#34; alt=&#34;シェーダーライブコーディング（初期）&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/songofsaya_/status/1199999036964474886&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-11-29-dhw/live_coding.jpg&#34; alt=&#34;シェーダーライブコーディング（完成）&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;レポート-2020-05-09追記&#34;&gt;レポート（2020/05/09追記）&lt;/h2&gt;

&lt;p&gt;当日の様子のレポートが公開されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dhw.co.jp/forum/report/report01.html&#34;&gt;近未来教育フォーラム2019 -In Real Time- 公演レポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;シェーダーライブコーディングによる作品&#34;&gt;シェーダーライブコーディングによる作品&lt;/h2&gt;

&lt;p&gt;WORMHOLEの前半に登場したフラクタルによる複雑な形状のトンネルのモデリングについてライブコーディングしながら解説しました。&lt;/p&gt;

&lt;p&gt;通常の3DCGでは、ツールでモデリングした3Dモデルを読み込んで表示すると思いますが、デモシーンの一部の部門には容量制限があるので、
WORMHOLEではシェーダーによるプログラミングによってプロシージャルにモデリングを行いました。&lt;/p&gt;

&lt;p&gt;発表時間が限られていたので、ハラハラ・ドキドキでしたが、なんとか意図通りの形になって良かったです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;WORMHOLEの前半に登場したフラクタルによる複雑な形状のトンネルのモデリングについてライブコーディングしながら解説しました。&lt;a href=&#34;https://twitter.com/hashtag/DHW?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#DHW&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1200006025878749184?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Gam師のレイマーチング始まってる。 &lt;a href=&#34;https://t.co/MHLrFmbLpL&#34;&gt;pic.twitter.com/MHLrFmbLpL&lt;/a&gt;&lt;/p&gt;&amp;mdash; さやちゃんぐbot (@songofsaya_) &lt;a href=&#34;https://twitter.com/songofsaya__/status/1199999036964474886?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;動画&#34;&gt;動画&lt;/h3&gt;

&lt;p&gt;YouTube配信のアーカイブが残っています。&lt;/p&gt;

&lt;p&gt;34:46〜が自分のシェーダーライブコーディングでした。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/j0yRASXFvlQ?start=2086&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;songofsaya-さんによる解説&#34;&gt;songofsaya_ さんによる解説&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/songofsaya_&#34;&gt;@songofsaya_&lt;/a&gt; さんがTwitterで解説をしてくださっていました。ありがとうございます！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;四角形のパイプと書いたけど、再帰性があるからおそらくメンガーだろうなーと思っていたらメンガーでした。&lt;br&gt;そしてGam師ならではのfoldRotateが登場します。これがKanetaaaaa神だとpmodと名前が変わります。 &lt;a href=&#34;https://t.co/VFqKT2jVoq&#34;&gt;pic.twitter.com/VFqKT2jVoq&lt;/a&gt;&lt;/p&gt;&amp;mdash; さやちゃんぐbot (@songofsaya_) &lt;a href=&#34;https://twitter.com/songofsaya__/status/1200008658916007938?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gam師ならではのfoldRotateが登場します。これがKanetaaaaa神だとpmodと名前が変わります&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正解です！&lt;/p&gt;

&lt;h2 id=&#34;発表資料&#34;&gt;発表資料&lt;/h2&gt;

&lt;p&gt;発表資料はFL1NEさんが作ってくれました。自分はライブコーディングのところを担当しました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b3019de333a449a481ff2df647d2d098&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;当日は&lt;a href=&#34;https://www.sli.do/&#34;&gt;sli.do&lt;/a&gt;で来場者の声がリアルタイムに見えるようになっていました。&lt;/p&gt;

&lt;p&gt;sli.doや懇親会で、メガデモとシェーダーについて「楽しそう！」「自分でも作ってみたい」といった好意的な感想をいただけました！&lt;/p&gt;

&lt;p&gt;シェーダやレイマーチングや3DCGに少しでも興味を持っていただけたのなら嬉しい限りです。ありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;メガデモとシェーダーについて&lt;br&gt;「楽しそう！」「自分でも作ってみたい」&lt;br&gt;といった好意的な感想をいただけて嬉しい限りです☺️&lt;a href=&#34;https://twitter.com/hashtag/DHW?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#DHW&lt;/a&gt; &lt;a href=&#34;https://t.co/BCkGVOiAdv&#34;&gt;pic.twitter.com/BCkGVOiAdv&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1200068188043501568?ref_src=twsrc%5Etfw&#34;&gt;November 28, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UnityエンジニアによるShader勉強会！に登壇しました</title>
      <link>https://gam0022.net/blog/2019/06/20/klab-tech-meetup4/</link>
      <pubDate>Thu, 20 Jun 2019 10:04:11 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/06/20/klab-tech-meetup4/</guid>
      <description>&lt;p&gt;6/19に開催された&lt;a href=&#34;https://techplay.jp/event/733454&#34;&gt;UnityエンジニアによるShader勉強会！&lt;/a&gt;で「Unity×レイマーチングによる映像制作の実践手法」という発表をしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;daf8218b7458460087137b6f23e938b3&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（06/25追記）&lt;/strong&gt; 発表内容をブログ向けに編集・要約して別記事にまとめました。
スライドだけでは伝わりにくい箇所を文章でフォローしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2019/06/25/unity-raymarching/&#34;&gt;Unity×レイマーチングによる映像制作の実践手法 | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;発表資料まとめ&#34;&gt;発表資料まとめ&lt;/h1&gt;

&lt;p&gt;発表者の資料のツイートをまとめました。&lt;/p&gt;

&lt;h2 id=&#34;kanetaaaaa-シェーダーライブコーディングのすすめ&#34;&gt;@kanetaaaaa 「シェーダーライブコーディングのすすめ」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;先日の資料を元にシェーダーライブコーディング入門の記事を書きました🤔&lt;br&gt;普段シェーダーを使ってる人の遊び道具になって欲しいです！&lt;br&gt;懇親会時に作ったシェーダーで使用したテクニックもいくつか追加で紹介しています！！&lt;a href=&#34;https://t.co/MgDFAatZre&#34;&gt;https://t.co/MgDFAatZre&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt;&lt;/p&gt;&amp;mdash; かねた (@kanetaaaaa) &lt;a href=&#34;https://twitter.com/kanetaaaaa/status/1141485526815346688?ref_src=twsrc%5Etfw&#34;&gt;2019年6月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の資料のために眺めるだけでレイマーチングを完全に理解できるかもしれないシェーダーを作りました🤔&lt;a href=&#34;https://t.co/Hia4I0Dgii&#34;&gt;https://t.co/Hia4I0Dgii&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt; &lt;a href=&#34;https://t.co/kIuU4USxRJ&#34;&gt;pic.twitter.com/kIuU4USxRJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; かねた (@kanetaaaaa) &lt;a href=&#34;https://twitter.com/kanetaaaaa/status/1141307706139004934?ref_src=twsrc%5Etfw&#34;&gt;2019年6月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;gam0022-unity-レイマーチングによる映像制作の実践手法&#34;&gt;@gam0022「Unity×レイマーチングによる映像制作の実践手法」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の発表資料です！&lt;br&gt;モデリングと演出とライティングを全部シェーダーで実装しました！&lt;a href=&#34;https://t.co/lwg0xVcm3J&#34;&gt;https://t.co/lwg0xVcm3J&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Unity3D?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Unity3D&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/HLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#HLSL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1141307844999778304?ref_src=twsrc%5Etfw&#34;&gt;2019年6月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ブログも更新しました🙏&lt;br&gt;全員の発表資料をまとめ！もあります。&lt;a href=&#34;https://t.co/TdiHF5jILF&#34;&gt;https://t.co/TdiHF5jILF&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Unity3D?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Unity3D&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/HLSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#HLSL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1141541272877850624?ref_src=twsrc%5Etfw&#34;&gt;2019年6月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;archeleeds-unityで遊べる背景シェーダーを作る&#34;&gt;@archeleeds「Unityで遊べる背景シェーダーを作る」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;KLab Tech Meetup #4&lt;br&gt;「Unityで遊べる背景シェーダーを作る」のスライドです&lt;a href=&#34;https://t.co/YyVB6gEhVk&#34;&gt;https://t.co/YyVB6gEhVk&lt;/a&gt;&lt;br&gt;拙いですが何かの参考になれば 🙇‍♂️&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt;&lt;/p&gt;&amp;mdash; リゼ (@archeleeds) &lt;a href=&#34;https://twitter.com/archeleeds/status/1141376228558983168?ref_src=twsrc%5Etfw&#34;&gt;2019年6月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;setchi-fancyscrollview-x-shader&#34;&gt;@setchi「FancyScrollView x Shader」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;スクロールビューでもシェーダー芸がしたい！&lt;br&gt;KLab TECH Meetup ＃4 で発表したスライドおよびサンプルコードです。&lt;br&gt;&lt;br&gt;GitHub: &lt;a href=&#34;https://t.co/WFqznn2vVM&#34;&gt;https://t.co/WFqznn2vVM&lt;/a&gt;&lt;br&gt;Google Slides: &lt;a href=&#34;https://t.co/TR5KBVmDUJ&#34;&gt;https://t.co/TR5KBVmDUJ&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/madewithunity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#madewithunity&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/gamedev?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#gamedev&lt;/a&gt; &lt;a href=&#34;https://t.co/zqECmup7Qi&#34;&gt;pic.twitter.com/zqECmup7Qi&lt;/a&gt;&lt;/p&gt;&amp;mdash; setchi (@setchi) &lt;a href=&#34;https://twitter.com/setchi/status/1141313091134562304?ref_src=twsrc%5Etfw&#34;&gt;2019年6月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ブログ更新しました &amp;gt; スクロールビューでもシェーダー芸がしたい！&lt;a href=&#34;https://t.co/5bNo2FlQqe&#34;&gt;https://t.co/5bNo2FlQqe&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/unity3d?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#unity3d&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/gamedev?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#gamedev&lt;/a&gt;&lt;/p&gt;&amp;mdash; setchi (@setchi) &lt;a href=&#34;https://twitter.com/setchi/status/1142779645751783425?ref_src=twsrc%5Etfw&#34;&gt;2019年6月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;20分シェーダーライブコーディング-by-kanetaaaaa&#34;&gt;20分シェーダーライブコーディング by @kanetaaaaa&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;昨日の勉強会の懇親会中に20分間のライブコーディングでシェーダーを作りました！&lt;br&gt;初めて人前でコーディングをしたんですが、めちゃくちゃ楽しかったです！！&lt;br&gt;&lt;br&gt;（当日動かなかったpmod修正済です&amp;hellip;）&lt;br&gt;差分&lt;br&gt;- q.x = abs(p.x ) - 10.;&lt;br&gt;+ q.x = abs(q.x ) - 10.;&lt;a href=&#34;https://t.co/LH3TT4YzSU&#34;&gt;https://t.co/LH3TT4YzSU&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt; &lt;a href=&#34;https://t.co/k61c3O2ZA1&#34;&gt;pic.twitter.com/k61c3O2ZA1&lt;/a&gt;&lt;/p&gt;&amp;mdash; かねた (@kanetaaaaa) &lt;a href=&#34;https://twitter.com/kanetaaaaa/status/1141480732180619264?ref_src=twsrc%5Etfw&#34;&gt;2019年6月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;先日の &lt;a href=&#34;https://twitter.com/hashtag/klab_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#klab_meetup&lt;/a&gt; の懇親会で行った20分のライブコーディング映像を公開しました！&lt;br&gt;実況解説は&lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; さんと&lt;a href=&#34;https://twitter.com/songofsaya_?ref_src=twsrc%5Etfw&#34;&gt;@songofsaya_&lt;/a&gt;さんです&lt;br&gt;突発ながら面白い実況で場を盛り上げてくださって非常に楽しかったです！&lt;br&gt;動画でもこの空間の楽しさが伝わると思うので是非ご覧ください！&lt;a href=&#34;https://t.co/1CDeXMfJlT&#34;&gt;https://t.co/1CDeXMfJlT&lt;/a&gt;&lt;/p&gt;&amp;mdash; かねた (@kanetaaaaa) &lt;a href=&#34;https://twitter.com/kanetaaaaa/status/1141987474824036353?ref_src=twsrc%5Etfw&#34;&gt;2019年6月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;これまでの人生で最高の勉強会でした！&lt;/p&gt;

&lt;p&gt;参加者も発表者もモチベーションがとても高く、終始ものすごい熱気に包まれていて、発表する側としても非常にやりやすかったです！&lt;/p&gt;

&lt;p&gt;勉強会のテーマがニッチすぎることから当初は参加枠を100名としていたのですが、告知開始から数時間後には満員となってしまったため、最終的に会場のキャパシティ上限の200名まで増枠することになりました。
これほど大人数の勉強会が実現されるとは思っておらず、世間のシェーダーへの関心の高さに驚きました。&lt;/p&gt;

&lt;p&gt;どの発表も尖った内容が満載だったのではないでしょうか。
シェーダーに対する理解がより深まり、興味が増したのであれば幸いです。&lt;/p&gt;

&lt;p&gt;ご参加いただいた皆さま、本当にありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2019-06-20-klab-tech-meetup4/live-coding-original.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-06-20-klab-tech-meetup4/live-coding.jpg&#34; alt=&#34;懇親会中のライブコーディングの様子&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;懇親会中のライブコーディングの様子&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mercari GDC 2019 報告会に登壇しました</title>
      <link>https://gam0022.net/blog/2019/04/03/mercari-gdc-2019/</link>
      <pubDate>Wed, 03 Apr 2019 23:41:14 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/04/03/mercari-gdc-2019/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mercaridev.connpass.com/event/123663/&#34;&gt;Mercari GDC 2019 報告会&lt;/a&gt;に登壇しました。&lt;/p&gt;

&lt;p&gt;私はレンダリング系セッションの紹介に加えて、Meetupはいいぞ！という話をしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;43f1a13c03944d5e8f36bf6b649566a5&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;発表中の写真です（&lt;a href=&#34;https://twitter.com/nkjzm/status/1113404837146685440&#34;&gt;@nkjzm さん提供&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2019-04-03-mercari-gdc-2019/presentation.jpg&#34; alt=&#34;発表の様子&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こちらは当日のTwitterの様子です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://togetter.com/li/1334523&#34;&gt;Mercari GDC 2019 報告会 まとめ #mercariGDC - Togetter&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;発表資料&#34;&gt;発表資料&lt;/h1&gt;

&lt;p&gt;自分以外の他の発表者の資料をまとめました。&lt;/p&gt;

&lt;h2 id=&#34;nkjzm-https-twitter-com-nkjzm-さん-写真でみるgdc2019とvrの最新情報&#34;&gt;&lt;a href=&#34;https://twitter.com/nkjzm&#34;&gt;@nkjzm&lt;/a&gt; さん「写真でみるGDC2019とVRの最新情報?!」&lt;/h2&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4cb12085fae64a1b8261c5efd1ac1391&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;liketableteninu-https-twitter-com-liketableteninu-さん-spatial-computingの未来に思いを馳せて&#34;&gt;&lt;a href=&#34;https://twitter.com/liketableteninu&#34;&gt;@liketableteninu&lt;/a&gt; さん「Spatial Computingの未来に思いを馳せて」&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/3BQHozzVZ0MGbv&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/NishoMatsusita/spatial-computing&#34; title=&#34;Spatial Computingの未来に思いを馳せて&#34; target=&#34;_blank&#34;&gt;Spatial Computingの未来に思いを馳せて&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/NishoMatsusita&#34; target=&#34;_blank&#34;&gt;NishoMatsusita&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;korinvr-https-twitter-com-korinvr-さん-gdc-に行ってきました&#34;&gt;&lt;a href=&#34;https://twitter.com/korinVR&#34;&gt;@korinVR&lt;/a&gt; さん「GDC に行ってきました」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日のスライドこちらです &lt;a href=&#34;https://t.co/cuDxK1DOJK&#34;&gt;https://t.co/cuDxK1DOJK&lt;/a&gt; ゆるく GDC の地理案内と、主に個人的に激熱だったインディーゲームのセッションの紹介をしました。お聞きくださった皆様ありがとうございました！ &lt;a href=&#34;https://twitter.com/hashtag/mercariGDC?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#mercariGDC&lt;/a&gt;&lt;/p&gt;&amp;mdash; こりん@VR (@korinVR) &lt;a href=&#34;https://twitter.com/korinVR/status/1113447575971975169?ref_src=twsrc%5Etfw&#34;&gt;2019年4月3日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;e-koma-https-twitter-com-e-koma-さん-ゲーム開発者から見たstadia&#34;&gt;&lt;a href=&#34;https://twitter.com/e__koma&#34;&gt;@e__koma&lt;/a&gt; さん「ゲーム開発者から見たSTADIA」&lt;/h2&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d307d0b7b9ac41d5b86055ca6e7ed1f7&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;ash-yanagisawa-https-twitter-com-ash-yanagisawa-さん-reality-is-complex-arの普及までの長い道のり&#34;&gt;&lt;a href=&#34;https://twitter.com/ash_yanagisawa&#34;&gt;@ash_yanagisawa&lt;/a&gt;さん「Reality is Complex ARの普及までの長い道のり」&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/Nm9XqHno5uAiXO&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/SatoshiYanagisawa1/reality-is-complex-ar-139467876&#34; title=&#34;Reality is Complex ARの普及までの長い道のり&#34; target=&#34;_blank&#34;&gt;Reality is Complex ARの普及までの長い道のり&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/SatoshiYanagisawa1&#34; target=&#34;_blank&#34;&gt;Satoshi Yanagisawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;ntaro-https-connpass-com-user-ntaro-さん-vrdcセッションとメーカームーブメントによるgdcの影響&#34;&gt;&lt;a href=&#34;https://connpass.com/user/ntaro/&#34;&gt;ntaro&lt;/a&gt;さん「VRDCセッションとメーカームーブメントによるGDCの影響」&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/bQiL0FWNbtFTYa&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/NakamuraTaro/vrdcgdc&#34; title=&#34;VRDCセッションとメーカームーブメントによるGDCの影響&#34; target=&#34;_blank&#34;&gt;VRDCセッションとメーカームーブメントによるGDCの影響&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/NakamuraTaro&#34; target=&#34;_blank&#34;&gt;NakamuraTaro&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;発表者が8人もいたのにそれぞれ自分の興味のある分野を紹介していて、&lt;br&gt;内容の重複がほとんど無かったのすごい  &lt;a href=&#34;https://twitter.com/hashtag/mercarigdc?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#mercarigdc&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1113439372072738826?ref_src=twsrc%5Etfw&#34;&gt;2019年4月3日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GDC2019で登壇しました &amp; iq先生にお会いしました</title>
      <link>https://gam0022.net/blog/2019/03/28/gdc2019/</link>
      <pubDate>Thu, 28 Mar 2019 09:06:34 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2019/03/28/gdc2019/</guid>
      <description>&lt;p&gt;先週（3/18〜3/22）、アメリカのサンフランシスコで開催された&lt;a href=&#34;https://gdc.tech.ubm.com/2019/&#34;&gt;GDC2019&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;GDCは初参加でしたが、スポンサーセッションで登壇したり、Unity本社でUnity Profilerのミーティングを行ったり、
Meetupに参加して海外のシェーダーやWebGLのエンジニアと交流したり、Stadiaの遅延を味わったりと、セッションの聴講だけでなく貴重な体験をたくさんできました！&lt;/p&gt;

&lt;h2 id=&#34;スポンサーセッションでの登壇&#34;&gt;スポンサーセッションでの登壇&lt;/h2&gt;

&lt;p&gt;Google と KLab の2社の合同セッション&lt;a href=&#34;https://schedule.gdconf.com/session/real-world-techniques-and-best-practices-for-optimizing-android-games-presented-by-google/865328&#34;&gt;Real-World Techniques and Best Practices for Optimizing Android Games&lt;/a&gt;で登壇しました。&lt;/p&gt;

&lt;p&gt;前半はGoogleのFrancescoさんが「Android Common Performance Pitfalls」というタイトルで「Androidのパフォーマンスチューニングのはまりどころ」を紹介しました。&lt;/p&gt;

&lt;p&gt;後半はKLabから私（&lt;a href=&#34;http://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt;）、&lt;a href=&#34;https://twitter.com/ohomagic&#34;&gt;@ohomagic&lt;/a&gt; さん、&lt;a href=&#34;https://twitter.com/hnw&#34;&gt;@hnw&lt;/a&gt; さんの3人で
「Continuous Profiling for Android Game Performance Optimization」というタイトルで「CI/CDと連携したモバイル（Android）向けUnity製ゲームの自動プロファイリングシステムの構築方法」について紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3月にサンフランシスコで開催される &lt;a href=&#34;https://twitter.com/hashtag/GDC2019?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GDC2019&lt;/a&gt; で登壇します！&lt;br&gt;&lt;br&gt;自動プロファイリングシステムによる&lt;br&gt;Unity製Androidゲームの継続的なパフォーマンスチューニングについて、&lt;br&gt;弊社KLabの取り組みをご紹介します😊&lt;a href=&#34;https://t.co/NEiOPRHKPe&#34;&gt;https://t.co/NEiOPRHKPe&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1097302593338933248?ref_src=twsrc%5Etfw&#34;&gt;2019年2月18日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;一応 Presenter です&lt;a href=&#34;https://twitter.com/hashtag/GDC19?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GDC19&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GDC2019?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GDC2019&lt;/a&gt; &lt;a href=&#34;https://t.co/Eq6pcDpKuN&#34;&gt;pic.twitter.com/Eq6pcDpKuN&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1107810588774686720?ref_src=twsrc%5Etfw&#34;&gt;2019年3月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;資料と動画は近日公開する予定ですので、乞うご期待ください！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;unity本社でunity-profilerのミーティング&#34;&gt;Unity本社でUnity Profilerのミーティング&lt;/h2&gt;

&lt;p&gt;Unity本社でProfilerを開発しているエンジニアと直に話す機会をいただきました！&lt;/p&gt;

&lt;p&gt;経緯としては、KLabがGDCでUnityのプロファイリングの自動化について発表したことがUnityの日本担当ディレクターの&lt;a href=&#34;https://twitter.com/pigeon6&#34;&gt;大前さん&lt;/a&gt;にも伝わって、突発的にMTGが決まりました。&lt;/p&gt;

&lt;p&gt;KLabを含めた2社のエンジニアがUnity Profilerの不満や困っている点や疑問点を開発者に伝えたり、質問に答えていただきました。&lt;/p&gt;

&lt;p&gt;開発体制などからUnityが本気でProfilerを改善しようとしている姿勢が伝わりましたし、開発中の新しいプロファイリング機能の画面のデモなどを見せていただくこともできました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;そういえば、昨日はUnity本社に入ることができました &lt;a href=&#34;https://t.co/FQE9XicF0u&#34;&gt;pic.twitter.com/FQE9XicF0u&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108801919328280576?ref_src=twsrc%5Etfw&#34;&gt;2019年3月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;shadertoy-meetup-webgl-meetup&#34;&gt;Shadertoy Meetup &amp;amp; WebGL Meetup&lt;/h2&gt;

&lt;p&gt;GDCは世界中のデベロッパーが一堂に会する場という側面もあり、会期中にたくさんのMeetupが開催されます。&lt;/p&gt;

&lt;p&gt;2つのMeetupに参加しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/ja-JP/San-Francisco-shadertoy/events/259451027/&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;19&lt;/sub&gt; San Francisco Shadertoy meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/ja-JP/Silicon-Valley-HTML5-WebGL-Meetup/events/258963508/&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;20&lt;/sub&gt; WebGL/WebVR at GDC!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shadertoy Meetupでは、尊敬するデベロッパーとたくさんお会いできて感動の連続でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Shadertoy Meetup (at &lt;a href=&#34;https://twitter.com/figmadesign?ref_src=twsrc%5Etfw&#34;&gt;@FigmaDesign&lt;/a&gt; in San Francisco, CA) &lt;a href=&#34;https://t.co/sn0p4r9oUr&#34;&gt;https://t.co/sn0p4r9oUr&lt;/a&gt; &lt;a href=&#34;https://t.co/jiZLwtyyHO&#34;&gt;pic.twitter.com/jiZLwtyyHO&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108195113866592262?ref_src=twsrc%5Etfw&#34;&gt;2019年3月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://shadertoy.com&#34;&gt;Shadertoy&lt;/a&gt;の創設者であり、世界的に&lt;a href=&#34;https://www.youtube.com/watch?v=_YWMGuh15nE&amp;amp;t=4s&#34;&gt;有名な 4K byte デモのElevated&lt;/a&gt;の作者であり、
数多くのレイマーチングの作品や知見を発信したりと、シェーダーコーディング界の伝説の人物である iq 氏とお会いすることができました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A photo with &lt;a href=&#34;https://twitter.com/iquilezles?ref_src=twsrc%5Etfw&#34;&gt;@iquilezles&lt;/a&gt; &lt;a href=&#34;https://t.co/QOBiNnS0vz&#34;&gt;pic.twitter.com/QOBiNnS0vz&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108196240582283266?ref_src=twsrc%5Etfw&#34;&gt;2019年3月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mrdoob/three.js/&#34;&gt;three.js&lt;/a&gt;の作者の mrdoob さんともお会いできました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Photo with &lt;a href=&#34;https://twitter.com/mrdoob?ref_src=twsrc%5Etfw&#34;&gt;@mrdoob&lt;/a&gt; and guys &lt;a href=&#34;https://t.co/NhMGXRoq5N&#34;&gt;pic.twitter.com/NhMGXRoq5N&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1109347535762579456?ref_src=twsrc%5Etfw&#34;&gt;2019年3月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://madebyevan.com/webgl-water/&#34;&gt;WebGL Water&lt;/a&gt;で有名な Evan さんともお会いできました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Photo with &lt;a href=&#34;https://twitter.com/evanwallace?ref_src=twsrc%5Etfw&#34;&gt;@evanwallace&lt;/a&gt; 🤝 &lt;a href=&#34;https://t.co/qCTfHAtkbk&#34;&gt;pic.twitter.com/qCTfHAtkbk&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108239451002527744?ref_src=twsrc%5Etfw&#34;&gt;2019年3月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Shadertoy Meetupでは、iq先生による直伝のレイマーチング講座もありました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Live raymarching coding by &lt;a href=&#34;https://twitter.com/iquilezles?ref_src=twsrc%5Etfw&#34;&gt;@iquilezles&lt;/a&gt; &lt;a href=&#34;https://t.co/BPtUc4lcYC&#34;&gt;pic.twitter.com/BPtUc4lcYC&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108197363355521024?ref_src=twsrc%5Etfw&#34;&gt;2019年3月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;他にも自分のシェーダーの解説を交えた自己紹介タイムもありました。見たことがあるシェーダーの作者が目の前にいる！！という感動体験をしました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;自分のShaderを解説するタイム &lt;a href=&#34;https://t.co/t8LJILE8Iz&#34;&gt;pic.twitter.com/t8LJILE8Iz&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108207473242988544?ref_src=twsrc%5Etfw&#34;&gt;2019年3月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;WebGL/WebVR Meetupでもたくさんの方々と交流できました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;２つ目のパーティ (@ Gather in San Francisco, CA) &lt;a href=&#34;https://t.co/9hZBzeLtnW&#34;&gt;https://t.co/9hZBzeLtnW&lt;/a&gt; &lt;a href=&#34;https://t.co/Bidy2oHM6n&#34;&gt;pic.twitter.com/Bidy2oHM6n&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108571298383491072?ref_src=twsrc%5Etfw&#34;&gt;2019年3月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;写真を撮るのを忘れてしまいましたが、サンフランシスコのWebGLをつかった家の間取りをシュミュレーションするWebアプリを開発しているスタートアップのエンジニアや、
パストレーシングのデノイズをPh.Dで研究・日本への留学など経歴を経て、現在はとある企業で働いているエンジニア、A-FrameでWebAR作品をつくったりAndroidアプリを開発している気の良いおっちゃんなど、様々な方々と交流できました。&lt;/p&gt;

&lt;h2 id=&#34;expo&#34;&gt;EXPO&lt;/h2&gt;

&lt;p&gt;発表されたばかりのStadiaの遅延を体験しました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Stadiaでアサシンクリード遊んできた！！&lt;br&gt;&lt;br&gt;個人的には遅延はそんなに気にならなかったなぁ。対戦ゲームでも相手が同じだけ遅延してたら問題なさそうなレベルな気がする🤔 &lt;a href=&#34;https://twitter.com/hashtag/GDC19?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GDC19&lt;/a&gt; &lt;a href=&#34;https://t.co/eUfh0tNZHu&#34;&gt;pic.twitter.com/eUfh0tNZHu&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1109178878507929601?ref_src=twsrc%5Etfw&#34;&gt;2019年3月22日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;alt.ctrl.GDCの面白いゲームを体験したりしました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;椅子を入力インターフェースにした斬新なゲーム &lt;a href=&#34;https://twitter.com/hashtag/GDC19?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GDC19&lt;/a&gt; &lt;a href=&#34;https://t.co/iwAemqwGu4&#34;&gt;pic.twitter.com/iwAemqwGu4&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1109180096642834432?ref_src=twsrc%5Etfw&#34;&gt;2019年3月22日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;セッション&#34;&gt;セッション&lt;/h2&gt;

&lt;p&gt;レンダリングやレイトレ関連のセッションを中心に聞きました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ATAAは&lt;br&gt;前のフレームが使える時はTAA、&lt;br&gt;使えない時はFXAA、&lt;br&gt;メッシュのエッジの部分はレイトレーシングでスーパーサンプリングするハイブリット手法らしい。&lt;br&gt;&lt;br&gt;筋の良さそうな手法だなぁ。&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://twitter.com/hashtag/GDC19?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GDC19&lt;/a&gt; &lt;a href=&#34;https://t.co/0JhLYtT8Jg&#34;&gt;pic.twitter.com/0JhLYtT8Jg&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1109164831767040000?ref_src=twsrc%5Etfw&#34;&gt;2019年3月22日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;個人的に Math for Game Developers: Curves Revisited というベジェ曲線などについて深掘りしていくセッションが良かったです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;GDC2日目&lt;br&gt;&lt;br&gt;1発目はMath for Game Developers: Curves Revisited&lt;a href=&#34;https://t.co/njEArNFbLR&#34;&gt;https://t.co/njEArNFbLR&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@GDC登壇した (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1108053297762430977?ref_src=twsrc%5Etfw&#34;&gt;2019年3月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;mercari-gdc-2019-報告会&#34;&gt;Mercari GDC 2019 報告会&lt;/h2&gt;

&lt;p&gt;来週4/3の&lt;a href=&#34;https://mercaridev.connpass.com/event/123663/&#34;&gt;Mercari GDC 2019 報告会&lt;/a&gt;に発表者として参加します。&lt;/p&gt;

&lt;p&gt;面白かったセッション（レンダリングやレイトレ関連）の紹介や登壇したセッションの詳細については、この勉強会でお話しようと思っています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GLSL Compoに役立つ！GLSL Sandbox互換のVSCode拡張『Shader Toy』の紹介</title>
      <link>https://gam0022.net/blog/2018/12/24/vscode-glslsandbox/</link>
      <pubDate>Mon, 24 Dec 2018 23:59:59 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2018/12/24/vscode-glslsandbox/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://qiita.com/advent-calendar/2018/webgl&#34;&gt;WebGL Advent Calendar 2018&lt;/a&gt;の24日目の記事です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;みなさんはGLSL Sandboxのシェーダーをローカルで編集したりgitで管理したいと思ったことはありませんか？&lt;/p&gt;

&lt;p&gt;VSCodeの拡張機能の『Shader Toy』をインストールすれば簡単に実現できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=stevensona.shader-toy&#34;&gt;Shader Toy - Visual Studio Marketplace
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本拡張は&lt;a href=&#34;https://www.shadertoy.com/&#34;&gt;Shadertoy&lt;/a&gt;と&lt;a href=&#34;http://glslsandbox.com/&#34;&gt;GLSL Sandbox&lt;/a&gt;の互換性を備えており、
どちらのコードも修正なしにそのまま動作できます！&lt;/p&gt;

&lt;p&gt;WindowsとMacの両方に対応しています。&lt;/p&gt;

&lt;p&gt;次の画像は&lt;a href=&#34;https://nanka.hateblo.jp/entry/2018/12/13/080322&#34;&gt;Traveler2&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;kaneta&lt;/a&gt;（&lt;a href=&#34;http://tokyodemofest.jp/2018/&#34;&gt;Tokyo Demo Fest 2018&lt;/a&gt; GLSL Compo優勝作品）をVSCode上で動作させた様子です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-24-vscode-glslsandbox/traveler2-win.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-24-vscode-glslsandbox/traveler2-win.jpg&#34; alt=&#34;traveler2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;導入方法と使い方&#34;&gt;導入方法と使い方&lt;/h1&gt;

&lt;p&gt;導入方法と使い方は簡単です。&lt;/p&gt;

&lt;h2 id=&#34;導入方法&#34;&gt;導入方法&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-24-vscode-glslsandbox/install.png&#34; alt=&#34;install&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;拡張機能のウィンドウを開く&lt;/li&gt;
&lt;li&gt;「shadertoy」で検索&lt;/li&gt;
&lt;li&gt;インストールボタンを押す&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;GLSLのコードを編集した状態でコマンドパレットから「Shader Toy: GLSL Preview」を開くだけです。&lt;/p&gt;

&lt;p&gt;GLSLのコードを認識しないときは、「Shader Toy: GLSL Preview」を閉じてから再実行すると認識できる場合があります。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;※以降の内容はポエム・個人的なメモです。あまり有益な情報はありませんのでご注意ください。&lt;/p&gt;

&lt;h1 id=&#34;glsl-sandbox互換の理由&#34;&gt;GLSL Sandbox互換の理由&lt;/h1&gt;

&lt;p&gt;ところで、『Shader Toy』という名前なのに、なぜGLSL Sandboxにも対応しているのでしょうか？&lt;/p&gt;

&lt;p&gt;元々は Shadertoy互換の拡張だったのですが、次のPull Requestで私がGLSL Sandbox互換を追加しました💪&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stevensona/shader-toy/pull/37&#34;&gt;GLSLsandbox support by gam0022 · Pull Request #37 · stevensona/shader-toy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;拡張の名前から考えて、GLSL Sandbox互換の機能追加が受け入れられるか心配でしたが、爆速でマージしていただけました！
stevensonaさんありがとうございます🙏&lt;/p&gt;

&lt;h1 id=&#34;開発動機&#34;&gt;開発動機&lt;/h1&gt;

&lt;p&gt;Tokyo Demo Fest 2018のライブコーディングバトルの練習のために、
ローカル上で他人に見られないようにglslfanのコードを書きたいというのが開発の動機でした。&lt;/p&gt;

&lt;p&gt;ライブコーディングというのは、その場でコーディングを行うということです。
今回のライブコーディングバトルでは、4人の競技者が40分の制限時間内で、glslfan上でGLSLのシェーダーによる作品をつくりあげました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://glslfan.com/&#34;&gt;glslfan.com&lt;/a&gt;はdoxasさんが開発されているGLSL Sandbox互換のライブコーディングをリアルタイム配信するサイトです。
他人のシェーダコーディングをある程度リアルタイムに覗き見できることを特徴としています。
リアルタイムに配信する機能は素晴らしいのですが、ライブコーディングの練習をしている様子を一般公開したくなかったので、
ローカル上でGLSLのコードを編集できる環境を構築するために、「Shader Toy」拡張を改造しようと思いました。&lt;/p&gt;

&lt;h1 id=&#34;glsl-compo優勝者と準優勝者のお役に立てた&#34;&gt;GLSL Compo優勝者と準優勝者のお役に立てた&lt;/h1&gt;

&lt;p&gt;本家にPull Requestを送る前に&lt;a href=&#34;https://gist.github.com/gam0022/910bef95310f52995477dcb7bcc0467a&#34;&gt;改造版の拡張のインストール手順&lt;/a&gt;をTwitterで公開していました。&lt;/p&gt;

&lt;p&gt;その結果、GLSL Compoの1位と2位の方々に利用していただき、お役に立てたようで嬉しいです😆&lt;/p&gt;

&lt;p&gt;GLSL Compo1位のkanetaさんのツイート&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;法線求める時forでインライン展開押さえるのすご..&lt;br&gt;GLSL Grapherと&lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt;先生の拡張は僕もめっちゃ使いました!&lt;/p&gt;&amp;mdash; かねた (@kanetaaaaa) &lt;a href=&#34;https://twitter.com/kanetaaaaa/status/1074471599804301312?ref_src=twsrc%5Etfw&#34;&gt;2018年12月17日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;GLSL Compo2位のsetchiさんのツイート&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ブログ更新しました &amp;gt; &lt;a href=&#34;https://twitter.com/hashtag/TokyoFemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoFemoFest&lt;/a&gt; 2018 の GLSL Graphics Compo で2位入賞しました&lt;a href=&#34;https://t.co/XyntUxDCGD&#34;&gt;https://t.co/XyntUxDCGD&lt;/a&gt;&lt;/p&gt;&amp;mdash; setchi (@setchi) &lt;a href=&#34;https://twitter.com/setchi/status/1074469119481663489?ref_src=twsrc%5Etfw&#34;&gt;2018年12月17日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;VSCode 上で GLSL 環境を探していたときに、ちょうど gam0022 先生が GLSL Sandbox 互換の VSCode 拡張を公開していたのでありがたく使わせていただきました！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;ライブコーディングバトルで優勝できた&#34;&gt;ライブコーディングバトルで優勝できた&lt;/h1&gt;

&lt;p&gt;&lt;del&gt;本拡張をつかった練習の成果によって、&lt;/del&gt; ライブコーディングバトルで優勝しました😉&lt;/p&gt;

&lt;p&gt;こんな感じの作品をGLSLのシェーダーだけで40分でつくりました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;シェーダーライブコーディングバトルの優勝作品です！&lt;br&gt;ありがとうございました！&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/tdf2018?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tdf2018&lt;/a&gt;&lt;a href=&#34;https://t.co/MJwbIWFOMl&#34;&gt;https://t.co/MJwbIWFOMl&lt;/a&gt; &lt;a href=&#34;https://t.co/LVr2LYvUgi&#34;&gt;pic.twitter.com/LVr2LYvUgi&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1068782247711465472?ref_src=twsrc%5Etfw&#34;&gt;2018年12月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;（本当はを大会前日まで&lt;a href=&#34;https://gam0022.net/blog/2018/12/12/tdf2018/&#34;&gt;PC Demo Compoの作品制作をしていたので&lt;/a&gt;、ライブコーディングの練習はほとんどできませんでした😇）&lt;/p&gt;

&lt;p&gt;競技中に私の画面が真っ白になってしまい、
実況者（&lt;a href=&#34;https://twitter.com/h_doxas&#34;&gt;@h_doxas&lt;/a&gt;さん、&lt;a href=&#34;https://twitter.com/amagitakayosi&#34;&gt;@amagitakayosi&lt;/a&gt;さん）に「仕込んでますよ」「隠してますよ」「いやらしいですね」
と解説されていたのですが、本当は原因不明のバグで苦しんでいて頭も真っ白でした😨
終盤にバグの原因を突き止めてなんとか逆転優勝できました。&lt;/p&gt;

&lt;p&gt;参加者4人の作品を並べた動画はこちらです。
左上が&lt;a href=&#34;https://twitter.com/FMS_Cat&#34;&gt;@FMS_Cat&lt;/a&gt;さん、右上が&lt;a href=&#34;https://twitter.com/gyabo&#34;&gt;@gyabo&lt;/a&gt;さん、左下が&lt;a href=&#34;https://twitter.com/notargs&#34;&gt;@notargs&lt;/a&gt;さん、そして右下が私&lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt;の作品です。
どの作品もレベルが高くて、みんな凄すぎますね👏&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ライブコーティングバトルの最終成果物 &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/CpIWIhcqoH&#34;&gt;pic.twitter.com/CpIWIhcqoH&lt;/a&gt;&lt;/p&gt;&amp;mdash; kaiware style🌱 (@kaiware007) &lt;a href=&#34;https://twitter.com/kaiware007/status/1068777639333126144?ref_src=twsrc%5Etfw&#34;&gt;2018年12月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;IGN JAPAN様にライブコーディングバトルを含めたTDFの1日目の様子をご紹介いただきました。興味がある方は是非ご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.ign.com/event/31357/news/etokyo-demo-fest-2018&#34;&gt;eスポーツもゲーム開発もゲームエンジンも生み出したデモシーン！日本で唯一のデモシーンイベント「Tokyo Demo Fest 2018」レポ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;shadertoyとglsl-sandboxのマウスの違い&#34;&gt;ShadertoyとGLSL Sandboxのマウスの違い&lt;/h1&gt;

&lt;p&gt;開発する中でShadertoyとGLSL Sandboxのマウスの扱いの違いに苦しめられたので、後学のためにメモを残します。&lt;/p&gt;

&lt;p&gt;ShadertoyとGLSL Sandboxを相互に移植にする際などに参考にしてください。&lt;/p&gt;

&lt;p&gt;本拡張では以下のマウスの扱いの違いを考慮して実装しました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Shadertoy&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;GLSL Sandbox&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;uniform定義&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;uniform vec4 iMouse;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;uniform vec2 mouse;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;解説（日本語）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ピクセル座標系のマウス座標。&lt;br&gt;xy: 現在のマウス座標 (左クリック時に更新)&lt;br&gt;zw: マウスのクリック状態&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0〜1に正規化したマウス座標。&lt;br&gt;xy: 現在のマウス座標（毎フレーム更新）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Explanation（English）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mouse pixel coords. &lt;br&gt;xy: current (if MLB down), &lt;br&gt;zw: click&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mouse normalized coords. &lt;br&gt;xy: current&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;xyの値域&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0〜解像度&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0〜1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Tokyo Demo Fest 2018のDemo Compo優勝作品の解説（グラフィック編）</title>
      <link>https://gam0022.net/blog/2018/12/12/tdf2018/</link>
      <pubDate>Wed, 12 Dec 2018 09:49:52 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2018/12/12/tdf2018/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;http://qiita.com/advent-calendar/2018/klab&#34;&gt;KLab Engineer Advent Calendar 2018&lt;/a&gt;の12日目の記事です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;12月1日～12月2日に秋葉原で開催された&lt;a href=&#34;http://tokyodemofest.jp/2018/&#34;&gt;Tokyo Demo Fest 2018&lt;/a&gt;（以下、TDF）に参加しました。&lt;/p&gt;

&lt;p&gt;TDFは、日本国内で唯一のデモパーティです。
コンピュータを用いて作成された楽曲や映像作品をデモと呼び、
デモに関心のある人々が一堂に会してコンペティションを行ったり、技術を共有したりといったイベントをデモパーティと呼びます。&lt;/p&gt;

&lt;p&gt;今年のTDFでは、さだきちさん（&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;）とチームを組み、『WORMHOLE』（映像：gam0022 / サウンド：sadakkey）という作品を発表しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/tdf2018_collage_original.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/tdf2018_collage.jpg&#34; alt=&#34;WORMHOLE by gam0022 &amp;amp; sadakkey&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windows実行ファイル形式のデモ作品のコンペティションであるCombined Demo Compoにて、&lt;a href=&#34;http://tokyodemofest.jp/2018/results.txt&#34;&gt;本作品が1位&lt;/a&gt;に選ばれました！&lt;/p&gt;

&lt;p&gt;この記事では『WORMHOLE』の映像制作技術について解説します。
ソースコードを公開していますので、ご興味のある方はそちらもご確認いただければと思います（スターください！）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/unity-demoscene&#34;&gt;https://github.com/gam0022/unity-demoscene&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サウンド編についてはさだきちさんが解説されています。あわせてご覧ください！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://klabgames.creative.blog.jp.klab.com/archives/14415590.html&#34;&gt;Tokyo Demo Fest2018のDemo Compo優勝作品の解説〜サウンド編〜 : KLabGames Creative Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;作品の概要&#34;&gt;作品の概要&lt;/h1&gt;

&lt;p&gt;「ワームホールによる空間移動」をコンセプトとして、
不思議な球体がワームホールを介して非現実なデジタル空間と水平線の広がる自然空間を行き来する映像を制作しました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/NMNJV-Pbqtk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;不思議な球体がトンネルを進んでいくと、周囲を明滅する光がだんだんとモノクロからカラフルに変わっていきます。
トンネルの最奥にあるワームホールへ近づくほど明滅はだんだんと激しくなっていき、ホワイトアウトとともにワームホールを越えると、球体は海上に出現します。
その後、球体はじわじわと歪んでいき、戦闘機へと形を変えます。&lt;/p&gt;

&lt;p&gt;変形中の不思議な球体の上には、私が尊敬するデモシーナーの名前を表示しました。
これはグリーティングと呼ばれるデモシーンにおける慣習です。&lt;/p&gt;

&lt;p&gt;戦闘機はパーティクルを放ちながら海上を進み、パーティクルが一瞬だけTDFのロゴを形作ります。
そして戦闘機は元の球体に変形し、突如現れたワームホールに吸い込まれるようにして冒頭のトンネルのシーンに戻っていきます。&lt;/p&gt;

&lt;p&gt;実装ならびに制作にはUnityを利用しました。
詳細は後述しますが、Timeline, TextMeshPro, Chinemachine, PostProcessingStack v2といったUnity 2018.2の新機能も活用しています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;レンダリング&#34;&gt;レンダリング&lt;/h1&gt;

&lt;p&gt;映像の大部分は&lt;a href=&#34;https://www.slideshare.net/shohosoda9/threejs-58238484&#34;&gt;レイマーチング&lt;/a&gt;で描画し、パーティクルやグリーティングのテキストなどのレイマーチングが苦手とする部分はラスタライザで描画するというハイブリッドなレンダリング方式を採用しました。&lt;/p&gt;

&lt;p&gt;なお、今回は制作期間が短かったため、レイマーチングのシェーディングにはUnity標準のディファードレンダリングを利用することにしました。
ディファードレンダリングにすることで、Gバッファの書き込みまでを実装すれば、それ以降のライティングの処理をUnityの標準のディファードレンダリングのシェーダーに任せることができます。
簡単に言ってしまえば、Unityでサポートされる全種類のライトやGI機能に対応するライティング処理をあえて自分で実装しなくて済むという、工数削減のメリットがあります。&lt;/p&gt;

&lt;p&gt;Unityでディファードレンダリングによるレイマーチングを実現するにあたり、
&lt;a href=&#34;https://twitter.com/hecomi&#34;&gt;@hecomi&lt;/a&gt;さんの&lt;a href=&#34;https://github.com/hecomi/uRaymarching&#34;&gt;uRaymarching&lt;/a&gt;を利用させていただきました。
uRaymarchingは距離関数とGバッファに値を書き込む部分を実装すれば、簡単にレイマーチングができる便利なシェーダーテンプレートです。&lt;/p&gt;

&lt;p&gt;他にも、鏡面反射による周囲の映り込みに、Unity標準のReflectionProbeを配置して実現しています。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;uRaymarchingとReflectionProbeによる反射と組み合わせる検証&lt;br&gt;中&lt;br&gt;&lt;br&gt;毎フレームCubemapを生成するくらいならレイトレで反射を計算したほうが速いと思っていたが、この例ならCubemapの解像度は16x16でも十分だし、Cubemapの方がポリゴンとの混在が容易なので、現実的な方法だと思う。 &lt;a href=&#34;https://t.co/sSX7WmVCEd&#34;&gt;pic.twitter.com/sSX7WmVCEd&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1003274796895895554?ref_src=twsrc%5Etfw&#34;&gt;2018年6月3日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;full-screen-quadの実装方法&#34;&gt;Full Screen Quadの実装方法&lt;/h2&gt;

&lt;p&gt;uRaymarchingの話に関連して、Full Screen Quadの実装方法について紹介します。&lt;/p&gt;

&lt;p&gt;uRaymarchingではCommandBufferでフルスクリーンQuadを表示させていましたが、
スクリプトによる制御は最小限にしてEditorモードの挙動を安定させたかったので、別のアプローチをとってみました。&lt;/p&gt;

&lt;p&gt;EditorツールでBoudingBoxを巨大にしてFrustum Cullingを無効にしたQuadを静的生成しました。&lt;/p&gt;

&lt;p&gt;これによって時々レイマーチング部分が動かないトラブルを回避できました。
また、本作品のようにFull Screen Quadが必要なレイマーチングのワールドが複数存在して、
時間によって切り替わる表現のためには、MeshRendererのenableの切り替えで制御できる単純な仕組みの方が好都合でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Unityで画面全体にレイマーチングをさせる最高のソリューションができた！&lt;br&gt;&lt;br&gt;CommandBufferを使う方法だとEditMode等の考慮が大変。&lt;br&gt;通常のQuadだとFrustum Cullingされて困る。&lt;br&gt;&lt;br&gt;そこで、BoudingBoxを拡張したQuadを事前生成して通常のMeshRendererで描画できるようにした。&lt;a href=&#34;https://t.co/Askoyvnq0X&#34;&gt;https://t.co/Askoyvnq0X&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1018214911367761920?ref_src=twsrc%5Etfw&#34;&gt;2018年7月14日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/unity-demoscene/pull/10&#34;&gt;RaymarchingQuadMeshCreator by gam0022 · Pull Request #10 · gam0022/unity-demoscene&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;トンネルのモデリング&#34;&gt;トンネルのモデリング&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/tunnel_original.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/tunnel.jpg&#34; alt=&#34;tunnel&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;トンネルはMenger spongeという有名なフラクタル図形をベースにしています。
回転のfoldのテクニックを利用して万華鏡のように見せたり、modをつかった図形の繰り返しのテクニックを適用しました。&lt;/p&gt;

&lt;p&gt;回転のfoldは次の記事で紹介しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2017/03/02/raymarching-fold/&#34;&gt;距離関数のfold（折りたたみ）による形状設計 | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上の4種類の画像はいずれも同じ距離関数によるトンネルの様子です。
パラメータを変化させることで形状や色などを演出に合わせて変更できるようにしました。&lt;/p&gt;

&lt;h1 id=&#34;海面のモデリング&#34;&gt;海面のモデリング&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/sea.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/sea.jpg&#34; alt=&#34;sea&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;海面は平面として衝突判定を行い、ノーマルマップだけで波が立っているように見せています。
こちらは以前にWebGLによって実装した『&lt;a href=&#34;https://gam0022.net/blog/2017/06/30/raymarching-kado/&#34;&gt;正解するカドの「カド」をレイマーチングでリアルタイム描画する | gam0022.net&lt;/a&gt;』と同じアプローチの軽量化方法です。&lt;/p&gt;

&lt;p&gt;ところで、上記の記事の作品と異なり、本作品ではLODを一切行っておりません。
カメラワーク的に海面に近づかないため、そもそもLODが必要なかったのと、
マーチングループ中でテクスチャのフェッチをするとUnityのシェーダーのコンパイルが激重になる現象を回避するためです。&lt;/p&gt;

&lt;p&gt;海面の質感は、Gバッファに書き込むパラメータの調整だけで再現しました。
ディファードレンダリングなので不透明オブジェクトとして当然ライティングされているのですが、どことなく海中を感じさせるような半透明の質感を擬似的に再現できたのではないかと思います。&lt;/p&gt;

&lt;h1 id=&#34;戦闘機のモデリング&#34;&gt;戦闘機のモデリング&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/plane.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/plane.jpg&#34; alt=&#34;plane&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;戦闘機は距離関数でモデリングしました。&lt;/p&gt;

&lt;p&gt;3つのBoxの大きさをcos/sin/abs等で調整しつつ、smoothminによるメタボールでBoxを融合することで、流線形のSFっぽい戦闘機をモデリングしました。&lt;/p&gt;

&lt;p&gt;また、フラグメントシェーダーの負荷軽減のために&lt;a href=&#34;http://i-saint.hatenablog.com/entry/2015/08/24/225254&#34;&gt;Object Space Raymarching&lt;/a&gt;を行いました。
Full Screen Quadを使わずに戦闘機と同じ大きさのSphereを配置し、Sphereのシェーダーでレイマーチングをしています。
上記の画像を拡大するとSphereのワイヤーフレームを確認できます。&lt;/p&gt;

&lt;h1 id=&#34;演出の実装&#34;&gt;演出の実装&lt;/h1&gt;

&lt;h2 id=&#34;textmeshproによるフォントのレンダリング&#34;&gt;TextMeshProによるフォントのレンダリング&lt;/h2&gt;

&lt;p&gt;フォントはプロシージャルではなくテクスチャを使用しています。
TextMeshProのEditorツールを利用して &lt;a href=&#34;https://www.fontspace.com/mixofx/azonix&#34;&gt;Azonix fontのデータ&lt;/a&gt;からSDFのフォントのアトラステクスチャを生成しました。&lt;/p&gt;

&lt;p&gt;生成したアトラステクスチャはTextMeshProのシェーダーでレンダリングしています。&lt;/p&gt;

&lt;p&gt;次のような簡単な文字の出現と消滅のエフェクトを、TextMeshProの標準シェーダーの一部を改造して実装しました。
この演出に関する解説を&lt;a href=&#34;https://qiita.com/advent-calendar/2018/unity2&#34;&gt;Unity #2 Advent Calendar 2018&lt;/a&gt;の19日目の記事で行いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gam0022/items/f3b7a3e9821a67a5b0f3&#34;&gt;[Unity] カスタムシェーダーでTextMeshProに独創的な演出を加える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;TextMeshPro シェーダー遊び その3&lt;a href=&#34;https://twitter.com/hashtag/unity3d?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#unity3d&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Unity?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Unity&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/creativecoding?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#creativecoding&lt;/a&gt; &lt;a href=&#34;https://t.co/bUJvfyDhBr&#34;&gt;pic.twitter.com/bUJvfyDhBr&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1056398353569697792?ref_src=twsrc%5Etfw&#34;&gt;2018年10月28日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;animation-track-vs-custom-track&#34;&gt;Animation Track vs Custom Track&lt;/h2&gt;

&lt;p&gt;UnityのTimelineではトラックを自作することができます（以降、自作トラックのことをCustom Trackと書きます）。&lt;/p&gt;

&lt;p&gt;Custom Trackの実装はそれなりに工数がかかります。
たとえば、クリップのパラメータを1つでも増やすと複数箇所に変更が発生します。
工数が限られている場合や試行錯誤しながら色々なパータンを作る場合には、Animation Trackでは実現できないのかを事前に確認することをおすすめします。&lt;/p&gt;

&lt;p&gt;本作品でも、基本的にはAnimation Trackを利用し、アニメーションでは制御できないTextMeshProの文字列指定においてのみCustom Trackを利用する方針としました。&lt;/p&gt;

&lt;h2 id=&#34;パーティクル&#34;&gt;パーティクル&lt;/h2&gt;

&lt;p&gt;パーティクルはUnityのParticleSystemを利用しました。&lt;/p&gt;

&lt;p&gt;次の画像はポストエフェクトとSkyboxをOFFにした状態でパーティクルをワイヤーフレーム表示したものです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/particle_discard.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/particle_discard.png&#34; alt=&#34;particle_discard&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;パーティクルの形状は5種類でしたが、パーティクル用のモデルは1種類しか用意しませんでした。
四角形のQuadをフラグメントシェーダーでdiscardして形状を変化させました。
すべてのパーティクルを1マテリアルで表現できるので、全パーティクルを1ドローコールで描画できました。&lt;/p&gt;

&lt;p&gt;4種類のパーティクルが当時に登場する演出では、Custom Vertex Streamsを用いてランダム値をシェーダーに渡し、シェーダーで形状の切り替えを行いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goisagi-517.hatenablog.com/entry/2018/05/15/011845&#34;&gt;【Unity】Shuriken Particle「Custom Vertex Streams」  - ゴイサギ日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ワームホールの実装&#34;&gt;ワームホールの実装&lt;/h2&gt;

&lt;p&gt;「ワームホールの中身だけ別の世界になる」演出にも戦闘機と同じObject Space Raymarchingの仕組みを利用しました。&lt;/p&gt;

&lt;p&gt;まずHoudiniでワームホールの八角形のポリゴンメッシュを作成しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/houdini.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/houdini.png&#34; alt=&#34;houdini&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この八角形のメッシュのシェーダーでObject Space Raymarchingを行えば、別の世界と繋がる演出ができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/gate.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2018-12-12-tdf2018/gate.jpg&#34; alt=&#34;gate&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ところが、カメラの原点からレイを進めると、別世界が3Dの立体映像のように飛び出してしまうという罠にハマってしまいました。
この問題はレイを物体の表面から進めることで回避できました。&lt;/p&gt;

&lt;p&gt;ワームホールの内側は現在の世界（上の画像では海の世界）のレイマーチングのシェーダーを無効にしたかったので、Stencilを利用しようとしたのですが、
UnityのディファードレンダリングではStencilの利用が制限されていました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/ja/current/Manual/SL-Stencil.html&#34;&gt;ShaderLab: ステンシル - Unity マニュアル&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;deferred レンダリングパスでレンダリングするオブジェクトのためのステンシル機能はいくらか制限されます。それらの 2 つのステージの間、シェーダーで定義されるステンシルステートは無視され、最終的なパスの間に考慮されるだけです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そこで、DepthテストとRenderQueueによる制御でStencilを代用しました。&lt;/p&gt;

&lt;h2 id=&#34;reflectionprobeの映り込みによる演出&#34;&gt;ReflectionProbeの映り込みによる演出&lt;/h2&gt;

&lt;p&gt;2回目のワームホール出現時（2:05〜）に海面が黒く侵食されていく演出があります。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/NMNJV-Pbqtk?start=125&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;これは、ワームホールの向こう側の景色がReflectionProbeに映り込み、Unityのライティング機能によって自動的に水面に反映された結果です。
意図的に演出したものではなく偶然の産物でしたが、気に入ったのでこのまま採用しました。&lt;/p&gt;

&lt;h2 id=&#34;揺らぎ&#34;&gt;揺らぎ&lt;/h2&gt;

&lt;!-- 直す --&gt;

&lt;p&gt;揺らぎは2箇所で利用しました。
単純でコストもかからない工夫ですが、効果は大きいと感じました。&lt;/p&gt;

&lt;p&gt;カメラにfbmノイズを加えて手ブレ感を出すことで臨場感が生まれました。&lt;/p&gt;

&lt;p&gt;それから、戦闘機をcos波で振り子のように左右に揺らしています。
戦闘機の動き自体はZ軸に直進するだけなのですが、機体の揺れとカメラワークによって旋回しているような雰囲気が出ているのではないでしょうか。&lt;/p&gt;

&lt;h1 id=&#34;音楽との同期方法&#34;&gt;音楽との同期方法&lt;/h1&gt;

&lt;h2 id=&#34;ビート単位でのシェーダー制御&#34;&gt;ビート単位でのシェーダー制御&lt;/h2&gt;

&lt;p&gt;シェーダーの入力をビートにし、演出を「ビート単位」で制御することで、映像と音楽を同期させました。
時間単位（秒単位）で制御するよりも、BPM変更に柔軟に対応できるというメリットがあります。&lt;/p&gt;

&lt;p&gt;秒数 &lt;code&gt;time&lt;/code&gt; を特定のBPM &lt;code&gt;bpm&lt;/code&gt; のビートに変換するには &lt;code&gt;beat = time * bpm / 60&lt;/code&gt; を計算します。&lt;/p&gt;

&lt;h2 id=&#34;カメラのカット切り替えやパーティクルの同期&#34;&gt;カメラのカット切り替えやパーティクルの同期&lt;/h2&gt;

&lt;p&gt;カメラのカットやパーティクルのエミットのタイミングといったシェーダーで制御していない部分は、
音楽に合わせてTimelineのクリップを手動で配置する必要がありました。&lt;/p&gt;

&lt;p&gt;こちらは音楽を120BPMで制作していただいたことで、かなり楽に解決できました。&lt;/p&gt;

&lt;p&gt;120BPMでは、1ビートが0.5秒となります。&lt;/p&gt;

&lt;p&gt;4分の4拍子であれば1小節の長さが2秒となるため、カメラのカット切り替えを2秒単位にすると音楽と映像が自然に同期します。
同様に、4分の3拍子であればカット切り替えを1.5秒単位にすればよいわけです。&lt;/p&gt;

&lt;p&gt;パーティクルは、エミット間隔を0.5秒ごとに設定することで音楽とタイミングを合わせています。&lt;/p&gt;

&lt;h1 id=&#34;来年の抱負&#34;&gt;来年の抱負&lt;/h1&gt;

&lt;p&gt;次はライティングに凝ってみたいです。&lt;/p&gt;

&lt;p&gt;物理ベースレンダリング（PBR）で攻めるのであれば今回のライティングはUnityに任せる作戦で正解だと思いますが、
非現実的なレンダリング（NPR）には対応できないので、ディファードレンダリングのライティングパスの独自実装などを調査したいです。&lt;/p&gt;

&lt;p&gt;他にも、Unityの新機能のScriptable Render Pipeline (SRP) や
High Definition Render Pipeline（HDRP）とレイマーチングを組み合わせる検証などもしてみたいです。&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;『WORMHOLE』の映像を作るための取り組みや手法について技術的な視点で解説しました。&lt;/p&gt;

&lt;p&gt;上記の通り、『WORMHOLE』の制作にはUnityの機能やライブラリを多く利用しています。
巨人の肩の上に立つことで表現の部分に注力でき、3週間弱という短い制作期間の中で完成度の高い作品に仕上げることができました。&lt;/p&gt;

&lt;p&gt;とはいえ、制作期間中は『WORMHOLE』を受け入れてもらえないのではと常に不安を感じていました。
デモシーンの世界ではゲームエンジンの機能に頼らない高度な実装力こそ評価されると思っていたからです。
そんな予想に反し、Unityで作成したデモ作品を高く評価していただけて大変光栄です。&lt;/p&gt;

&lt;p&gt;Unityには初心者～上級者まで様々なレベルの方を対象とした資料や教材があります。
『WORMHOLE』では使用しませんでしたが、たくさんのアセットも用意されています。
デモシーンに興味はあるもののハードルが高そうで踏みとどまっている方や、レンダリング技術の学習に挫折してしまった方に、Unityでもデモ作品を作成できることをお伝えしたいです。
また、日頃の業務でUnityを利用している方に、自分でも作れそうな身近なものとしてデモシーンに興味を持ってもらえれば嬉しいです。
『WORMHOLE』が新たなデモシーナーを生み出すきっかけとなれば幸いです。&lt;/p&gt;

&lt;p&gt;最後に、素晴らしいサウンドを生み出してくれたさだきちさんに感謝申し上げます。
チームでTDFに参加するのは今回が初めてでしたが、非常に良い経験をさせてもらいました。
自分の映像にかっこいい音楽が組み合わさった時の喜びや興奮は忘れられません！ありがとうございました！！&lt;/p&gt;

&lt;h1 id=&#34;関連情報&#34;&gt;関連情報&lt;/h1&gt;

&lt;h2 id=&#34;wormhole-を高画質で見るには&#34;&gt;『WORMHOLE』を高画質で見るには&lt;/h2&gt;

&lt;p&gt;下記の実行ファイルか動画ファイルをダウンロードしていただくと、エンコード前の綺麗な画質でご覧いただけます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://files.scene.org/view/parties/2018/tokyodemofest18/demo/wormhole.zip&#34;&gt;Windowsの実行ファイル&lt;/a&gt;（GTX1070以上のGPU推奨）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1GxyxjOyGBRcofMVKILmJtlmYaMZ5XoGx/view&#34;&gt;動画ファイル&lt;/a&gt;（ブラウザ上だとエンコードされた状態で再生されるのでダウンロードしてください）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wormhole-の感想をお待ちしております&#34;&gt;『WORMHOLE』の感想をお待ちしております！&lt;/h2&gt;

&lt;p&gt;pouet.netという世界中のデモ情報を集めたポータルサイトに作品を公開しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pouet.net/prod.php?which=79380&#34;&gt;pouet.net内の『WORMHOLE』のページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作品の感想をYouTubeやpouet.netでいただけると泣いて喜びます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>メガデモ勉強会!2018で発表しました</title>
      <link>https://gam0022.net/blog/2018/03/16/demoscene-study-session/</link>
      <pubDate>Fri, 16 Mar 2018 10:14:35 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2018/03/16/demoscene-study-session/</guid>
      <description>&lt;p&gt;3/10（土）に開催された&lt;a href=&#34;https://atnd.org/events/93843&#34;&gt;メガデモ勉強会! 2018&lt;/a&gt;で発表しました。&lt;/p&gt;

&lt;p&gt;発表タイトルは「もっと綺麗で写実的な絵作りをしたい！レイマーチング向けのシェーディング技術」です。&lt;/p&gt;

&lt;p&gt;発表の概要はこんな感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチングのおさらい&lt;/li&gt;
&lt;li&gt;レイマーチングでいい感じにシェーディングするための理論と実践

&lt;ul&gt;
&lt;li&gt;写実的なレンダリングに不可欠な &lt;strong&gt;大域照明&lt;/strong&gt; を説明&lt;/li&gt;
&lt;li&gt;大域照明を構成する間接照明を近似する &lt;strong&gt;AO&lt;/strong&gt; を説明&lt;/li&gt;
&lt;li&gt;レイマーチングによるAO計算の実装を図で解説&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レイマーチングによるマテリアル実装のベストプラクティスを紹介&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AOがどういう意味を持つのか、大域照明にどんな関係にあるのか、などを学んでいただけたら嬉しいです。
レイマーチングによるAO計算の動作原理を図で解説した日本語の資料は見たことが無いので、
この発表を聞いて「なるほどな」と思ってもらえれば幸いです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;74ea75d0686849238368f73150a7adba&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の発表資料です😇 &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%A1%E3%82%AC%E3%83%87%E3%83%A2%E5%8B%89%E5%BC%B7%E4%BC%9A?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#メガデモ勉強会&lt;/a&gt;&lt;a href=&#34;https://t.co/pxqSbH3DPl&#34;&gt;https://t.co/pxqSbH3DPl&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ😇 (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/972340970892111874?ref_src=twsrc%5Etfw&#34;&gt;2018年3月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;発表の紹介と感想&#34;&gt;発表の紹介と感想&lt;/h1&gt;

&lt;p&gt;自分以外の発表について、自分の感想を混じえながら紹介します。&lt;/p&gt;

&lt;h2 id=&#34;notargs-さんの-デモのためのunity講座&#34;&gt;@notargs さんの「デモのためのUnity講座」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日のメガデモ勉強会で発表した資料です&lt;a href=&#34;https://t.co/DStmEyNQ5a&#34;&gt;https://t.co/DStmEyNQ5a&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%A1%E3%82%AC%E3%83%87%E3%83%A2%E5%8B%89%E5%BC%B7%E4%BC%9A?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#メガデモ勉強会&lt;/a&gt;&lt;/p&gt;&amp;mdash; のたぐすキャット (@notargs) &lt;a href=&#34;https://twitter.com/notargs/status/972345507111616512?ref_src=twsrc%5Etfw&#34;&gt;2018年3月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;去年の末に&lt;a href=&#34;https://gam0022.net/blog/2017/12/25/unity-demoscene/&#34;&gt;Unityによるデモを作成&lt;/a&gt;を試みていたところだったので、参考になる情報がたくさんありました。&lt;/p&gt;

&lt;p&gt;音響にエフェクトをかけるための&lt;code&gt;OnAudioFilterRead&lt;/code&gt;で入力を無視して波形を作れば、プロシージャルに音楽も作れますね。
良いことを知りました。&lt;/p&gt;

&lt;h2 id=&#34;soma-arc-さんの-鏡映によるフラクタルとglslによる描画&#34;&gt;@soma_arc さんの「鏡映によるフラクタルとGLSLによる描画」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%A1%E3%82%AC%E3%83%87%E3%83%A2%E5%8B%89%E5%BC%B7%E4%BC%9A?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#メガデモ勉強会&lt;/a&gt; 「鏡映によるフラクタルとGLSLによる描画」で使用した資料を公開しました．本日はありがとうございました．&lt;a href=&#34;https://t.co/r3o3Rajbpn&#34;&gt;https://t.co/r3o3Rajbpn&lt;/a&gt;&lt;a href=&#34;https://t.co/wL36mO8d6e&#34;&gt;https://t.co/wL36mO8d6e&lt;/a&gt;&lt;/p&gt;&amp;mdash; 蘇摩 (@soma_arc) &lt;a href=&#34;https://twitter.com/soma_arc/status/972426826772434945?ref_src=twsrc%5Etfw&#34;&gt;2018年3月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ずっと聞いてみたかった内容でした。資料も説明も上手で理解しやすかったです。&lt;/p&gt;

&lt;p&gt;以前にブログで紹介した&lt;a href=&#34;https://gam0022.net/blog/2017/03/02/raymarching-fold/&#34;&gt;距離関数のfold&lt;/a&gt;に近いものを感じました。&lt;/p&gt;

&lt;p&gt;foldでは平面の鏡を使いましたが、この発表では円形の鏡を使うイメージだと理解しました。&lt;/p&gt;

&lt;p&gt;円の鏡映では、まず円形の鏡を配置します。すると鏡同士で相互に反射するので、合わせ鏡のように、映り込んだ円がさらに再帰的に別の円の鏡に映り込みます。反射の再帰の深度に応じて色をつけると、単純な円から美しい模様が生成できると理解しました。&lt;/p&gt;

&lt;p&gt;円の外にテクスチャを置いた例や、2D -&amp;gt; 3D に拡張した球の鏡による例も紹介されていました。&lt;/p&gt;

&lt;h2 id=&#34;fl1ne-さんの-tokyodemofestとfrontl1neのご紹介&#34;&gt;@FL1NE   さんの「TokyoDemoFestとFRONTL1NEのご紹介」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の発表資料です &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%A1%E3%82%AC%E3%83%87%E3%83%A2%E5%8B%89%E5%BC%B7%E4%BC%9A?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#メガデモ勉強会&lt;/a&gt; &lt;a href=&#34;https://t.co/NkgvYkD8eH&#34;&gt;https://t.co/NkgvYkD8eH&lt;/a&gt;&lt;/p&gt;&amp;mdash; ΓL1ИΞ@GDC2018 (@FL1NE) &lt;a href=&#34;https://twitter.com/FL1NE/status/972377117815009280?ref_src=twsrc%5Etfw&#34;&gt;2018年3月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Tokyo Demo Fest 2018 は10月〜11月に開催予定！&lt;/p&gt;

&lt;p&gt;Meet the Meatのパワーワード感がすごい！&lt;/p&gt;

&lt;h2 id=&#34;fms-cat-さんの-glslで音楽を作ります&#34;&gt;@FMS_Cat さんの「GLSLで音楽を作ります」&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;本日の勉強会で使ったサンプルコードおよびスライドです。 &lt;a href=&#34;https://t.co/tkAqql021E&#34;&gt;https://t.co/tkAqql021E&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%A1%E3%82%AC%E3%83%87%E3%83%A2%E5%8B%89%E5%BC%B7%E4%BC%9A?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#メガデモ勉強会&lt;/a&gt;&lt;/p&gt;&amp;mdash; JPEG Depression (@FMS_Cat) &lt;a href=&#34;https://twitter.com/FMS_Cat/status/972495648883752960?ref_src=twsrc%5Etfw&#34;&gt;2018年3月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;シェーダーで音楽を作ってみたいと思いながらも、音楽知識が0で諦めていた私のような人のための発表でした。&lt;/p&gt;

&lt;p&gt;資料も説明も素晴らしくて、素人の私でもすっと頭に入ってきました。&lt;/p&gt;

&lt;p&gt;「ステレオサウンド」「音量・音階・音色」「コード」のような基礎用語の説明がカバーされていて助かりました。
GLSLの実装を踏まえた説明だったので、よく知らない音楽の概念も理解できました。&lt;/p&gt;

&lt;p&gt;特に印象的だったのは楽器編成です。
sin波や矩形波といった単純な波形をベースにして、本物の楽器のような音色を作れることに感動しました。&lt;/p&gt;

&lt;p&gt;またコードを構成する音からランダムに音を選択し、オクターブもランダムに変化させることで、
ランダムながらかなり曲っぽい感じになることにびっくりしました（アルペジオ？）。&lt;/p&gt;

&lt;p&gt;音楽は諦めかけていましたが、この発表のおかげで自分で音楽を制作する道筋が見えました。
発表で使われたコードはGitHubでも公開されているので、実際にShadertoyで動かして理解を深めているところです。
素敵な発表ありがとうございました！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;勉強会から帰宅した後、FMS_Catさんの発表でオススメされていた「Moleman 2」という動画を家で見ました。
メガデモの起源から現在に至るまで、メガデモの歴史を1時間30分に凝縮された動画になっていて、デモシーナー必見の内容でした。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/iRkZcTg1JWU&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;さいごに&#34;&gt;さいごに&lt;/h1&gt;

&lt;p&gt;ずっと気になっていた内容を聞けて大満足でした。どの発表も資料も説明も分かりやすくて素晴らしかったです。
懇親会では、以前の自分の発表でレイマーチングを知って、卒業制作にレイマーチングを使ったという学生とお話しました。
自分の活動を通して何かを得た人もいるということに嬉しくなりました。&lt;/p&gt;

&lt;p&gt;メガデモ制作のモチベーションが高まってきたので、今年の10〜11月のTDFに向けて頑張りたいです！&lt;/p&gt;

&lt;p&gt;運営の方々、発表者の方々、会場を提供していただいたさくらインターネット様、ご参加いただいた方々、ありがとうございました！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ISUCON7予選で81位でした</title>
      <link>https://gam0022.net/blog/2017/10/30/isucon7q/</link>
      <pubDate>Mon, 30 Oct 2017 08:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2017/10/30/isucon7q/</guid>
      <description>&lt;p&gt;会社の同期（&lt;a href=&#34;https://twitter.com/kanetaaaaa&#34;&gt;@kanetaaaaa&lt;/a&gt;）とチーム「アロマゲドン」を結成して、ISUCON7予選に参加しました。
ISUCONは、お題となるWebサービスに対して、決められたレギュレーションの中で高速化を図るチューニングバトルです。&lt;/p&gt;

&lt;p&gt;チーム名のアロマゲドンは、TVアニメ『プリパラ』に登場する白玉みかんさんと黒須あろまさんの2人組アイドルユニットの名前をお借りしました。
本チームでは、白玉みかんさん役を私が、黒須あろまさん役をkanetaaaaaさん（以下、あろま）が務めました。&lt;/p&gt;

&lt;p&gt;予選結果は、&lt;a href=&#34;http://isucon.net/archives/50961437.html&#34;&gt;407チーム中81位で、最終スコアは46,461&lt;/a&gt;でした。
アプリのチューニングはある程度はできたのですが、&lt;code&gt;GET /icons&lt;/code&gt;の帯域問題に対処できなかったのが敗因でした。
来年の予選突破に向けて、反省と感想を残そうと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-10-23-isucon7q/score.png&#34; alt=&#34;score遷移&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;事前準備&#34;&gt;事前準備&lt;/h1&gt;

&lt;p&gt;私は過去にISUCON5に参加していますが、あろまはISUCON初参加だったため、ISUCON5の本戦用に私が用意したチートシートや&lt;a href=&#34;http://isucon.net/archives/50648750.html&#34;&gt;ISUCON夏期講習&lt;/a&gt;のスライドを読んで勉強してもらいました。&lt;/p&gt;

&lt;h2 id=&#34;過去問の対策&#34;&gt;過去問の対策&lt;/h2&gt;

&lt;p&gt;休日に会社に集まり、役割分担を意識しながらチームで問題を解く練習をしました。
&lt;a href=&#34;https://github.com/catatsuy/private-isu&#34;&gt;pixiv ISUCON&lt;/a&gt;はEC2のAMIが公開されており環境構築が簡単だったので、これを使って練習しました。&lt;/p&gt;

&lt;p&gt;pixiv ISUCONとISUCON7の予選問題は非常に似ていまいた。
どちらも初期実装ではアップロードされた画像をMySQLのDBに書き込んでおり、
この画像をDBから切り離してファイルに保存するようにして、nginx等で配信すれば、ぐっとスコアが伸びるような問題になっていました。&lt;/p&gt;

&lt;p&gt;予選前に公開された&lt;a href=&#34;http://isucon.net/archives/50927022.html&#34;&gt;レギュレーション&lt;/a&gt;に『複数台あるサーバーの役割の変更』という文言があり、
複数台構成は予想できていたので、pixiv ISUCONを2台のサーバにする練習もしました。
練習の構成では、1台のサーバに画像のアップロードと配信を行わせ、もう1台のサーバでその他の処理をさせるようにしました。
しかし、この構成は微妙らしく、1台のときよりスコアが下がりました。&lt;/p&gt;

&lt;p&gt;今思えば、この時に複数台構成の練習をちゃんとしていれば、予選のスコアはもっと伸びただろうという後悔しかありません。
予選では帯域がボトルネックだったので、複数のサーバで画像を配信する構成で練習するべきでした。
練習の方向性は間違っていなかったので、詰めが甘かったことを本当に後悔しています。&lt;/p&gt;

&lt;h2 id=&#34;ツールの整備&#34;&gt;ツールの整備&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KLab/myprofiler&#34;&gt;myprofiler&lt;/a&gt;: MySQLのプロファイラ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sonots/lltsv&#34;&gt;lltsv&lt;/a&gt;: ステータスコードごとのアクセスログの集計用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/firehol/netdata&#34;&gt;netdata&lt;/a&gt;: リソースモニタリング&lt;/li&gt;
&lt;li&gt;nginxのアクセスログをサマライズするスクリプト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後のアクセスログのサマライズは、あろまがいい感じにHTML出力とソート対応をしてくれました。&lt;/p&gt;

&lt;iframe style=&#34;width: 100%;height: 400px;&#34; src=&#34;https://gam0022.net/images/posts/2017-10-23-isucon7q/summary_log_init.html&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;ISUCON用にslackのグループを作って、上記のサマライズの結果をslackに投稿する仕組みを作りました。&lt;/p&gt;

&lt;h2 id=&#34;環境整備の仕込み&#34;&gt;環境整備の仕込み&lt;/h2&gt;

&lt;p&gt;当日の環境構築は私が担当することにしました。
まず最初にsshの設定をすることは明らかだったので、事前にあろまの公開鍵を教えてもらいました。&lt;/p&gt;

&lt;p&gt;環境設定用のリポジトリを作って、&lt;code&gt;.bashrc&lt;/code&gt; や &lt;code&gt;.vimrc&lt;/code&gt; を入れておきました。
本番環境の &lt;code&gt;.bashrc&lt;/code&gt; や &lt;code&gt;.vimrc&lt;/code&gt; からincludeする手順も確立しておきました。&lt;/p&gt;

&lt;p&gt;他にも役に立ちそうなシェルスクリプトやaliasを用意しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリとMySQLとnginxを一発で再起動するスクリプト&lt;/li&gt;
&lt;li&gt;プロファイリングツールを起動するコマンド&lt;/li&gt;
&lt;li&gt;複数のサーバにrsyncでコードをデプロイするスクリプト（担当：あろま）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ツール整備で紹介したmyprofilerやlltsvについては、
事前にバイナリをダウンロードして、環境設定用のリポジトリに突っ込んでおきました。&lt;/p&gt;

&lt;p&gt;最後に当日やることのリストの整備しておいて、当日の役割分担を打ち合わせしました。&lt;/p&gt;

&lt;h2 id=&#34;チームビルディング&#34;&gt;チームビルディング&lt;/h2&gt;

&lt;p&gt;プリパラのアニメや曲を鑑賞することで、チームの結束力を高めました。&lt;/p&gt;

&lt;h1 id=&#34;予選当日&#34;&gt;予選当日&lt;/h1&gt;

&lt;p&gt;当日の流れを振り返ります。&lt;/p&gt;

&lt;h2 id=&#34;初回ベンチマークまでの動き&#34;&gt;初回ベンチマークまでの動き&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;環境設定（担当：みかん）

&lt;ul&gt;
&lt;li&gt;sshの設定&lt;/li&gt;
&lt;li&gt;GitHubへの公開鍵設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bashrc&lt;/code&gt; と &lt;code&gt;.vimrc&lt;/code&gt;の仕込み&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サーバ構成の変更（担当：みかん）

&lt;ul&gt;
&lt;li&gt;3台のサーバのうち、mysqlのある3台目のサーバだけを使う1台構成に決定

&lt;ul&gt;
&lt;li&gt;今思うと致命的な判断ミス。ここで負けが決まってしまった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;1台目の2台目のサーバにPythonのアプリがあったので、それらを落とす&lt;/li&gt;
&lt;li&gt;3台目のサーバでRubyのアプリとnginxを起動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/isucon/isubata/webapp&lt;/code&gt; と &lt;code&gt;/etc&lt;/code&gt; をGit管理、リポジトリ作成（担当：みかん）&lt;/li&gt;
&lt;li&gt;MySQLのユーザ名とパスワードを調査（担当：あろま）

&lt;ul&gt;
&lt;li&gt;事前に用意していたMySQL関係のaliasでは、ユーザ名をrootでパスワードなしを前提としていて、動かずに困っていたが、これで解決&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;apt-get update（担当：あろま）&lt;/li&gt;
&lt;li&gt;vimやnetdataのインストール（担当：あろま）&lt;/li&gt;
&lt;li&gt;MySQLのバックアップ（担当：あろま）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;初期ベンチマークのスコアは6,134でした。&lt;/p&gt;

&lt;h3 id=&#34;重たいページ&#34;&gt;重たいページ&lt;/h3&gt;

&lt;p&gt;初期状態だとユーザのプロフィール画像の &lt;code&gt;GET /icons&lt;/code&gt; がボトルネックになっていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-10-23-isucon7q/summay_log_init.png&#34; alt=&#34;summay_log_init&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;重たいmysqlのクエリ&#34;&gt;重たいMySQLのクエリ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;GET /icons&lt;/code&gt; はimageテーブルの画像データを取り出すようになっており、それが反映されていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 209 SELECT * FROM image WHERE name = ?
  41 SELECT COUNT(*) as cnt FROM message WHERE channel_id = ?
  14 SELECT name, display_name, avatar_icon FROM user WHERE id = ?
   3 SELECT * FROM haveread WHERE user_id = ? AND channel_id = ?
   1 INSERT INTO haveread (user_id, channel_id, message_id, updated_at, created_at) VALUES (?, ?, ?, NOW(), NOW()) ON DUPLICATE KEY UPDATE message_id = ?, updated_at = NOW()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;前半のチューニング&#34;&gt;前半のチューニング&lt;/h2&gt;

&lt;p&gt;これらチューニングで、初期スコアの6,134から最終スコアの46,461前後になりました。&lt;/p&gt;

&lt;!--
- nginxのworker_connections 1024 にしたら、スコアが3,000前後に下がったので、リバート（担当：みかん）
--&gt;

&lt;ul&gt;
&lt;li&gt;MySQLのインデックス追加（担当：みかん）

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE message ADD INDEX channel_id(channel_id);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;imageテーブルの画像をファイルとして読み書きしてnginxで配信するように変更（担当：みかん）

&lt;ul&gt;
&lt;li&gt;pixiv ISUCONで予習済みだったため、すんなりとできた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;imageテーブルをDrop（担当：あろま）&lt;/li&gt;
&lt;li&gt;cssやjsなどの静的ファイルをnginxで配信。さらにgzip_staticで帯域の節約（担当：あろま）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /icons&lt;/code&gt;で304を返せるようにnginxのCache-Controlの設定（担当：あろま）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sfujiwara.hatenablog.com/entry/2017/10/23/123240&#34;&gt;上位チームでもすぐに気が付かなかった&lt;/a&gt; &lt;code&gt;Cache-Control: public&lt;/code&gt; を付けてくれた（超絶ナイス）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;stackprofというRubyのプロファイラを導入（担当：あろま）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /message&lt;/code&gt;が時々9秒など異常に遅いときがあるのに気がつく（担当：みかん）

&lt;ul&gt;
&lt;li&gt;N+1問題を解消&lt;/li&gt;
&lt;li&gt;パラメータのlast_message_idより新しい最新の100件のmessageを返していた&lt;/li&gt;
&lt;li&gt;MySQLで最新の100件を取得し、last_message_idによるフィルタリングはアプリ側で行うように修正&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;root@app2483:/etc$ cat /var/log/nginx/access.log | grep &amp;quot;/message&amp;quot; | lltsv -k reqtime,request,in,out | sort -n -r | head
reqtime:9.686    request:GET /message?channel_id=2&amp;amp;last_message_id=0 HTTP/1.1    in:673    out:52306
reqtime:4.825    request:GET /message?channel_id=2&amp;amp;last_message_id=0 HTTP/1.1    in:673    out:52306
reqtime:4.590    request:GET /message?channel_id=3&amp;amp;last_message_id=0 HTTP/1.1    in:677    out:50090
reqtime:3.017    request:GET /message?channel_id=10&amp;amp;last_message_id=11918 HTTP/1.1    in:678    out:18771
reqtime:3.000    request:POST /message HTTP/1.1    in:2904    out:0
reqtime:3.000    request:POST /message HTTP/1.1    in:1571    out:0
reqtime:2.964    request:POST /message HTTP/1.1    in:1502    out:152
reqtime:2.962    request:POST /message HTTP/1.1    in:1547    out:152
reqtime:2.960    request:POST /message HTTP/1.1    in:2113    out:152
reqtime:2.855    request:POST /message HTTP/1.1    in:1563    out:152
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;重たいページ-1&#34;&gt;重たいページ&lt;/h3&gt;

&lt;p&gt;nginxで画像を返すようにしても相変わらず &lt;code&gt;GET /icons&lt;/code&gt; がボトルネックになっていました。
キャッシュコントロールもしているのに、どうしてだろうと頭を抱えました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-10-23-isucon7q/summary_log_final.png&#34; alt=&#34;summary_log_final&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ステータスコードごとの集計でも304が最多でしたので、やはりキャッシュコントロールは正しく効いていそうでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lltsv -k status access.log.2017-10-22_20-42-27 | sort | uniq -c
5673 status:200
  91 status:204
6554 status:303
24765 status:304
  26 status:400
  52 status:403
   1 status:404
  13 status:409
   3 status:499
 108 status:500
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;試合後に気がついたのですが、画像の中身のハッシュ値からファイル名を決定していたので、同じファイル名の画像は更新されない仕様でした。
 反省点としては、同じ画像がアップロードされたら無視するようにするべきでした。
 そうすれば、画像のアップロード直後にも304を返せるので、さらに&lt;code&gt;/icons&lt;/code&gt;の帯域を節約できたのではないかと思います。&lt;/p&gt;

&lt;h3 id=&#34;重たいmysqlのクエリ-1&#34;&gt;重たいMySQLのクエリ&lt;/h3&gt;

&lt;p&gt;imageテーブルを排除し、明らかに危険なN+1は解消したので、メッセージ数のカウント等のクエリが上位になりました。&lt;/p&gt;

&lt;p&gt;既読を管理している&lt;code&gt;haveread&lt;/code&gt;はMySQLから離して、memcached等のメモリキャッシュシステムに載せることも考えましたが、練習してこなかったので諦めました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;40 SELECT COUNT(*) as cnt FROM message WHERE channel_id = ?
37 SELECT * FROM haveread WHERE user_id = ? AND channel_id = ?
 4 INSERT INTO message (channel_id, user_id, content, created_at) VALUES (?, ?, ?, NOW())
 3 INSERT INTO haveread (user_id, channel_id, message_id, updated_at, created_at) VALUES (?, ?, ?, NOW(), NOW()) ON DUPLICATE KEY UPDATE message_id = ?, updated_at = NOW()
 1 SELECT id FROM channel
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;netdata&#34;&gt;netdata&lt;/h3&gt;

&lt;p&gt;CPUの使用率が100%となっており、CPUを使い切っていることが分かりました。
ようやくCPUが1コアしかないことに気が付きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;isucon@app2483:~/isubata/webapp/ruby$  cat /proc/cpuinfo | grep processor
processor    : 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初はアプリ側のチューニングができた証拠のだろうと楽観的な解釈したのですが、
サーバ1台あたりのスペックがとても低く、複数台構成でないと勝てないのではないかという疑念が湧きはじめました。&lt;/p&gt;

&lt;p&gt;次に帯域に注目しました。
当日マニュアルによると『グローバルIP側の帯域は100Mbps』となっており、帯域も使い切っていることが分かりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-10-23-isucon7q/netdata_final.png&#34; alt=&#34;netdata_final&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;後半のチューニング&#34;&gt;後半のチューニング&lt;/h2&gt;

&lt;p&gt;残念ながら、ボトルネックの帯域に対する対策が何もできず、スコアに貢献できるアクションは何一つできずに終わりました。&lt;/p&gt;

&lt;p&gt;私のオペレーションミスでMySQLのデータを壊してしまい、
ベンチマークが通らなくなるなどのトラブルもありましたが、あろまにリストアして助けてもらいました。&lt;/p&gt;

&lt;p&gt;試合終了1時間前にベンチマーク対象のサーバを複数選択すると、並列にアクセスされることに気が付きましたが、
残り1時間で複数台構成への変更は危険だと判断して、最後まで1台構成にすることにしました。&lt;/p&gt;

&lt;p&gt;早い段階で複数台構成を考えていればと後悔ばかりです。&lt;/p&gt;

&lt;!--
- みかん : `statement.close`をコメントアウト（致命的ミス）
  - Rubyのmysql2に使い慣れておらず、`statement.close`を明示するのに見慣れていなかった
  - N+1問題が残っている状態だったら、毎回コネクションをクローズするのは良くないのかもと思っていた
  - これによってMySQLのコネクションが足りなくなる
  - Rubyの初期実装では `statement.close`が抜けている部分があったので、これを補うのか、mysql2-cs-bindに置き換えるのが正しい対処だった模様
--&gt;

&lt;p&gt;他のチームがスコアを伸ばす中、スコアが全く伸びないという焦燥感から冷静な判断力を失い、お互いの作業内容も把握できなくなっていました。&lt;/p&gt;

&lt;p&gt;私は&lt;code&gt;GET /history&lt;/code&gt;の中でレコード数の多いmessageに対して、&lt;code&gt;SELECT id FROM message WHERE channel_id = ? ORDER BY id DESC LIMIT ? OFFSET ?&lt;/code&gt;していて、大量のレコードを走査していそうだったので、これの対処を試みるもうまくいかずに時間を無駄にしただけでした。&lt;/p&gt;

&lt;h2 id=&#34;提出30分前&#34;&gt;提出30分前&lt;/h2&gt;

&lt;p&gt;試合終了30分前を目処に再起動のテストを行いました。&lt;/p&gt;

&lt;p&gt;不要なサービスをdisableして、nginxのアクセスログをOFFにしました。&lt;/p&gt;

&lt;p&gt;再起動テストを時間に余裕をもって取り組めたのは良かった点だと思います。&lt;/p&gt;

&lt;h1 id=&#34;反省&#34;&gt;反省&lt;/h1&gt;

&lt;p&gt;帯域問題に対応できなかった他にも反省点があります。&lt;/p&gt;

&lt;p&gt;試合終了後に発覚したのですが、レギュレーションをきちんと読まなかったために、スコアに関して非常に重大なポイントを見落としていました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;スコアは基本的に以下のルールで算出されます。&lt;/p&gt;

&lt;p&gt;成功したGETリクエスト数＋成功したPOSTリクエスト数×3＋受信したメッセージ件数&lt;/p&gt;

&lt;p&gt;「受信したメッセージ件数」とは、 GET /message が返したJSON内のメッセージ数です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;また&lt;a href=&#34;http://isucon.net/archives/50961706.html&#34;&gt;ISUCON7 予選問題の公開と解説&lt;/a&gt;に次のようにあります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;クライアントはGET /fetchをポーリングしていて、閲覧中のチャンネルに新着メッセージがある場合にはGET /messageを呼んで新着メッセージを受信します。GET /fetchのレスポンスをどんなに改善しても、新着メッセージがなければスコアは上がりません。閲覧中のチャンネルに新着メッセージが1件ある状態ですぐに返しても、GET /messageで1点とそこに含まれる1メッセージ分の1点で、2リクエストで2点しか稼ぐことができません。&lt;/p&gt;

&lt;p&gt;しかしGET /fetchをタイムアウトにならない範囲で遅くしてやると、GET /messageは1リクエストで数十件のメッセージを取得することができるので2リクエストで数十点を稼ぐ事ができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通常の1回のGETリクエストで1点しか稼げませんが、&lt;code&gt;GET /fetch&lt;/code&gt;を適切に遅くしてやると、1回の&lt;code&gt;GET /message&lt;/code&gt;で最大100点稼ぐことができました。&lt;/p&gt;

&lt;p&gt;我々のチームはこれに気が付きませんでした。
&lt;code&gt;GET /message&lt;/code&gt;のレスポンスサイズに注目すると、初期状態の46989.50877 byteから、チューニング後は9451.1263 byteに下がっていました。
初期状態で何件のメッセージを返せていたのか不明ですが、初期実装と比較して、1回の&lt;code&gt;GET /message&lt;/code&gt;の点数はおよそ1/5に落ちていたようです。&lt;/p&gt;

&lt;p&gt;ただし、検証した範囲内ではsleepを消したほうがスコアが上がりました。
Rubyのようにprefork型だとsleepでworkerが専有されてしまうからでしょうか。
ISUCONの問題は言語によって差が出ないものが多いですが、sleepに関しては言語による差があるように感じました。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;事前の打ち合わせ通りに作業を分担して、チームとして戦えた点は非常に良かったと思います。
事前準備のツールやスクリプトを本番で活用できたので、事前準備も成功だったと思います。&lt;/p&gt;

&lt;p&gt;帯域問題の複数台構成による解決は、チームのスキル的に難しかったので、今回のように諦めるのも戦略として間違いでは無かったと思っています。
とはいえ、冷静になればもう少しうまく対処できたような気もするので、ちょっと悔しいです。
最大の反省点はレギュレーションの読み込みの甘さです。次回は絶対に気をつけたいです。&lt;/p&gt;

&lt;p&gt;今年の問題はアプリのチューニングだけでは完結せずに、帯域の制約も対処する必要があって、インフラ側の知識や経験も要求されました。
言い訳っぽいですが、自分のようにクライアントがメインでサーバは片手間に触っているようなエンジニアだと厳しいものを感じました。&lt;/p&gt;

&lt;p&gt;個人的な意見になりますが、複数台構成や帯域制限のある構成だと、試合後に再現が困難なため復習しにくい気がします。
欲を言えば、EC2のAMIが公開されていて、特定のインスタンプタイプでインスタンスを作ればすぐに環境を再現できるような問題が嬉しいです。&lt;/p&gt;

&lt;p&gt;なんだか愚痴っぽくなってしまいましたが、ISUCONの練習や予選を通して得たものは多かったので、来年も是非参加したいです。
運営の方々、楽しいイベントをありがとうございました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#TokyoDemoFest 2017 の GLSL Graphics Compo で3位入賞！</title>
      <link>https://gam0022.net/blog/2017/02/24/tdf2017/</link>
      <pubDate>Fri, 24 Feb 2017 10:13:11 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2017/02/24/tdf2017/</guid>
      <description>&lt;p&gt;2017年2月18日(土)・19日(日)の2日間に開催された&lt;a href=&#34;http://tokyodemofest.jp/2017/&#34;&gt;Tokyo Demo Fest 2017&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;去年に引き続き、2回目の参加でした。去年の記事はこちらです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gam0022.net/blog/2016/02/24/tokyo-demo-fest/&#34;&gt;#TokyoDemoFest 2016 の GLSL Graphics Compo で3位入賞！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tokyo Demo Fest(TDF)とは、こんなイベントです（公式サイトからの引用）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tokyo Demo Fest は日本で唯一のデモパーティです。 デモパーティは、コンピュータを用いたプログラミングとアートに興味のある人々が日本中、世界中から一堂に会し、デモ作品のコンペティション(コンポ)やセミナーなどを行います。また、イベント開催中は集まった様々な人たちとの交流が深められます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今年は、なんと私の勤め先である&lt;a href=&#34;http://www.klab.com/jp/&#34;&gt;KLab株式会社&lt;/a&gt;もTDFにパートナーという形で参加させていただきました！
去年の様子を紹介したことをきっかけに、弊社内でデモシーンへの関心が高まりつつあり非常に嬉しいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;エナジータワー &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/O6dXOFwGXq&#34;&gt;pic.twitter.com/O6dXOFwGXq&lt;/a&gt;&lt;/p&gt;&amp;mdash; kemas_Ti(ｶﾌｪｲﾝファイター (@kemas306) &lt;a href=&#34;https://twitter.com/kemas306/status/832810497628004352&#34;&gt;2017年2月18日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;また、個人としては「Fusioned Bismuth」という作品でGLSL Graphics Compoで3位を頂くことができました！
自分の作品を多くの方に評価していただけて、大変嬉しいです！！ありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2017のGLSL Graphics Compoにて、昨年に引き続き3位をいただきました！嬉しいです！&lt;br&gt;せっかくなのでトロフィーを並べました（左が今年、右が去年）。 &lt;a href=&#34;https://t.co/In8QqliO1L&#34;&gt;pic.twitter.com/In8QqliO1L&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/833340442578071552&#34;&gt;2017年2月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2017のGLSL Graphics Compoにて3位をいただいた作品を個人サイト上に公開しました！上部のGLSL sandbox/Shadertoyボタンからフラグメントシェーダをご覧になれます。&lt;a href=&#34;https://t.co/ptqNTT73o3&#34;&gt;https://t.co/ptqNTT73o3&lt;/a&gt; &lt;a href=&#34;https://t.co/0gUwjLO9W1&#34;&gt;pic.twitter.com/0gUwjLO9W1&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/833703821935120384&#34;&gt;2017年2月20日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;今年のTDFも最高に楽しかったので、今から来年のTDFが待ちきれません。
まず、どのコンポも粒ぞろいの作品ばかりで、良い刺激を受けました。
セミナーでは、尊敬する&lt;a href=&#34;http://www.ci.i.u-tokyo.ac.jp/~hachisuka/&#34;&gt;東京大学の蜂須賀先生&lt;/a&gt;の「Parthenon Rendererの秘密」、&lt;a href=&#34;https://twitter.com/notargs&#34;&gt;!args(のたぐす)&lt;/a&gt;さんの「GLSL作曲講座」のお話や聞くことができました。
さらに多くの参加者とレイマーチングやCG技術について深い議論ができました。&lt;/p&gt;

&lt;p&gt;当日の様子については書きたいことがまだまだありますが、この記事では先ほど紹介した作品「Fusioned Bismuth」を解説していこうと思います。&lt;/p&gt;

&lt;h1 id=&#34;作品の概要&#34;&gt;作品の概要&lt;/h1&gt;

&lt;p&gt;作品のスクリーンショットです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/ufo.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/ufo.png&#34; alt=&#34;Fusioned Bismuth - UFO風の形状&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/snow.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/snow.png&#34; alt=&#34;Fusioned Bismuth - 雪の結晶&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/flesh.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/flesh.png&#34; alt=&#34;Fusioned Bismuth - 金属と生肉の融解&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「金属の生命体」をコンセプトに作成しました。&lt;/p&gt;

&lt;p&gt;次のリンクから、作品をWebブラウザ上で実際に動かすこともできます。&lt;/p&gt;

&lt;p&gt;ただ、負荷の高い処理を多用しているため、専用のGPUを搭載したPCでないと、フルスクリーンで動作させるのは厳しいです……。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gam0022.net/webgl/#raymarching_tdf2017&#34;&gt;Fusioned Bismuth | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/Msscz7&#34;&gt;Fusioned Bismuth | Shadertoy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GLSL Graphics Compoの当日の動画はこちらです(私の作品は10:45頃から開始します)。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/o3e7YFspIJ0?list=PLV3h8Uj9GgDPTzaXoD-Zkvf7VYVhVjMFM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;GLSL Graphics Compoは&lt;a href=&#34;http://glslsandbox.com/&#34;&gt;GLSL Sandbox&lt;/a&gt;上で動作する作品の部門です。
信じられないかもしれませんが、私の作品を含め、GLSLのフラグメントシェーダのみで実装されています。
使用しているテクスチャやモデルはすべてプロシージャルに生成しています。&lt;/p&gt;

&lt;h1 id=&#34;fusioned-bismuth-に使った技術-テクニック&#34;&gt;Fusioned Bismuth に使った技術・テクニック&lt;/h1&gt;

&lt;p&gt;「Fusioned Bismuth」で使ったテクニックを紹介します。&lt;/p&gt;

&lt;h2 id=&#34;レイマーチング&#34;&gt;レイマーチング&lt;/h2&gt;

&lt;p&gt;レイマーチング（別名 Sphere Tracing）とは、距離関数と呼ばれる数式で定義したシーンに対して、レイの衝突判定を行って絵を出す手法です。
技術的な詳細は、こちらの記事に書いてあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/shohosoda9/threejs-58238484&#34;&gt;シェーダだけで世界を創る！three.jsによるレイマーチング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;schottky-waltz-by-soma-arc&#34;&gt;「Schottky Waltz」 by @soma_arc&lt;/h3&gt;

&lt;p&gt;レイマーチングは、デモシーン界隈ではすっかり定着していて、GLSL Graphics Compoでも多く見かけられました。
おそらく10人中8人はレイマーチングを使っていたのではないでしょうか。&lt;/p&gt;

&lt;p&gt;そのような中、
&lt;a href=&#34;https://twitter.com/soma_arc&#34;&gt;@soma_arc&lt;/a&gt;さんはレイマーチングを全く使わない&lt;a href=&#34;https://www.shadertoy.com/view/XslyzH&#34;&gt;「Schottky Waltz」&lt;/a&gt;という2D作品を投稿し、見事にGLSL Graphics Compoの1位を獲得されていました！&lt;/p&gt;

&lt;p&gt;レイマーチングや3Dに頼らずとも、魅せ方によってこんなにもクールな表現ができるのか！と頭を殴られたような衝撃を受けました。&lt;/p&gt;

&lt;p&gt;レイマーチングはとても面白い手法ですが、一辺倒にならずにバランスが大切だなと痛感しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Schottky Waltz by soma_arc &lt;br&gt;GLSL Graphics Compo 1st Place on &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt; 2017 &lt;a href=&#34;https://t.co/X99zb8uGuA&#34;&gt;https://t.co/X99zb8uGuA&lt;/a&gt; &lt;a href=&#34;https://t.co/xhMf6hKtOJ&#34;&gt;pic.twitter.com/xhMf6hKtOJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; 蘇摩 (@soma_arc) &lt;a href=&#34;https://twitter.com/soma_arc/status/835468934040055808&#34;&gt;2017年2月25日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;GLSL Graphics Compo 1位の「Schottky Waltz」&lt;/p&gt;

&lt;h2 id=&#34;fold-折りたたみ-を使った形状設計&#34;&gt;fold（折りたたみ）を使った形状設計&lt;/h2&gt;

&lt;p&gt;本作品では、foldというテクニックを活用して、少し凝った距離関数を設計しています。
foldについては、去年のTDFで&lt;a href=&#34;https://twitter.com/gaziya5&#34;&gt;@gaziya5&lt;/a&gt;さんに教えていただきました。&lt;/p&gt;

&lt;p&gt;foldの詳細は別の記事としてまとめましたので、興味があればご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2017/03/02/raymarching-fold/&#34;&gt;距離関数のfold（折りたたみ）による形状設計 | gam0022.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;foldは面白いテクニックですが、使いこなすのが大変でした。
参考になる資料がほとんど無かったので、トライ・アンド・エラーを繰り返して、なんとか欲しい形に持っていきました。&lt;/p&gt;

&lt;p&gt;それでも苦労に見合うだけの強力なテクニックだと思いますので、もっと使いこなせるようになりたいですね。&lt;/p&gt;

&lt;h2 id=&#34;シェーディング関係&#34;&gt;シェーディング関係&lt;/h2&gt;

&lt;p&gt;綺麗にシェーディングを行うために、使えそうなテクニックは全部詰め込みました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ソフトシャドウ&lt;/li&gt;
&lt;li&gt;Ambient Occlusion&lt;/li&gt;
&lt;li&gt;環境マップ&lt;/li&gt;
&lt;li&gt;ハーフランバート&lt;/li&gt;
&lt;li&gt;ノーマルマップ（距離関数を衝突判定とシェーディングで使い分け）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ソフトシャドウ&#34;&gt;ソフトシャドウ&lt;/h3&gt;

&lt;p&gt;ソフトシャドウはデモシーン界隈では広く知られている手法を使いました。
以前に&lt;a href=&#34;https://speakerdeck.com/gam0022/reimatingudesohutosiyadou&#34;&gt;スライド&lt;/a&gt;を書いたので、もし興味のある方はご覧ください。&lt;/p&gt;

&lt;h3 id=&#34;ambient-occlusion&#34;&gt;Ambient Occlusion&lt;/h3&gt;

&lt;p&gt;Ambient Occlusionは、&lt;a href=&#34;http://gam0022.hatenablog.com/entry/raytracingcamp4&#34;&gt;レイトレ合宿で覚えた方法&lt;/a&gt;をそのまま流用しました。&lt;/p&gt;

&lt;h3 id=&#34;環境マップ&#34;&gt;環境マップ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/gam0022/items/18bb3612d7bdb6f4360a&#34;&gt;昨年度末にパストレーサーを開発した時&lt;/a&gt;、IBLを入れた途端に急激に雰囲気が良くなったことに味をしめて、本作品にも環境マップを取り入れました。
2Dのパーリンノイズをうまく3Dにマッピングすることで、空の環境マップを表現しています。
これにはmorgan3dさんの&lt;a href=&#34;https://www.shadertoy.com/view/4sKGWt&#34;&gt;Sky and Ground&lt;/a&gt;のコードをお借りしました。&lt;/p&gt;

&lt;h3 id=&#34;ハーフランバート&#34;&gt;ハーフランバート&lt;/h3&gt;

&lt;p&gt;普通にランバートシェーディングを行うと陰影がはっきりしすぎるので、&lt;code&gt;0.5 * diffuse + 0.5&lt;/code&gt; という式で補正しています。
この手法はハーフランバートと呼ばれます。
実装が簡単で処理も軽量なのに、ぐっと見た目が良くなります。&lt;/p&gt;

&lt;h3 id=&#34;ノーマルマップ-衝突判定とシェーディングで距離関数を使い分け&#34;&gt;ノーマルマップ（衝突判定とシェーディングで距離関数を使い分け）&lt;/h3&gt;

&lt;p&gt;生肉のような気持ち悪い質感のマテリアルの表面の凹凸には、衝突判定用とシェーディング用で距離関数を使い分ける軽量化の工夫を行いました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/normal.png&#34; alt=&#34;ノーマルマップを使ったマテリアル&#34; /&gt;&lt;/p&gt;

&lt;p&gt;レイマーチングでは通常数百回程度のマーチングループが必要で、マーチングループのたびに距離関数を評価しなければなりません。
そのため、距離関数が少しでも複雑になると、パフォーマンスが極端に悪化してしまいます。
本作品でも細かな凹凸を表現するために、雲に使用したものと同様のパーリンノイズを距離関数に組み込もうとしたのですが、パフォーマンスが非常に悪くなってしまいました。&lt;/p&gt;

&lt;p&gt;そこで、評価回数に基いて距離関数を使い分けることで、処理の軽量化を図りました。
まず、レイマーチングで使用する距離関数（複数回評価される）には、凹凸の無い処理の軽い距離関数を使用しています。
そして、一度しか評価されないシェーディング用の距離関数には、凹凸のある重たい距離関数を使用しています。&lt;/p&gt;

&lt;p&gt;このような使い分けは、&lt;a href=&#34;https://twitter.com/_Pheema_&#34;&gt;@_Pheema_&lt;/a&gt;さんに教えていただきました。&lt;/p&gt;

&lt;h3 id=&#34;雪のポストエフェクト&#34;&gt;雪のポストエフェクト&lt;/h3&gt;

&lt;p&gt;後半の雪が降るシーンは、スクリーンスペースのポストエフェクトで実現しました。そのため、実はカメラの動きが雪に追従していません。
このポストエフェクトには&lt;a href=&#34;https://www.shadertoy.com/view/ldsGDn&#34;&gt;baldand&lt;/a&gt;さんのコードをお借りしました。&lt;/p&gt;

&lt;h2 id=&#34;デバッグ用のglsl-sandbox互換システム&#34;&gt;デバッグ用のGLSL Sandbox互換システム&lt;/h2&gt;

&lt;p&gt;GLSL Graphics Compoでは、GLSL Sandbox上で動作する作品を提出します。
直接GLSL Sandbox上で開発することも可能ですが、開発中のデバッグを効率化するためにローカル環境で動くGLSL Sandbox互換システムを用意しました。&lt;/p&gt;

&lt;p&gt;このシステムには、再生位置のシーク機能や自由カメラモードが付いています。&lt;/p&gt;

&lt;p&gt;また、非常に雑な実装ですが、GLSL Sandbox/Shadertoy 用に加工した状態でシェーダをエクスポートする機能も実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/webgl-sandbox/pull/11&#34;&gt;Fusioned Bismuth (TokyoDemoFest GLSL Graphics Compo 3rd place)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;カメラワーク&#34;&gt;カメラワーク&lt;/h2&gt;

&lt;p&gt;カメラワークはゴリゴリとハードコーディングしました。&lt;/p&gt;

&lt;p&gt;カメラの座標とターゲットでカメラの動きを定義し、キーフレームで制御するようにしました。
シーン中に複数の頂点を配置し、頂点間を時間で補完しています。&lt;/p&gt;

&lt;p&gt;カメラワークをコード制御するのは初めてで、なかなか思った通りにカメラを動かせず苦労しました…。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/webgl-sandbox/blob/1a3f626ed4c5cfb6fedd69ea0feb93a4ea5324bb/raymarching_tdf2017.html#L529-L584&#34;&gt;cameraControl&lt;/a&gt;
関数でカメラ制御を行っているので、興味のある方はどうぞ（反面教師として）。&lt;/p&gt;

&lt;h3 id=&#34;shift-by-fms-cat&#34;&gt;「Shift」 by @FMS_Cat&lt;/h3&gt;

&lt;p&gt;カメラワークと言えば、Combined PC Demo Compoで1位を獲得された&lt;a href=&#34;https://twitter.com/FMS_Cat&#34;&gt;@FMS_Cat&lt;/a&gt;さんは、TDFのためにAutomatonというツールを開発されていました。GUIもフルスクラッチで開発されたそうで、完成度の高さに驚きます。
本格的にカメラワークを作り込むなら、このような土台となるツール作成が重要だなと改めて思いました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The Automaton playground! You can try Automaton Experience here!&lt;a href=&#34;https://t.co/1A3UaoJ0P6&#34;&gt;https://t.co/1A3UaoJ0P6&lt;/a&gt; &lt;a href=&#34;https://t.co/5pmk0VEUsq&#34;&gt;pic.twitter.com/5pmk0VEUsq&lt;/a&gt;&lt;/p&gt;&amp;mdash; FM Synthesis Cat (@FMS_Cat) &lt;a href=&#34;https://twitter.com/FMS_Cat/status/834037276921384960&#34;&gt;2017年2月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
Automaton&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/aLLiiPTfSBo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Combined PC Demo Compo 1位の「Shift」&lt;/p&gt;

&lt;h2 id=&#34;反省&#34;&gt;反省&lt;/h2&gt;

&lt;p&gt;今年は、技術的な知識が増えたお陰で、様々な手法を取り入れることができました。
一方で、カメラワークが遅かったり、いまいち盛り上がりにかけたりと、デモシーンとしては退屈な作品だったな、と会場の様子を見ていて反省しました。
デモシーンの作品には、ノリや勢いといった観る人を飽きさせない工夫も大切ですね。
来年は、観客が目を離せなくなるような魅力的な作品を出したいと思います！頑張ります！！&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;とにかくTDFは最高のイベントでした！&lt;/p&gt;

&lt;p&gt;Compoやセミナー、参加者との交流を含めて、どれも非常に楽しかったです！&lt;/p&gt;

&lt;p&gt;TDFを支えてくださったオーガナイサーの方々と参加者の方々に、この場をお借りして感謝申し上げます。ありがとうございました。&lt;/p&gt;

&lt;p&gt;デモシーンは面白い文化だと思うので、もっと多くの人が興味を持ってくださると嬉しいです。&lt;/p&gt;

&lt;p&gt;来年はどんなフレンズの作品に会えるかな？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2017-02-24-tdf2017/friends.png&#34; alt=&#34;どんなフレンズの作品に会えるかな？&#34; /&gt;
TDFのオープニングセレモニーの様子&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#TokyoDemoFest 2016 の GLSL Graphics Compo で3位入賞！</title>
      <link>https://gam0022.net/blog/2016/02/24/tokyo-demo-fest/</link>
      <pubDate>Wed, 24 Feb 2016 08:19:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2016/02/24/tokyo-demo-fest/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;2016-02-20〜21に開催された&lt;a href=&#34;http://tokyodemofest.jp/2016/&#34;&gt;Tokyo Demo Fest 2016&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;Tokyo Demo Festとは、このようなイベントです（公式ページからの引用）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tokyo Demo Fest は日本で唯一のデモパーティです。 デモパーティは、コンピュータを用いたプログラミングとアートに 興味のある人々が日本中、世界中から一堂に会し、 デモ作品のコンペティションやセミナーなどを行います。 また、イベント開催中は集まった様々な人たちとの交流が深められます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;私は&amp;rdquo;Carbon&amp;rdquo;という作品をGLSL Graphics Compoに提出して、3位入賞してきました！&lt;/p&gt;

&lt;p&gt;さらに、&lt;a href=&#34;threejs.org&#34;&gt;three.js&lt;/a&gt;の作者であり、&lt;a href=&#34;http://glslsandbox.com/&#34;&gt;GLSL Sandbox&lt;/a&gt;の作者でもある&lt;a href=&#34;http://mrdoob.com/&#34;&gt;Mr.Doob&lt;/a&gt;と握手してきました！&lt;/p&gt;

&lt;p&gt;今回が初参加でしたが、本当に最高のイベントでした！楽しかったです。
オーガナイザーのみなさん、参加者のみなさん、ありがとうございました！&lt;/p&gt;

&lt;p&gt;全体のレポートについては、&lt;a href=&#34;https://twitter.com/h_doxas&#34;&gt;@h_doxas&lt;/a&gt;さんの記事がとても分かりやすいです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;WebGL 総本山を更新しました ＞ 超ハイレベルな作品が入り乱れた Tokyo Demo Fest 2016！ 大興奮の２日間をレポート！ - WebGL 総本山 &lt;a href=&#34;https://t.co/ZeYrYoLiz2&#34;&gt;https://t.co/ZeYrYoLiz2&lt;/a&gt; &lt;a href=&#34;https://t.co/e3XFwpIrCD&#34;&gt;pic.twitter.com/e3XFwpIrCD&lt;/a&gt;&lt;/p&gt;&amp;mdash; h_doxas (@h_doxas) &lt;a href=&#34;https://twitter.com/h_doxas/status/701988774117376004&#34;&gt;2016, 2月 23&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;この記事では、GLSL Graphics Compoで発表した&amp;rdquo;Carbon&amp;rdquo;という作品の裏話と、個人的に印象に残った思い出などを話します。&lt;/p&gt;

&lt;h1 id=&#34;carbon-製作秘話&#34;&gt;Carbon 製作秘話&lt;/h1&gt;

&lt;p&gt;Compo（コンポ）とは、一定の制約の中で映像や音楽の作品を製作し、投票によって順位をつけるイベントです。&lt;/p&gt;

&lt;p&gt;今年のGLSL Graphics Compoでは、&lt;a href=&#34;http://glslsandbox.com/&#34;&gt;GLSL Sandbox&lt;/a&gt;上で動作する映像作品の順位を競いました。&lt;/p&gt;

&lt;p&gt;GLSL Sandboxで動作させるためには、フラグメントシェーダだけで作品を実装する必要があります。
当然ですが、立体データや画像データは読み込めないので、コードだけでなんとかする必要があります。&lt;/p&gt;

&lt;p&gt;私は&amp;rdquo;Carbon&amp;rdquo;というタイトルで作品を提出して3位入賞しました。
今年のGLSL Graphics Compoはレベルが高かったので、入賞できて嬉しかったです。&lt;/p&gt;

&lt;p&gt;コチラから動くデモをご覧になれます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shadertoy.com/view/MsG3Wy&#34;&gt;Shadertoy - Carbon [TDF2016] - Final Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://glslsandbox.com/e#30972.0&#34;&gt;GLSL Sandbox - Carbon - TDF Submited Version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--[Carbon](/images/posts/2016-02-24-tokyo-demo-fest/carbon-blue.png)--&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2016-02-24-tokyo-demo-fest/carbon-neo-blue.png&#34; alt=&#34;Carbon - Blue&#34; /&gt;
&lt;img src=&#34;https://gam0022.net/images/posts/2016-02-24-tokyo-demo-fest/carbon-neo-green.png&#34; alt=&#34;Carbon - Green&#34; /&gt;
&lt;img src=&#34;https://gam0022.net/images/posts/2016-02-24-tokyo-demo-fest/carbon-neo-red.png&#34; alt=&#34;Carbon - Red&#34; /&gt;
&lt;img src=&#34;https://gam0022.net/images/posts/2016-02-24-tokyo-demo-fest/carbon-neo-violet.png&#34; alt=&#34;Carbon - Violet&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;GLSL Compo に 「Carbon」という作品を出しました！&lt;a href=&#34;https://t.co/UOqE3FvFyW&#34;&gt;https://t.co/UOqE3FvFyW&lt;/a&gt;&lt;a href=&#34;https://t.co/JxkH3LtI4t&#34;&gt;https://t.co/JxkH3LtI4t&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/yfkJBzQllD&#34;&gt;pic.twitter.com/yfkJBzQllD&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@TDF最高だった (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/701327225224736768&#34;&gt;2016, 2月 21&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt; の &amp;quot;Carbon&amp;quot; の回路にglow効果をつけたのでスクショ撮り直した。Shadertoyにも反映。&lt;a href=&#34;https://t.co/zeIZhsc8zT&#34;&gt;https://t.co/zeIZhsc8zT&lt;/a&gt; &lt;a href=&#34;https://t.co/Q4UKTCfAsP&#34;&gt;pic.twitter.com/Q4UKTCfAsP&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@TDF最高だった (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/703612944903372800&#34;&gt;2016年2月27日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;私の「Carbon」が GLSL Compo で入賞しました👏&lt;br&gt;ありがとうございます！ &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt;&lt;a href=&#34;https://t.co/f7LoEYWzFq&#34;&gt;https://t.co/f7LoEYWzFq&lt;/a&gt; &lt;a href=&#34;https://t.co/SIel9DKA6n&#34;&gt;pic.twitter.com/SIel9DKA6n&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@TDF最高だった (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/701362103928487937&#34;&gt;2016年2月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;今回もレイマーチングによる作品です。&lt;/p&gt;

&lt;p&gt;距離関数（distance function）は、Mandelboxというフラクタル図形を mod でループさせただけなので、非常にお手軽です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;この作品は大会中に頑張って製作しました。製作期間はなんと1日です！
20日のお昼くらいに作り始めて、20日は徹夜で作業し、21日の13:00の提出期限のギリギリに間に合わせました。
提出期限5分前くらいまでバグが取れずにあたふたしていたのですが、なんとか提出できて本当に嬉しかったです。&lt;/p&gt;

&lt;p&gt;シェーダはデバッグが難しいので、バグを取るのはけっこう大変です…
今回も同名の変数を異なるスコープで宣言しているという単純なミスで30分くらい無駄にしました。みなさんは気をつけましょう…&lt;/p&gt;

&lt;p&gt;実は先週の &lt;a href=&#34;http://gam0022.net/blog/2016/02/16/glsl-tech/&#34;&gt;#GLSLTech&lt;/a&gt;の打ち上げの飲み会の際に、Mandelboxというフラクタル図形という名前を聞きました。
Mandelboxで何か作品を作るということ、完成図のイメージはだいたい決まっていたので、そこまで出戻りなどもなく、1日で完成にこぎつけることができました。&lt;/p&gt;

&lt;p&gt;わざと0.5秒おきにチカチカ点滅させてます。BPM120の曲を後ろで流すことを想定したためです。&lt;/p&gt;

&lt;h2 id=&#34;実装的な細かい話&#34;&gt;実装的な細かい話&lt;/h2&gt;

&lt;p&gt;実装的な細かい話をすると、&lt;a href=&#34;http://qiita.com/gam0022/items/03699a07e4a4b5f2d41f&#34;&gt;前回にレイマーチングで作成した&amp;rdquo;reflect&amp;rdquo;という作品&lt;/a&gt;では、
&lt;code&gt;sceneColor&lt;/code&gt;という最短距離にある物体表面の色を返す関数を実装をすることで、色分けを実現しました。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;reflect&amp;rdquo;では床も球体も全て同様に鏡面反射させたかったので、この方法で十分でした。&lt;/p&gt;

&lt;p&gt;今回の&amp;rdquo;Carbon&amp;rdquo;では物体ごとにシェーディングの挙動を切り替えることが必要でした。
背景のMandelboxは普通のPhongシェーディングを行い、空中に漂っている球体は鏡面反射というように、色だけでなく反射の挙動を物体ごとに制御する必要がありました。&lt;/p&gt;

&lt;p&gt;今回は衝突情報を&lt;code&gt;Intersect&lt;/code&gt;という構造体に格納して、衝突した物体に応じたMaterialに応じて、&lt;code&gt;Intersect.material&lt;/code&gt;にセットするようにしました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Intersect&lt;/code&gt;の定義はこうしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct Intersect {
	bool isHit;

	vec3 position;
	float distance;
	vec3 normal;

	int material;
	vec3 color;
};

const int CIRCUIT_MATERIAL = 0;
const int MIRROR_MATERIAL = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;マーチングループを抜けたあとのシェーディングを行うプログラムで、&lt;code&gt;Intersect.material&lt;/code&gt;を参照し、シェーディング方法を切り替えるような実装としました。
この方法により、色だけでなく、反射の挙動やシェーディングも物体ごとに制御することを実現しました。&lt;/p&gt;

&lt;p&gt;衝突情報を構造体に格納するというのは、ちょっと前につくった&lt;a href=&#34;http://qiita.com/gam0022/items/9875480d33e03fe2113c&#34;&gt;&amp;ldquo;gem&amp;rdquo;という作品&lt;/a&gt;からのアプローチからの継承です。
&amp;ldquo;gem&amp;rdquo;はレイトレーシングのGLSL実装作品ですが、レイマーチングにも応用できることを証明できました。&lt;/p&gt;

&lt;p&gt;ソースコードは可読性重視したので、なんとか読めるレベルになっていると思います。参考にしてください。&lt;/p&gt;

&lt;h2 id=&#34;カメラのデバッグ&#34;&gt;カメラのデバッグ&lt;/h2&gt;

&lt;p&gt;カメラのデバッグのために&lt;code&gt;THREE.OrbitControls&lt;/code&gt;を使いたかったので、three.jsで開発やデバッグしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gam0022.net/misc/raymarching/carbon_tdf2016.html&#34;&gt;Carbon - three.js版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただし、GLSLのエラーを見つけるためにGLSL sandboxにコピペするといったように、three.js製の自作システムと、GLSL sandboxを平行して使用しました。
GLSL sandboxと互換性を持たせるために、three.jsで開発したシステムはGLSL sandboxと互換のある&lt;code&gt;uniforms&lt;/code&gt;設計をしました。&lt;/p&gt;

&lt;p&gt;Mandelboxのいい感じに映し出すためのカメラの軌跡を見つけるのが大変でした。適当に動かすと、すぐにMandelboxの壁に衝突してしまうので…
MandelboxのScaleというパラメータを弄りつつ、直線で壁に衝突しない軌跡を発見できたのは、&lt;code&gt;THREE.OrbitControls&lt;/code&gt;のおかげです。&lt;/p&gt;

&lt;p&gt;他にもスクショをとるのにも、自作システムが役に立ちました。&lt;/p&gt;

&lt;p&gt;GLSL sandboxで清書する前に、まずは自作システムで下書きするという方法はオススメです。&lt;/p&gt;

&lt;h1 id=&#34;tdfで出会った-すごい人たち&#34;&gt;TDFで出会った、すごい人たち&lt;/h1&gt;

&lt;p&gt;コミュ症なので、普段はあんまり人に話しかけたりしないのですが、勇気を出して交流してみました。&lt;/p&gt;

&lt;p&gt;ここからは、TDF（Tokyo Demo Fest）で出会った人たちを紹介します。他己紹介はやったことがないので緊張しますね。&lt;/p&gt;

&lt;h2 id=&#34;doxasさん&#34;&gt;doxasさん&lt;/h2&gt;

&lt;p&gt;先週の&lt;a href=&#34;https://gam0022.net/blog/2016/02/16/glsl-tech/&#34;&gt;#GLSLTech&lt;/a&gt;につづいて、&lt;a href=&#34;https://twitter.com/h_doxas&#34;&gt;@h_doxas&lt;/a&gt;さんにお会いしました。&lt;/p&gt;

&lt;p&gt;doxasさんは、あの有名な&lt;a href=&#34;https://wgld.org/&#34;&gt;wgld.org&lt;/a&gt;や&lt;a href=&#34;https://webgl.souhonzan.org/&#34;&gt;WebGL 総本山&lt;/a&gt;の中の人です。&lt;/p&gt;

&lt;p&gt;wgld.orgはWebGLについて日本語で十分な情報が書かれている唯一のサイトといっても過言では無いでしょう。
しかも初心者でも分かるように、とても丁寧に分かりやすく解説されています。&lt;/p&gt;

&lt;p&gt;自分自身、&lt;a href=&#34;https://wgld.org/d/glsl/&#34;&gt;wgld.org&lt;/a&gt;を読んでレイマーチングを学びました。
また、TDFの存在はdoxasさんのTwitterを見て知りました。
もしdoxasさんがいなかったら、今の私はなかったと思います。
ありがとうございます！&lt;/p&gt;

&lt;p&gt;そんなdoxasさんの海をテーマにした&amp;rdquo;The Birth of&amp;hellip;&amp;ldquo;という作品はコチラ！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/tokyodemofest?src=hash&#34;&gt;#tokyodemofest&lt;/a&gt; で出品した WebGL のデモ上げました ＞ &lt;a href=&#34;https://t.co/EDxflYxDBF&#34;&gt;https://t.co/EDxflYxDBF&lt;/a&gt;&lt;/p&gt;&amp;mdash; h_doxas (@h_doxas) &lt;a href=&#34;https://twitter.com/h_doxas/status/701637606409379842&#34;&gt;2016年2月22日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;mr-doob&#34;&gt;Mr.Doob&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://threejs.org/&#34;&gt;three.js&lt;/a&gt;の作者であり、&lt;a href=&#34;http://glslsandbox.com/&#34;&gt;GLSL Sandbox&lt;/a&gt;の作者でもある&lt;a href=&#34;https://twitter.com/mrdoob&#34;&gt;Mr.Doob氏&lt;/a&gt;が、なんと、TDFのために来日していました！&lt;/p&gt;

&lt;p&gt;ちゃっかり記念撮影と握手させていただきました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/mrdoob&#34;&gt;@mrdoob&lt;/a&gt; と記念撮影！ &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt; &lt;a href=&#34;https://t.co/j1xwSKNamz&#34;&gt;pic.twitter.com/j1xwSKNamz&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ@TDF最高だった (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/702292595486040064&#34;&gt;2016, 2月 24&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;私は英語が怪しいので、あまりコミュニケーション取れませんでしたが、&lt;a href=&#34;https://twitter.com/yomotsu&#34;&gt;@yomotsu&lt;/a&gt;さんに助けていただきました。
yomotsuさんみたいにかっこ良く英語話せるようになりたいと本気で思いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mrdoob/three.js/pull/7860&#34;&gt;three.jsに今年初めにPRを送った&lt;/a&gt;ことを覚えてくださったようで、本当に嬉しかったです。めっちゃ優しい人でした。&lt;/p&gt;

&lt;p&gt;そんなMr.Doobのマントルをテーマにした作品&amp;rdquo;Broken Mantra&amp;rdquo;はコチラ！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hacked a quick demo with &lt;a href=&#34;https://twitter.com/Lornnn&#34;&gt;@Lornnn&lt;/a&gt;&amp;#39;s Broken Mantra for &lt;a href=&#34;https://twitter.com/TokyoDemoFest&#34;&gt;@TokyoDemoFest&lt;/a&gt;. Hope you like it! 😊 &lt;a href=&#34;https://t.co/UBqTlEURG9&#34;&gt;https://t.co/UBqTlEURG9&lt;/a&gt; &lt;a href=&#34;https://t.co/p68GiA06JT&#34;&gt;pic.twitter.com/p68GiA06JT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ricardo Cabello (@mrdoob) &lt;a href=&#34;https://twitter.com/mrdoob/status/701352090833129472&#34;&gt;2016年2月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;yomotsuさん&#34;&gt;yomotsuさん&lt;/h2&gt;

&lt;p&gt;yomotsuさんも#GLSLTechで先週お会いしたばかりでしたが、TDFでもお会いすることができました。&lt;/p&gt;

&lt;p&gt;中学生の時からyomotsuさんを知っていて、&lt;a href=&#34;http://www.yomotsu.net/wp/&#34;&gt;ヨモツネット&lt;/a&gt;には大変お世話になっていました。&lt;/p&gt;

&lt;p&gt;こんな形で出会えるなんて思っていなかったので、世の中なにがあるのか分かりませんね。&lt;/p&gt;

&lt;h2 id=&#34;fms-catくん&#34;&gt;FMS_Catくん&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/FMS_Cat&#34;&gt;FMS_CAT&lt;/a&gt;くんのWebGLによるデモも凄かったですね。Demo Compo2位作品です！&lt;/p&gt;

&lt;p&gt;特に最後のグリッチ効果が良い！グリッチ時の映像と音楽が完全に同期とれていてナイスですね。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;[ Type ] on YouTube!! &lt;a href=&#34;https://t.co/2Khdm3fpUb&#34;&gt;https://t.co/2Khdm3fpUb&lt;/a&gt;&lt;/p&gt;&amp;mdash; FMS_Cat (@FMS_Cat) &lt;a href=&#34;https://twitter.com/FMS_Cat/status/701925327883272192&#34;&gt;2016年2月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;音楽もWebGLのシェーダで生成して、WebAudioに波形データとして渡して再生しているそうです。&lt;/p&gt;

&lt;p&gt;映像はレイマーチングで生成して、フォント埋め埋め込むところに謎技術をつかってます。&lt;/p&gt;

&lt;p&gt;ちなみに、FMS_CatのFMSというのは学科名で、大学を背負って活動してるそうです！&lt;/p&gt;

&lt;h2 id=&#34;gaziyaさん&#34;&gt;gaziyaさん&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.shadertoy.com/user/gaz&#34;&gt;gaziya&lt;/a&gt;さんもヤバかったです。&lt;/p&gt;

&lt;p&gt;レイマーチングのテクニックについて、様々なお話を聞きました。&lt;/p&gt;

&lt;p&gt;foldによる点対称な物体の配置、一部の物体を消すことで不規則にreperationするテクニックを教えていただきました！&lt;/p&gt;

&lt;p&gt;gaziyaさんの&amp;rdquo;Dragon&amp;rdquo;は、GLSL Graphics Compoで見事に1位でした！&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://jsdo.it/blogparts/wXzq/js&#34;&gt;&lt;/script&gt;

&lt;p&gt;未だにこれがレイマーチングによる作品とは信じられません。&lt;/p&gt;

&lt;p&gt;レイマーチングでは形状を数式で表現するので、この龍のような有機的な形状を表現するのは、不可能だと思っていました。&lt;/p&gt;

&lt;p&gt;時間を見つけて、じっくりコードを研究させていただきます。&lt;/p&gt;

&lt;h2 id=&#34;soma-arcくん&#34;&gt;soma_arcくん&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/soma_arc&#34;&gt;soma_arc&lt;/a&gt;の作品はGLSL Graphics Compoで2位でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;はてなブログに投稿しました &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0?src=hash&#34;&gt;#はてなブログ&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/TokyoDemoFest?src=hash&#34;&gt;#TokyoDemoFest&lt;/a&gt;&lt;br&gt;TokyoDemoFest2016に参加しました - 心鏡曼荼羅&lt;a href=&#34;https://t.co/w5sAirKw9G&#34;&gt;https://t.co/w5sAirKw9G&lt;/a&gt; &lt;a href=&#34;https://t.co/A5tGW3evrf&#34;&gt;pic.twitter.com/A5tGW3evrf&lt;/a&gt;&lt;/p&gt;&amp;mdash; 蘇摩清良 (@soma_arc) &lt;a href=&#34;https://twitter.com/soma_arc/status/701753713266814977&#34;&gt;2016年2月22日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;少ししかお話しかできませんでしたが、レイマーチング若人が増えてきて、負けていられないなと焦りました。&lt;/p&gt;

&lt;h2 id=&#34;notargsくん&#34;&gt;notargsくん&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/notargs&#34;&gt;notargs&lt;/a&gt;は4月からスクエニで働く優秀な学生です。スクエニ羨ましすぎる！！&lt;/p&gt;

&lt;p&gt;彼のブラウン管風シェーダが本当にすごい。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;[Unity3D]ブラウン管風シェーダーを作った &lt;a href=&#34;https://t.co/9FIgyy528c&#34;&gt;https://t.co/9FIgyy528c&lt;/a&gt;&lt;br&gt;スキャンラインの速度と、残像の長さを指定できる機能を追加しました。&lt;a href=&#34;https://twitter.com/hashtag/unity3d?src=hash&#34;&gt;#unity3d&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/CRT?src=hash&#34;&gt;#CRT&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Shader?src=hash&#34;&gt;#Shader&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/%E3%83%96%E3%83%A9%E3%82%A6%E3%83%B3%E7%AE%A1%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%83%BC?src=hash&#34;&gt;#ブラウン管シェーダー&lt;/a&gt; &lt;a href=&#34;https://t.co/Som59KI8nl&#34;&gt;pic.twitter.com/Som59KI8nl&lt;/a&gt;&lt;/p&gt;&amp;mdash; !args (@notargs) &lt;a href=&#34;https://twitter.com/notargs/status/686752224391766016&#34;&gt;2016年1月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;さらに飲み会で話を聞くと、アルバイトであの1000万DLを突破したスマフォゲームのコアパートのプログラムを手がけていたそうで、格の違いを見せつけられました＞＜&lt;/p&gt;

&lt;h2 id=&#34;nikqさん&#34;&gt;nikqさん&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/h013&#34;&gt;hole&lt;/a&gt;さんの同僚の&lt;a href=&#34;https://twitter.com/nikq&#34;&gt;nikq&lt;/a&gt;さん。&lt;/p&gt;

&lt;p&gt;リアルタイムなパストレーシングのデモすごかったですね。激戦区のDEMO Compoで3位とってました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/964xXvOEVb&#34;&gt;https://t.co/964xXvOEVb&lt;/a&gt; &lt;a href=&#34;https://t.co/hKRspPsCUH&#34;&gt;https://t.co/hKRspPsCUH&lt;/a&gt;&lt;br&gt;pouetにsubmitしたら、間違えてpc64kにしちゃったよね &lt;a href=&#34;https://t.co/w5lIYufVt1&#34;&gt;pic.twitter.com/w5lIYufVt1&lt;/a&gt;&lt;/p&gt;&amp;mdash; nikq (@nikq) &lt;a href=&#34;https://twitter.com/nikq/status/701549075582160896&#34;&gt;2016年2月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;veloさん&#34;&gt;veloさん&lt;/h2&gt;

&lt;p&gt;スウェーデンの&lt;a href=&#34;https://www.facebook.com/approximate.demoscene/&#34;&gt;&amp;ldquo;Approximate&amp;rdquo;というデモグループ&lt;/a&gt;の音楽担当の&lt;a href=&#34;https://twitter.com/velo_aprx&#34;&gt;velo&lt;/a&gt;さん。&lt;/p&gt;

&lt;p&gt;打ち上げの席で一緒になりました。&lt;/p&gt;

&lt;p&gt;聞き間違えでなければ、全世界のデモイベントに参加していて、80回以上の参加しているとか！&lt;/p&gt;

&lt;p&gt;「Amigaは日本で有名か？」という質問には笑ってしまいました（TDFの参加者がAmiga大好きなのは何故なんだろう…）。&lt;/p&gt;

&lt;p&gt;また、Approximateのグラフィックプログラマーの&lt;a href=&#34;http://6octaves.blogspot.jp/2016/01/crypticapproximate.html&#34;&gt;Crypticさんのインタビュー記事&lt;/a&gt;を見せてくれました。&lt;/p&gt;

&lt;p&gt;（自分のひどい英語に根気よく付き合ってくださってありがとうございました＞＜）&lt;/p&gt;

&lt;h2 id=&#34;0x4015-yet11さん&#34;&gt;0x4015 &amp;amp; YET11さん&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;2nd stage BOSS&amp;rdquo;はDEMO Compo 1位の作品です。圧倒的なクオリティの作品です。&lt;/p&gt;

&lt;p&gt;0x4015さんが映像、YET11さんが音楽の作者さんです。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/SFoyJED5A4s&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;こんな凄まじい作品が4K部門なんて信じられないですね。&lt;/p&gt;

&lt;p&gt;残念なことに、0x4015さんもYET11さんにもお会いできませんでした。来年こそは是非お会いしたい！&lt;/p&gt;

&lt;h3 id=&#34;2nd-stage-bossはレイマーチング作品&#34;&gt;2nd stage BOSSはレイマーチング作品！？&lt;/h3&gt;

&lt;p&gt;この記事を執筆している途中で知ったのですが、&lt;a href=&#34;https://twitter.com/i_saint&#34;&gt;i_saint&lt;/a&gt;さんによると、レイマーチングで実装してるみたいですね。
i_saintさんが&lt;a href=&#34;https://t.co/4lr7GbTnFc&#34;&gt;&amp;ldquo;2nd stage BOSS&amp;rdquo;をGLSL Sandboxにポートしていて&lt;/a&gt;、たいへん驚きました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt; yes です。4k 作品はピクセルシェーダ以外に割く容量がほぼ無いのと、現状レイマーチが最も低容量で綺麗な 3DCG 出す方法なので、GLSL Sandbox とかにポート可能な作品も多いです。 (私もコードの具体的な内容は全然理解できてません！)&lt;/p&gt;&amp;mdash; i-saint (@i_saint) &lt;a href=&#34;https://twitter.com/i_saint/status/702862298600198144&#34;&gt;2016年2月25日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;さらに、Shadertoyにも移植されて、音楽まで含めて完全にWebGLで再現できるようになっていました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;So &lt;a href=&#34;https://twitter.com/i_saint&#34;&gt;@i_saint&lt;/a&gt; and I decompiled &amp;quot;Second stage BOSS&amp;quot;, extracted the shaders, and patched it for WebGL. Enjoy! &lt;a href=&#34;https://t.co/ezmkRsZ6J5&#34;&gt;https://t.co/ezmkRsZ6J5&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/shadertoy?src=hash&#34;&gt;#shadertoy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael Tedder (@_Falken) &lt;a href=&#34;https://twitter.com/_Falken/status/702863221409976321&#34;&gt;2016年2月25日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;また、&lt;a href=&#34;https://twitter.com/kioku_systemk&#34;&gt;kioku_systemk&lt;/a&gt;さんから、4KBプロシージャルGFXのテンプレートを教えていただきました。
このようなテンプレートがあれば、4Kデモのシェーダプログラムに集中できるので、素晴らしいですね。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/i_saint&#34;&gt;@i_saint&lt;/a&gt; &lt;a href=&#34;https://twitter.com/gam0022&#34;&gt;@gam0022&lt;/a&gt; 最近の向けの説明だとこっちの方が目的のものに近いかもです。 &lt;a href=&#34;https://t.co/ylBByZfESf&#34;&gt;https://t.co/ylBByZfESf&lt;/a&gt;&lt;/p&gt;&amp;mdash; kioku@TDF片付け (@kioku_systemk) &lt;a href=&#34;https://twitter.com/kioku_systemk/status/702877874462728192&#34;&gt;2016年2月25日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;GLSL sandboxへのportが可能であれば、逆に4Kのexeにもport可能なはずなので、来年のTDFでは4K Compoから出してもいいかな、とちょっと考えました。
しかし、自分には音楽をプロシージャルに作る技術は無いので、冷静に考えたら無謀でしたｗ&lt;/p&gt;

&lt;p&gt;せっかくシェーダのコードが公開されているので、研究させていただきます！&lt;/p&gt;

&lt;p&gt;大会が終わった後でも、こんなにもワクワクさせてくれるTDFは本当に最高ですね！&lt;/p&gt;

&lt;p&gt;いつか自分も、このくらいのデモを作れるようになりたいなぁ…（無理だなぁ）&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;興味の近い人と交流するのって、最高に楽しいですね！&lt;/p&gt;

&lt;p&gt;来年も参加するので、よろしくお願いしますm(_ _)m&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

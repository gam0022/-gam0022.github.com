<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/raymarching/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2021 gam0022</copyright>
    <atom:link href="/tags/raymarching/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>『Unityゲーム プログラミング・バイブル 2nd Generation』のレイマーチングとTimelineの章を執筆しました</title>
      <link>https://gam0022.net/blog/2021/06/08/unity-bible2/</link>
      <pubDate>Tue, 08 Jun 2021 10:30:19 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/06/08/unity-bible2/</guid>
      <description>&lt;p&gt;6/29発売の&lt;a href=&#34;https://amzn.to/3oe2agf&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』&lt;/a&gt;を執筆しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/Collage_Fotor.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/Collage_Fotor.jpg&#34; alt=&#34;『Unityゲーム プログラミング・バイブル 2nd Generation』&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;『Unityゲーム プログラミング・バイブル 2nd Generation』について、公式ページから紹介文を引用します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unityのゲーム開発現場で最も使われた決定版書籍が、大幅バージョンアップして登場!&lt;/strong&gt;
&lt;strong&gt;ゲームの開発現場で即実践できるスキルが身につく!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本書は、ゲーム開発で最も使われている「Unity」の入門や初級レベルを卒業した方向けの書籍です。ゲームの開発現場で、即実践できるスキルが身につくように、&lt;strong&gt;「37」の最新のトピックを網羅&lt;/strong&gt;しました。&lt;/p&gt;

&lt;p&gt;本書には、第一線の現場で活躍している23名の著者陣が参加しており、ゲーム開発のノウハウやTipsが満載されています。またほとんどのトピックでは、サンプルゲームがダウンロードでき、実際に動かしながら、実践的に学んでいくことが可能です。&lt;/p&gt;

&lt;p&gt;Unityでのゲーム開発のさまざまな場面で、すぐに役立つ1冊となっています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--
![Unityゲーム プログラミング・バイブル 2nd Generation](/images/posts/2021-05-27-unity-bible2/Collage_Fotor.jpg)
--&gt;

&lt;p&gt;37のトピックのうち、私は次の2つを担当しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチング：基礎から応用まで&lt;/li&gt;
&lt;li&gt;Timelineによる映像制作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事では私の担当した内容を簡単に紹介します。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;『Unityゲーム プログラミング・バイブル 2nd Generation 』を執筆しました！&lt;br&gt;6/29発売です！&lt;br&gt;&lt;br&gt;・レイマーチング：基礎から応用まで&lt;br&gt;・Timelineによる映像制作&lt;br&gt;&lt;br&gt;の2本を担当しました。&lt;a href=&#34;https://t.co/lYWIxseCON&#34;&gt;https://t.co/lYWIxseCON&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1392725305526161411?ref_src=twsrc%5Etfw&#34;&gt;May 13, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;レイマーチング-基礎から応用まで&#34;&gt;レイマーチング：基礎から応用まで&lt;/h1&gt;

&lt;div style=&#34;display: flex;&#34;&gt;
    &lt;div style=&#34;width: 50%;&#34;&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg&#34; alt=&#34;サンプル11 距離関数の応用：無限複製編&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;div style=&#34;width: 50%;&#34;&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg&#34; alt=&#34;サンプル13 距離関数の応用：無限複製とブーリアン演算の合せ技&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;!--
![サンプル11 距離関数の応用：無限複製編](/images/posts/2021-05-27-unity-bible2/11_RaymarchingOpRepeat.jpg)
![サンプル13 距離関数の応用：無限複製とブーリアン演算の合せ技](/images/posts/2021-05-27-unity-bible2/13_RaymarchingBoolean2.jpg)
--&gt;

&lt;p&gt;このセクションでは「レイマーチング」という手法により、グラフィックスを描画する仕組みを紹介しました。&lt;/p&gt;

&lt;p&gt;レイマーチングと似た名前の手法にレイトレーシングがありますが、どちらもレイ、つまり光線をプログラムでシミュレーションしてカメラに映る画像を生成する手法です。&lt;/p&gt;

&lt;p&gt;レイマーチングでは、距離関数という数式で定義した形状に対して、レイとの交差判定を行うことで照明や反射などの計算を行います。
そのため、通常のUnityの描画パイプラインではできないような表現が可能になるということが特徴です。&lt;/p&gt;

&lt;p&gt;このセクションでは、Unityのシェーダーのコードを記述してレイマーチングを実装します。
レイマーチングの基礎から応用まで解説するために、合計13個のサンプルシーンを用意しました。
少しずつ処理を加えることで、一歩ずつレベルアップしながら理解を深められるチュートリアル形式のサンプルシーンになっています。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトは、筆者のGitHubにて公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/UnityBible2-RaymarchingTutorial&#34;&gt;https://github.com/gam0022/UnityBible2-RaymarchingTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このセクションで学べることとそのポイントを、以下にまとめておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レイマーチングのアルゴリズムと本質

&lt;ul&gt;
&lt;li&gt;レイマーチングは魔法の道具ではなく、単なる衝突判定の手法&lt;/li&gt;
&lt;li&gt;数式（距離関数）によるプロシージャルなモデリング手法&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンピュータグラフィックスの基礎

&lt;ul&gt;
&lt;li&gt;レイマーチングが扱う範囲はあくまで衝突判定&lt;/li&gt;
&lt;li&gt;ライティングは通常のシェーダーとまったく同じように実装する必要がある&lt;/li&gt;
&lt;li&gt;Unityエンジンのシーンやライティング機能を利用せずに、グラフィックスを描画する一連の流れを学べるため、コンピュータグラッフィックスの学習教材としても有用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;執筆の裏話&#34;&gt;執筆の裏話&lt;/h2&gt;

&lt;p&gt;執筆の裏話としては作図にレイマーチングを利用しました。&lt;/p&gt;

&lt;p&gt;よくあるレイトレーシングの原理（スクリーン上のピクセルに対応する向きのレイを飛ばして交差判定）を解説するための図が欲しかったので、レイマーチングで作図しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;シェーダーは最強の作図ツールなので、&lt;br&gt;レイトレーシングの原理を説明するための図をUnityシェーダーだけで作りました。 &lt;a href=&#34;https://t.co/VuLBhoqEaY&#34;&gt;pic.twitter.com/VuLBhoqEaY&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1343070779961839617?ref_src=twsrc%5Etfw&#34;&gt;December 27, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ちゃんとアニメーションもできるように作り込んだのですが、書籍だと静止画になってしまうのが残念ですね。&lt;/p&gt;

&lt;h1 id=&#34;timelineによる映像制作&#34;&gt;Timelineによる映像制作&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/00_Top.jpg&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/00_Top.jpg&#34; alt=&#34;Timelineによる映像制作&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このセクションでは、Unityの&lt;a href=&#34;https://docs.unity3d.com/ja/2019.2/Manual/TimelineOverview.html&#34;&gt;Timeline&lt;/a&gt;を利用した映像作品の制作について解説しました。&lt;/p&gt;

&lt;p&gt;このセクションで学べる項目は、以下の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hecomi/uRaymarching&#34;&gt;uRaymarching&lt;/a&gt;を利用したレイマーチング&lt;/li&gt;
&lt;li&gt;Post-processing Stackの導入からビルトインエフェクトの利用、カスタムエフェクトの作成まで&lt;/li&gt;
&lt;li&gt;Timelineの基本からカスタムトラックの作成まで&lt;/li&gt;
&lt;li&gt;Cinemachineの基本的な使い方から、Post-processing Stackとの連携まで&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
このセクションのサンプルシーンは、以下の各バージョンで作成しています。

- Unity 2020.1.8f1
- uRaymarching: v2.1.1
- Post-processing Stack（v2）2.3.0
- Timeline 1.3.6
- Cinemachine 2.6.3
- TextMeshPro 3.0.3
- Unity Recorder 2.5.2
--&gt;

&lt;p&gt;映像の作成のためには、数多くのUnityの機能とAssetを組み合わせる必要があります。&lt;/p&gt;

&lt;p&gt;それぞれのUnityの機能とAssetにフォーカスを当てた合計12個のサンプルシーンを用意しました。
サンプルシーンはチュートリアル形式で、一歩ずつレベルアップしながら理解を深められるようになっています。&lt;/p&gt;

&lt;p&gt;サンプルプロジェクトは、筆者のGitHubで公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/UnityBible2-TimelineTutorial&#34;&gt;https://github.com/gam0022/UnityBible2-TimelineTutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-05-27-unity-bible2/12_BeatSync.gif&#34; alt=&#34;サンプル12 音楽と同期して演出をブラッシュアップ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;執筆の裏話-1&#34;&gt;執筆の裏話&lt;/h2&gt;

&lt;p&gt;これも執筆の裏話になりますが、&lt;strong&gt;デモのメイキングを書籍として出版する&lt;/strong&gt; という個人的な試みに今回はチャレンジしました。&lt;/p&gt;

&lt;p&gt;このツイートが伏線でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;RevisionのWriteup先には意外な &amp;quot;媒体&amp;quot; を予定しています&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1379103521409101826?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;サンプルの完成形のデモが『Secret stage BOSS』です。Revision2021のPC Demo Compoで初リリースしました。&lt;/p&gt;

&lt;p&gt;グラフィックスは私（&lt;a href=&#34;https://twitter.com/gam0022/&#34;&gt;@gam0022&lt;/a&gt;）、サウンドはさだきちさん（&lt;a href=&#34;https://twitter.com/sadakkey&#34;&gt;@sadakkey&lt;/a&gt;）が担当しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Secret stage BOSS&amp;quot; by &lt;a href=&#34;https://twitter.com/gam0022?ref_src=twsrc%5Etfw&#34;&gt;@gam0022&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/sadakkey?ref_src=twsrc%5Etfw&#34;&gt;@sadakkey&lt;/a&gt;&lt;br&gt;&lt;br&gt;Our new PC Demo for &lt;a href=&#34;https://twitter.com/hashtag/Revision2021?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Revision2021&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/revision_party?ref_src=twsrc%5Etfw&#34;&gt;@revision_party&lt;/a&gt;)&lt;br&gt;&lt;br&gt;It&amp;#39;s a Massive Greetings to &amp;quot;2nd stage BOSS&amp;quot; &lt;a href=&#34;https://t.co/vVWJJB4cyS&#34;&gt;pic.twitter.com/vVWJJB4cyS&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1378967812463501313?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;『Secret stage BOSS』は&lt;a href=&#34;https://youtu.be/SFoyJED5A4s&#34;&gt;『2nd stage BOSS by 0x4015&amp;amp;YET11』&lt;/a&gt;というデモシーン歴史に残る伝説級のデモのオマージュ作品です。&lt;/p&gt;

&lt;p&gt;自機やボスが登場するシューティングゲーム風のストーリーを、自分たちなりのビジュアルと音楽のスタイルで再現しました。&lt;/p&gt;

&lt;div class=&#34;movie-wrap&#34;&gt;
&lt;iframe width=&#34;1920&#34; height=&#34;1080&#34; src=&#34;https://www.youtube.com/embed/srO7IxNckZ8&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;GitHub上でUnityプロジェクトを丸ごと公開しているので、もし興味があれば参考にしてください。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;You can see the source code &amp;amp; Unity project on GitHub!&lt;br&gt;&lt;br&gt;ソースコードとUnityプロジェクトをGitHubで公開しました！&lt;a href=&#34;https://t.co/dQJV35DGKB&#34;&gt;https://t.co/dQJV35DGKB&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1378975301456130049?ref_src=twsrc%5Etfw&#34;&gt;April 5, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;6年前にレイマーチングと出会ってから、レイマーチングの面白さに魅せられ続け、レイマーチングに関するさまざまな情報を発信してきました。
今回、Unityの一般ユーザー向けの書籍でレイマーチングについて解説をする機会をいただけたことをとても光栄に思います。
これまでシェーダーと縁がなかった方にもシェーダーに興味をもってもらえれば幸いです。&lt;/p&gt;

&lt;p&gt;日本語で書かれたレイマーチングの入門情報はかなり充実してきましたが、その次のステップの情報が不足しているように感じていました。
本書ではレイマーチングの中級者向けの情報として、距離関数によるモデリングや本格的なライティングまで解説しました。
レイマーチングで球体のレンダリングはできたけど、その次のステップが分からないという方にぜひ読んでいただきたいです。&lt;/p&gt;

&lt;p&gt;本書は定価8580円と気軽に購入しづらいかもしれませんが、&lt;strong&gt;フルカラーの1112ページ、扱うテーマの広さ、得られる情報の密度&lt;/strong&gt;を踏まえると妥当（むしろお買い得！）な値段だと思います。
初版部数はAmazonでの予約数をもとに決まるそうなので、ぜひ&lt;a href=&#34;https://amzn.to/3oe2agf&#34;&gt;Amazonから予約&lt;/a&gt;をお願いします！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;リアルタイムレンダリング 第4版よりもページ数が多いことに気がついて驚いています。 &lt;a href=&#34;https://t.co/zJGUYOm8XL&#34;&gt;https://t.co/zJGUYOm8XL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1393040315762634755?ref_src=twsrc%5Etfw&#34;&gt;May 14, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows Terminalの背景でレイマーチング</title>
      <link>https://gam0022.net/blog/2021/03/08/raymarching-in-windows-terminal/</link>
      <pubDate>Mon, 08 Mar 2021 01:00:00 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2021/03/08/raymarching-in-windows-terminal/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2021-02-26-raymarching-in-windows-terminal/raymarching-in-windows-terminal.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2021-02-26-raymarching-in-windows-terminal/raymarching-in-windows-terminal.jpg&#34; alt=&#34;Raymarching in Windows Terminal&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windows Terminal 1.6から任意のHLSLのPixel Shadersを実行できるようになったので、Windows Terminalの背景でレイマーチングを実行してみました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Raymarching in Windows Terminal&lt;br&gt;&lt;br&gt;Windows Terminal 1.6 から任意の Pixel Shaders を実行できるようになったので、Windows Terminal の背景でレイマーチングを実行してみた🎉 これは楽しすぎる🤣 &lt;a href=&#34;https://t.co/WX2JqUZtuL&#34;&gt;pic.twitter.com/WX2JqUZtuL&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1361485111473045505?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;2021-02-16のツイート時点では、Windows Terminal 1.6はまだPreview版なので、GitHubのReleasesページから入手する必要がありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/releases/tag/v1.6.10412.0&#34;&gt;https://github.com/microsoft/terminal/releases/tag/v1.6.10412.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2021-03-07現在では、Windows Terminal 1.6からPreviewが外れてMicrosoft Storeから入手できるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/ja-jp/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab&#34;&gt;Windows Terminal を入手 - Microsoft Store ja-JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows TerminalのPixel Shaders機能の詳細については、公式ドキュメントをご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/tree/main/samples/PixelShaders&#34;&gt;https://github.com/microsoft/terminal/tree/main/samples/PixelShaders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;任意のHLSLのシェーダーのファイルを作成して、Windows Terminalのsettings.jsonの &lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; からHLSLファイルのパスを設定するだけで、気軽に任意のシェーダーを実行できます。素晴らしい！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;profiles&amp;quot;:
  {
    &amp;quot;defaults&amp;quot;:
    {
      &amp;quot;experimental.pixelShaderPath&amp;quot;: &amp;quot;C:\\Users\\gam0022\\Dropbox\\windows-terminal\\terminal\\samples\\PixelShaders\\Raymarching.hlsl&amp;quot;
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レイマーチング用のシェーダーはUnityで下書きしたものをWindows Terminal用に移植して実装しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Raymarching in Windows Terminal のシェーダーを公開しました。&lt;br&gt;&lt;br&gt;（シェーダー初心者にも優しい）日本語コメントつき！&lt;a href=&#34;https://t.co/GPEpIlHOyD&#34;&gt;https://t.co/GPEpIlHOyD&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1361495940356476929?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;HLSLのエラーの行番号が表示されないので、複雑なシェーダーを書くのはちょっと苦労しました。&lt;/p&gt;

&lt;p&gt;基本的にはUnityのShaderLab用のプロパティや &lt;code&gt;_LightColor0&lt;/code&gt; などのビルドインのシェーダー変数を定数（static const）として宣言する修正だけで移植できました。&lt;/p&gt;

&lt;p&gt;Windows Terminal用のPixel Shadersでは、以下のテクスチャのサンプラーや定数が定義されていました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// The terminal graphics as a texture
// ターミナルの文字などを含んだターミナルのレンダリング結果のサンプラー
Texture2D shaderTexture;
SamplerState samplerState;

// Terminal settings such as the resolution of the texture
cbuffer PixelShaderSettings {
  // The number of seconds since the pixel shader was enabled
  // 秒単位の時間
  float Time;

  // UI Scale
  // UIのスケール
  float Scale;
  
  // Resolution of the shaderTexture
  // ピクセル単位の背景の解像度
  float2 Resolution;
  
  // Background color as rgba
  // 背景の色
  float4 Background;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;shaderTexture&lt;/code&gt; はターミナルの文字などを含んだターミナルのレンダリング結果のサンプラーになるので、今回は背景に加算合成する形でシェーダーを実装しました（加算合成なので後からレイマーチングを加算しても結果は同じになるため、描画順を気にしなてくて良い）。&lt;/p&gt;

&lt;h1 id=&#34;hlslのホットリロードでシェーダーライブコーディング環境を実現&#34;&gt;HLSLのホットリロードでシェーダーライブコーディング環境を実現&lt;/h1&gt;

&lt;p&gt;Windows Terminal 1.6の挙動では、シェーダーを再コンパイルして結果を更新するために以下の手順が必要だったので、ライブコーディングには不向きでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; で指定したHLSLシェーダーに差分を出してファイル保存&lt;/li&gt;
&lt;li&gt;Windows Terminalの &lt;code&gt;settings.json&lt;/code&gt; の &lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; の値に差分を出してファイル保存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初の動画ではシェーダーの描画結果をリアルタイムで更新するために、Vimで2つのファイルを同時編集することで、リアルタイムにライブコーディングっぽいことをしていましたが、かなり操作が忙しいので非実用的でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vimの左側ペイン: HLSLのシェーダー&lt;/li&gt;
&lt;li&gt;Vimの右側ペイン: Windows Terminalのsettings.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、HLSLの更新を検知して、Windows Terminalの &lt;code&gt;settings.json&lt;/code&gt; を書き換えることで、HLSLのホットリロードを実現するスクリプトをnode.jsで実装しました。&lt;/p&gt;

&lt;p&gt;これによって、Windows Terminalの背景でHLSLシェーダーライブコーディングを実現できるようになりました！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Windows Terminal 上のHLSLシェーダーライブコーディング環境を実現するスクリプトをGitHubに公開しました！&lt;br&gt;&lt;br&gt;&amp;gt; HLSLの変更を監視して、settings.json を書き換え&lt;a href=&#34;https://t.co/hjB2MqgsSx&#34;&gt;https://t.co/hjB2MqgsSx&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1361706800282656769?ref_src=twsrc%5Etfw&#34;&gt;February 16, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Windows Terminalの &lt;code&gt;settings.json&lt;/code&gt; に毎回差分を出すために、HLSLファイルをコピーした一時ファイルを作成して、元のファイルのパスと一時ファイルのパスを交互に切り替えて &lt;code&gt;experimental.pixelShaderPath&lt;/code&gt; に設定するような実装としました。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;p&gt;Windows TerminalというMicrosoft公式のアプリ上でHLSLシェーダーライブコーディング環境を実現できるのは熱いですね！楽しい！！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

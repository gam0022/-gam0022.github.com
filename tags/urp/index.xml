<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/urp/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2021 gam0022</copyright>
    <atom:link href="/tags/urp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>UnityのShaderGraphでインクシェーダーを作る</title>
      <link>https://gam0022.net/blog/2022/12/26/unity-ink-shader/</link>
      <pubDate>Mon, 26 Dec 2022 10:36:44 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/12/26/unity-ink-shader/</guid>
      <description>&lt;p&gt;これは&lt;a href=&#34;https://qiita.com/advent-calendar/2022/unity&#34;&gt;Unity Advent Calendar 2022&lt;/a&gt;の22日目の記事です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;スプラトゥーン3、けっこう面白いですね。過去作の1,2は未プレイでしたが、3からスプラデビューしました。&lt;/p&gt;

&lt;p&gt;スプラ3で遊びながら、インクシェーダーの実装方法に興味が出てきたので、UnityのShaderGraphでそれっぽいものを実装してみました。&lt;/p&gt;

&lt;p&gt;ShaderGraphの基本機能だけで構成されており、ノードの量も少なめにしました。&lt;/p&gt;

&lt;p&gt;ShaderGraphの基本操作は解説しませんが、なるべく丁寧に説明をしたつもりなので、ShaderGraphの入門記事として参考にしてください！&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;UnityのShaderGraphでインクシェーダーを試作&lt;a href=&#34;https://twitter.com/hashtag/Unity3D?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Unity3D&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ShaderGraph?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ShaderGraph&lt;/a&gt; &lt;a href=&#34;https://t.co/PHxIkfnkiQ&#34;&gt;pic.twitter.com/PHxIkfnkiQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; がむ (@gam0022) &lt;a href=&#34;https://twitter.com/gam0022/status/1606141695724204032?ref_src=twsrc%5Etfw&#34;&gt;December 23, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader.gif&#34; alt=&#34;インクシェーダー&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;色変更&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-color.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-color.gif&#34; alt=&#34;インクシェーダー 色変更&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しきい値の調整&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-threshold.gif&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/ink-shader-threshold.gif&#34; alt=&#34;インクシェーダー しきい値の調整&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unityプロジェクト

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/ShaderPlaygroundURP&#34;&gt;github.com/gam0022/ShaderPlaygroundURP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/ShaderPlaygroundURP/&#34;&gt;WebGLデモ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;WASDと右クリックのドラッグでカメラ操作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;shadergraph全体&#34;&gt;ShaderGraph全体&lt;/h1&gt;

&lt;p&gt;ShaderGraphの全体です。&lt;/p&gt;

&lt;p&gt;文字が小さくてすみません。&lt;/p&gt;

&lt;p&gt;※2回に分けてスクリーンショットを撮影してMSペイントで手動結合しました。3回以上分割して撮影すればもっと高解像度にできるのですが、手間がかかるので諦めました。
いい感じにウィンドウのスクロール領域を含めて一発でスクリーンショットを撮る方法があれば教えてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/shader-graph-all.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/shader-graph-all.png&#34; alt=&#34;ShaderGraph全体&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;基本方針&#34;&gt;基本方針&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;URPのLitグラフに与えるBaseColorやSmoothnessや法線をいい感じに制御してインクっぽくする

&lt;ul&gt;
&lt;li&gt;カスタムなシェーディングはしない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インクの高さマップはGradient Noiseからプロシージャル生成

&lt;ul&gt;
&lt;li&gt;インタラクティブなインク制御は未対応&lt;/li&gt;
&lt;li&gt;RenderTextureを生成してペイントするようなアプローチでインタラクティブにできそう（今後の課題）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;チュートリアル&#34;&gt;チュートリアル&lt;/h1&gt;

&lt;p&gt;そこまで規模の大きくないShaderGraphですが、理解しやすいように1ステップごと解説します。&lt;/p&gt;

&lt;h2 id=&#34;ステップ1-pbrテクスチャに対応&#34;&gt;ステップ1. PBRテクスチャに対応&lt;/h2&gt;

&lt;p&gt;まずはPBRテクスチャに対応します。&lt;/p&gt;

&lt;p&gt;PBRテクスチャは以下のサイトからお借りしました。とても良い感じのCC0ライセンスの床のタイル素材を利用させていただきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://polyhaven.com/a/cobblestone_floor_08&#34;&gt;Cobblestone Floor 08 Texture • Poly Haven&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これがPBRテクスチャをプロパティにして、ShaderGraphの各種PBRパラメーターを渡すだけのShaderGraphです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/1-armtex.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/1-armtex.png&#34; alt=&#34;PBRテクスチャに対応&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;BaseColor&lt;/code&gt; や &lt;code&gt;Normal&lt;/code&gt; はそのままノードを繋げるだけでOKです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Metallic/Smoothness/Ambient Occlusion&lt;/code&gt; だけ少し工夫がいります。&lt;/p&gt;

&lt;p&gt;Poly Havenのテクスチャは &lt;code&gt;Ambient Occlusion/Roughness/Metallic&lt;/code&gt;（以下、ARMテクスチャ）がRGBに格納されているようなので、RGBの順番をBGRのように並び替える必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Smoothness = 1 - Roughness&lt;/code&gt; の関係があるので &lt;code&gt;One Minus&lt;/code&gt; ノードで変換します。&lt;/p&gt;

&lt;p&gt;これでPoly Havenから落としてきたARMテクスチャに対応したShaderGraphができました。&lt;/p&gt;

&lt;h2 id=&#34;ステップ2-uvのタイリング&#34;&gt;ステップ2. UVのタイリング&lt;/h2&gt;

&lt;p&gt;ここから最終的なインクシェーダーのShaderGraphをステップごとに解説します。&lt;/p&gt;

&lt;p&gt;まずUVのタイリングですが、単純にUVに定数を乗算しているだけです。今回は下地のテクスチャ用とインク用で独立してタイリングできるようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/2-uv.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/2-uv.png&#34; alt=&#34;UVのタイリング&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ3-インクの高さマップ用のノイズ生成&#34;&gt;ステップ3. インクの高さマップ用のノイズ生成&lt;/h2&gt;

&lt;p&gt;インクの高さマップはGradient Noiseから生成します。時間でアニメーションさせるために2つのGradient Noiseを線形補間で合成しています。&lt;/p&gt;

&lt;p&gt;1つ目のGradient NoiseのUVは固定させておいて、2つ目のGradient NoiseのUVはtimeでスクロールさせています。&lt;/p&gt;

&lt;p&gt;非常にシンプルな処理ですが、意外にもそれなりにインクっぽく見えるのではないでしょうか？&lt;/p&gt;

&lt;p&gt;余談になりますが、ShaderGraphのGradient Noiseはシェーダーでプロシージャル生成しているのでGPU負荷も高いと思います。実用するなら軽量化のためにテクスチャのサンプリングに置き換えた方がいいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/3-noise.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/3-noise.png&#34; alt=&#34;インクの高さマップ用のノイズ生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ4-凹凸を考慮したインク判定のしきい値&#34;&gt;ステップ4. 凹凸を考慮したインク判定のしきい値&lt;/h2&gt;

&lt;p&gt;ステップ3. でインクの高さマップを生成しました。この高さマップがしきい値以上ならインクの領域と見なすようにします。&lt;/p&gt;

&lt;p&gt;インク判定のしきい値は定数でも良いのですが、高さマップを考慮してブロックの溝など低い部分の方がインクになりやすくします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/4-threshold.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/4-threshold.png&#34; alt=&#34;インクの高さマップ用のノイズ生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;高さマップの影響力はプロパティで制御できるようにしました。&lt;/p&gt;

&lt;p&gt;高さマップの考慮がないと真っ平らなPlaneにインクが乗っているようで、雑コラ感・馴染まない感があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-off.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-off.png&#34; alt=&#34;高さマップの考慮なし&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;高さマップを考慮すると、ブロックの凹凸を考慮してインクが広がるので、リアリティを少し向上できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-on.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/height-intensity-on.png&#34; alt=&#34;高さマップの考慮あり&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ5-インクのマスク生成&#34;&gt;ステップ5. インクのマスク生成&lt;/h2&gt;

&lt;p&gt;「ステップ3のインクの高さマップ」から「ステップ4のしきい値」を引き算することで、インクのマスク画像を生成します。&lt;/p&gt;

&lt;p&gt;そのままだとコントラストが薄いので、Powerノードでコントラストを強めに調整します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-1-ink-mask.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-1-ink-mask.png&#34; alt=&#34;インクのマスク生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インクのマスクマップをLerpの引数にして、各種PBRパラメーターにインク用の値をブレンドします。
元はARMテクスチャの値をそのままPBRパラメーターとして渡していましたが、間にLerpノードを挟み込んで、インク用の &lt;code&gt;Ambient Occlusion/Roughness/Metallic&lt;/code&gt; をブレンドできるようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-2-ink-mask.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-2-ink-mask.png&#34; alt=&#34;インク用の設定をブレンド&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BaseMapも同じようにLerpします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-3-ink-mask.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/5-3-ink-mask.png&#34; alt=&#34;インク用の設定をブレンド(BaseMap)&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ステップ6-法線の生成&#34;&gt;ステップ6. 法線の生成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/6-normal.png&#34;&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-12-26-unity-ink-shader/6-normal.png&#34; alt=&#34;法線の生成&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ステップ3のインクの高さマップから法線を生成します。Normal From Heightノードがあるので利用します。&lt;/p&gt;

&lt;p&gt;ステップ5のインクのマスクでは高さマップの影響で高周波成分が現れてしまうので滑らかな法線ができず、法線生成には不適切です。しきい値を引き算する前のGradient Noiseの値をNormal From Heightノードに繋ぎます。&lt;/p&gt;

&lt;p&gt;今回もPowerノードでコントラストを調整可能にしました。SaturateノードではなくMaximumノードを利用しているのでは、 &lt;code&gt;Clamp(x, 0, INF)&lt;/code&gt; にしたいからです。&lt;/p&gt;

&lt;p&gt;マスク画像の結果は &lt;code&gt;[0-1]&lt;/code&gt; に正規化する必要がありますが、法線生成のHeightマップであれば最大値の制限は不要だと思ったからです。&lt;/p&gt;

&lt;p&gt;以上がインク用のシェーダーの解説でした。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;ShaderGraphだけでノーコードのインクシェーダーを試作しました。
PBRパラメーターを制御するだけのお手軽な実装ですが、思ったよりも良い見た目になったので満足です。&lt;/p&gt;

&lt;p&gt;今回はインクのマスクにGradient Noiseを利用しましたが、RenderTextureをシェーダー外部から与えればインタラクティブにインクを塗ったりもできると思います。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
